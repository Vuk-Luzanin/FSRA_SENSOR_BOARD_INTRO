
FSRA_2025_E_SENSOR_BOARD_G1_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006390  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08006450  08006450  00007450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a8  080065a8  0000805c  2**0
                  CONTENTS
  4 .ARM          00000000  080065a8  080065a8  0000805c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065a8  080065a8  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065a8  080065a8  000075a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065ac  080065ac  000075ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080065b0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  2000005c  0800660c  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  0800660c  000083a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d7f  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018d7  00000000  00000000  00010e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  000126e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b4  00000000  00000000  00012e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c7b  00000000  00000000  000133f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a1f2  00000000  00000000  0002b06f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a404  00000000  00000000  00035261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf665  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002190  00000000  00000000  000bf6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000c1838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006438 	.word	0x08006438

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08006438 	.word	0x08006438

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_cdrcmple>:
 8000244:	4684      	mov	ip, r0
 8000246:	0010      	movs	r0, r2
 8000248:	4662      	mov	r2, ip
 800024a:	468c      	mov	ip, r1
 800024c:	0019      	movs	r1, r3
 800024e:	4663      	mov	r3, ip
 8000250:	e000      	b.n	8000254 <__aeabi_cdcmpeq>
 8000252:	46c0      	nop			@ (mov r8, r8)

08000254 <__aeabi_cdcmpeq>:
 8000254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000256:	f001 fa8f 	bl	8001778 <__ledf2>
 800025a:	2800      	cmp	r0, #0
 800025c:	d401      	bmi.n	8000262 <__aeabi_cdcmpeq+0xe>
 800025e:	2100      	movs	r1, #0
 8000260:	42c8      	cmn	r0, r1
 8000262:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000264 <__aeabi_dcmpeq>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f001 f9cf 	bl	8001608 <__eqdf2>
 800026a:	4240      	negs	r0, r0
 800026c:	3001      	adds	r0, #1
 800026e:	bd10      	pop	{r4, pc}

08000270 <__aeabi_dcmplt>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f001 fa81 	bl	8001778 <__ledf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	db01      	blt.n	800027e <__aeabi_dcmplt+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__aeabi_dcmple>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f001 fa77 	bl	8001778 <__ledf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	dd01      	ble.n	8000292 <__aeabi_dcmple+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			@ (mov r8, r8)

08000298 <__aeabi_dcmpgt>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f001 f9f9 	bl	8001690 <__gedf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	dc01      	bgt.n	80002a6 <__aeabi_dcmpgt+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			@ (mov r8, r8)

080002ac <__aeabi_dcmpge>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	f001 f9ef 	bl	8001690 <__gedf2>
 80002b2:	2800      	cmp	r0, #0
 80002b4:	da01      	bge.n	80002ba <__aeabi_dcmpge+0xe>
 80002b6:	2000      	movs	r0, #0
 80002b8:	bd10      	pop	{r4, pc}
 80002ba:	2001      	movs	r0, #1
 80002bc:	bd10      	pop	{r4, pc}
 80002be:	46c0      	nop			@ (mov r8, r8)

080002c0 <__aeabi_fdiv>:
 80002c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c2:	464f      	mov	r7, r9
 80002c4:	4646      	mov	r6, r8
 80002c6:	46d6      	mov	lr, sl
 80002c8:	0244      	lsls	r4, r0, #9
 80002ca:	b5c0      	push	{r6, r7, lr}
 80002cc:	0047      	lsls	r7, r0, #1
 80002ce:	1c0e      	adds	r6, r1, #0
 80002d0:	0a64      	lsrs	r4, r4, #9
 80002d2:	0e3f      	lsrs	r7, r7, #24
 80002d4:	0fc5      	lsrs	r5, r0, #31
 80002d6:	2f00      	cmp	r7, #0
 80002d8:	d03c      	beq.n	8000354 <__aeabi_fdiv+0x94>
 80002da:	2fff      	cmp	r7, #255	@ 0xff
 80002dc:	d042      	beq.n	8000364 <__aeabi_fdiv+0xa4>
 80002de:	2300      	movs	r3, #0
 80002e0:	2280      	movs	r2, #128	@ 0x80
 80002e2:	4699      	mov	r9, r3
 80002e4:	469a      	mov	sl, r3
 80002e6:	00e4      	lsls	r4, r4, #3
 80002e8:	04d2      	lsls	r2, r2, #19
 80002ea:	4314      	orrs	r4, r2
 80002ec:	3f7f      	subs	r7, #127	@ 0x7f
 80002ee:	0273      	lsls	r3, r6, #9
 80002f0:	0a5b      	lsrs	r3, r3, #9
 80002f2:	4698      	mov	r8, r3
 80002f4:	0073      	lsls	r3, r6, #1
 80002f6:	0e1b      	lsrs	r3, r3, #24
 80002f8:	0ff6      	lsrs	r6, r6, #31
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d01b      	beq.n	8000336 <__aeabi_fdiv+0x76>
 80002fe:	2bff      	cmp	r3, #255	@ 0xff
 8000300:	d013      	beq.n	800032a <__aeabi_fdiv+0x6a>
 8000302:	4642      	mov	r2, r8
 8000304:	2180      	movs	r1, #128	@ 0x80
 8000306:	00d2      	lsls	r2, r2, #3
 8000308:	04c9      	lsls	r1, r1, #19
 800030a:	4311      	orrs	r1, r2
 800030c:	4688      	mov	r8, r1
 800030e:	2000      	movs	r0, #0
 8000310:	3b7f      	subs	r3, #127	@ 0x7f
 8000312:	0029      	movs	r1, r5
 8000314:	1aff      	subs	r7, r7, r3
 8000316:	464b      	mov	r3, r9
 8000318:	4071      	eors	r1, r6
 800031a:	b2c9      	uxtb	r1, r1
 800031c:	2b0f      	cmp	r3, #15
 800031e:	d900      	bls.n	8000322 <__aeabi_fdiv+0x62>
 8000320:	e0b5      	b.n	800048e <__aeabi_fdiv+0x1ce>
 8000322:	4a74      	ldr	r2, [pc, #464]	@ (80004f4 <__aeabi_fdiv+0x234>)
 8000324:	009b      	lsls	r3, r3, #2
 8000326:	58d3      	ldr	r3, [r2, r3]
 8000328:	469f      	mov	pc, r3
 800032a:	4643      	mov	r3, r8
 800032c:	2b00      	cmp	r3, #0
 800032e:	d13f      	bne.n	80003b0 <__aeabi_fdiv+0xf0>
 8000330:	3fff      	subs	r7, #255	@ 0xff
 8000332:	3302      	adds	r3, #2
 8000334:	e003      	b.n	800033e <__aeabi_fdiv+0x7e>
 8000336:	4643      	mov	r3, r8
 8000338:	2b00      	cmp	r3, #0
 800033a:	d12d      	bne.n	8000398 <__aeabi_fdiv+0xd8>
 800033c:	2301      	movs	r3, #1
 800033e:	0029      	movs	r1, r5
 8000340:	464a      	mov	r2, r9
 8000342:	4071      	eors	r1, r6
 8000344:	b2c9      	uxtb	r1, r1
 8000346:	431a      	orrs	r2, r3
 8000348:	2a0e      	cmp	r2, #14
 800034a:	d838      	bhi.n	80003be <__aeabi_fdiv+0xfe>
 800034c:	486a      	ldr	r0, [pc, #424]	@ (80004f8 <__aeabi_fdiv+0x238>)
 800034e:	0092      	lsls	r2, r2, #2
 8000350:	5882      	ldr	r2, [r0, r2]
 8000352:	4697      	mov	pc, r2
 8000354:	2c00      	cmp	r4, #0
 8000356:	d113      	bne.n	8000380 <__aeabi_fdiv+0xc0>
 8000358:	2304      	movs	r3, #4
 800035a:	4699      	mov	r9, r3
 800035c:	3b03      	subs	r3, #3
 800035e:	2700      	movs	r7, #0
 8000360:	469a      	mov	sl, r3
 8000362:	e7c4      	b.n	80002ee <__aeabi_fdiv+0x2e>
 8000364:	2c00      	cmp	r4, #0
 8000366:	d105      	bne.n	8000374 <__aeabi_fdiv+0xb4>
 8000368:	2308      	movs	r3, #8
 800036a:	4699      	mov	r9, r3
 800036c:	3b06      	subs	r3, #6
 800036e:	27ff      	movs	r7, #255	@ 0xff
 8000370:	469a      	mov	sl, r3
 8000372:	e7bc      	b.n	80002ee <__aeabi_fdiv+0x2e>
 8000374:	230c      	movs	r3, #12
 8000376:	4699      	mov	r9, r3
 8000378:	3b09      	subs	r3, #9
 800037a:	27ff      	movs	r7, #255	@ 0xff
 800037c:	469a      	mov	sl, r3
 800037e:	e7b6      	b.n	80002ee <__aeabi_fdiv+0x2e>
 8000380:	0020      	movs	r0, r4
 8000382:	f002 f9eb 	bl	800275c <__clzsi2>
 8000386:	2776      	movs	r7, #118	@ 0x76
 8000388:	1f43      	subs	r3, r0, #5
 800038a:	409c      	lsls	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	427f      	negs	r7, r7
 8000390:	4699      	mov	r9, r3
 8000392:	469a      	mov	sl, r3
 8000394:	1a3f      	subs	r7, r7, r0
 8000396:	e7aa      	b.n	80002ee <__aeabi_fdiv+0x2e>
 8000398:	4640      	mov	r0, r8
 800039a:	f002 f9df 	bl	800275c <__clzsi2>
 800039e:	4642      	mov	r2, r8
 80003a0:	1f43      	subs	r3, r0, #5
 80003a2:	409a      	lsls	r2, r3
 80003a4:	2376      	movs	r3, #118	@ 0x76
 80003a6:	425b      	negs	r3, r3
 80003a8:	1a1b      	subs	r3, r3, r0
 80003aa:	4690      	mov	r8, r2
 80003ac:	2000      	movs	r0, #0
 80003ae:	e7b0      	b.n	8000312 <__aeabi_fdiv+0x52>
 80003b0:	2303      	movs	r3, #3
 80003b2:	464a      	mov	r2, r9
 80003b4:	431a      	orrs	r2, r3
 80003b6:	4691      	mov	r9, r2
 80003b8:	2003      	movs	r0, #3
 80003ba:	33fc      	adds	r3, #252	@ 0xfc
 80003bc:	e7a9      	b.n	8000312 <__aeabi_fdiv+0x52>
 80003be:	000d      	movs	r5, r1
 80003c0:	20ff      	movs	r0, #255	@ 0xff
 80003c2:	2200      	movs	r2, #0
 80003c4:	05c0      	lsls	r0, r0, #23
 80003c6:	07ed      	lsls	r5, r5, #31
 80003c8:	4310      	orrs	r0, r2
 80003ca:	4328      	orrs	r0, r5
 80003cc:	bce0      	pop	{r5, r6, r7}
 80003ce:	46ba      	mov	sl, r7
 80003d0:	46b1      	mov	r9, r6
 80003d2:	46a8      	mov	r8, r5
 80003d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003d6:	000d      	movs	r5, r1
 80003d8:	2000      	movs	r0, #0
 80003da:	2200      	movs	r2, #0
 80003dc:	e7f2      	b.n	80003c4 <__aeabi_fdiv+0x104>
 80003de:	4653      	mov	r3, sl
 80003e0:	2b02      	cmp	r3, #2
 80003e2:	d0ed      	beq.n	80003c0 <__aeabi_fdiv+0x100>
 80003e4:	2b03      	cmp	r3, #3
 80003e6:	d033      	beq.n	8000450 <__aeabi_fdiv+0x190>
 80003e8:	46a0      	mov	r8, r4
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d105      	bne.n	80003fa <__aeabi_fdiv+0x13a>
 80003ee:	2000      	movs	r0, #0
 80003f0:	2200      	movs	r2, #0
 80003f2:	e7e7      	b.n	80003c4 <__aeabi_fdiv+0x104>
 80003f4:	0035      	movs	r5, r6
 80003f6:	2803      	cmp	r0, #3
 80003f8:	d07a      	beq.n	80004f0 <__aeabi_fdiv+0x230>
 80003fa:	003b      	movs	r3, r7
 80003fc:	337f      	adds	r3, #127	@ 0x7f
 80003fe:	2b00      	cmp	r3, #0
 8000400:	dd2d      	ble.n	800045e <__aeabi_fdiv+0x19e>
 8000402:	4642      	mov	r2, r8
 8000404:	0752      	lsls	r2, r2, #29
 8000406:	d007      	beq.n	8000418 <__aeabi_fdiv+0x158>
 8000408:	220f      	movs	r2, #15
 800040a:	4641      	mov	r1, r8
 800040c:	400a      	ands	r2, r1
 800040e:	2a04      	cmp	r2, #4
 8000410:	d002      	beq.n	8000418 <__aeabi_fdiv+0x158>
 8000412:	2204      	movs	r2, #4
 8000414:	4694      	mov	ip, r2
 8000416:	44e0      	add	r8, ip
 8000418:	4642      	mov	r2, r8
 800041a:	0112      	lsls	r2, r2, #4
 800041c:	d505      	bpl.n	800042a <__aeabi_fdiv+0x16a>
 800041e:	4642      	mov	r2, r8
 8000420:	4b36      	ldr	r3, [pc, #216]	@ (80004fc <__aeabi_fdiv+0x23c>)
 8000422:	401a      	ands	r2, r3
 8000424:	003b      	movs	r3, r7
 8000426:	4690      	mov	r8, r2
 8000428:	3380      	adds	r3, #128	@ 0x80
 800042a:	2bfe      	cmp	r3, #254	@ 0xfe
 800042c:	dcc8      	bgt.n	80003c0 <__aeabi_fdiv+0x100>
 800042e:	4642      	mov	r2, r8
 8000430:	0192      	lsls	r2, r2, #6
 8000432:	0a52      	lsrs	r2, r2, #9
 8000434:	b2d8      	uxtb	r0, r3
 8000436:	e7c5      	b.n	80003c4 <__aeabi_fdiv+0x104>
 8000438:	2280      	movs	r2, #128	@ 0x80
 800043a:	2500      	movs	r5, #0
 800043c:	20ff      	movs	r0, #255	@ 0xff
 800043e:	03d2      	lsls	r2, r2, #15
 8000440:	e7c0      	b.n	80003c4 <__aeabi_fdiv+0x104>
 8000442:	2280      	movs	r2, #128	@ 0x80
 8000444:	03d2      	lsls	r2, r2, #15
 8000446:	4214      	tst	r4, r2
 8000448:	d002      	beq.n	8000450 <__aeabi_fdiv+0x190>
 800044a:	4643      	mov	r3, r8
 800044c:	4213      	tst	r3, r2
 800044e:	d049      	beq.n	80004e4 <__aeabi_fdiv+0x224>
 8000450:	2280      	movs	r2, #128	@ 0x80
 8000452:	03d2      	lsls	r2, r2, #15
 8000454:	4322      	orrs	r2, r4
 8000456:	0252      	lsls	r2, r2, #9
 8000458:	20ff      	movs	r0, #255	@ 0xff
 800045a:	0a52      	lsrs	r2, r2, #9
 800045c:	e7b2      	b.n	80003c4 <__aeabi_fdiv+0x104>
 800045e:	2201      	movs	r2, #1
 8000460:	1ad3      	subs	r3, r2, r3
 8000462:	2b1b      	cmp	r3, #27
 8000464:	dcc3      	bgt.n	80003ee <__aeabi_fdiv+0x12e>
 8000466:	4642      	mov	r2, r8
 8000468:	40da      	lsrs	r2, r3
 800046a:	4643      	mov	r3, r8
 800046c:	379e      	adds	r7, #158	@ 0x9e
 800046e:	40bb      	lsls	r3, r7
 8000470:	1e59      	subs	r1, r3, #1
 8000472:	418b      	sbcs	r3, r1
 8000474:	431a      	orrs	r2, r3
 8000476:	0753      	lsls	r3, r2, #29
 8000478:	d004      	beq.n	8000484 <__aeabi_fdiv+0x1c4>
 800047a:	230f      	movs	r3, #15
 800047c:	4013      	ands	r3, r2
 800047e:	2b04      	cmp	r3, #4
 8000480:	d000      	beq.n	8000484 <__aeabi_fdiv+0x1c4>
 8000482:	3204      	adds	r2, #4
 8000484:	0153      	lsls	r3, r2, #5
 8000486:	d529      	bpl.n	80004dc <__aeabi_fdiv+0x21c>
 8000488:	2001      	movs	r0, #1
 800048a:	2200      	movs	r2, #0
 800048c:	e79a      	b.n	80003c4 <__aeabi_fdiv+0x104>
 800048e:	4642      	mov	r2, r8
 8000490:	0163      	lsls	r3, r4, #5
 8000492:	0155      	lsls	r5, r2, #5
 8000494:	42ab      	cmp	r3, r5
 8000496:	d215      	bcs.n	80004c4 <__aeabi_fdiv+0x204>
 8000498:	201b      	movs	r0, #27
 800049a:	2200      	movs	r2, #0
 800049c:	3f01      	subs	r7, #1
 800049e:	2601      	movs	r6, #1
 80004a0:	001c      	movs	r4, r3
 80004a2:	0052      	lsls	r2, r2, #1
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	2c00      	cmp	r4, #0
 80004a8:	db01      	blt.n	80004ae <__aeabi_fdiv+0x1ee>
 80004aa:	429d      	cmp	r5, r3
 80004ac:	d801      	bhi.n	80004b2 <__aeabi_fdiv+0x1f2>
 80004ae:	1b5b      	subs	r3, r3, r5
 80004b0:	4332      	orrs	r2, r6
 80004b2:	3801      	subs	r0, #1
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d1f3      	bne.n	80004a0 <__aeabi_fdiv+0x1e0>
 80004b8:	1e58      	subs	r0, r3, #1
 80004ba:	4183      	sbcs	r3, r0
 80004bc:	4313      	orrs	r3, r2
 80004be:	4698      	mov	r8, r3
 80004c0:	000d      	movs	r5, r1
 80004c2:	e79a      	b.n	80003fa <__aeabi_fdiv+0x13a>
 80004c4:	201a      	movs	r0, #26
 80004c6:	2201      	movs	r2, #1
 80004c8:	1b5b      	subs	r3, r3, r5
 80004ca:	e7e8      	b.n	800049e <__aeabi_fdiv+0x1de>
 80004cc:	3b02      	subs	r3, #2
 80004ce:	425a      	negs	r2, r3
 80004d0:	4153      	adcs	r3, r2
 80004d2:	425b      	negs	r3, r3
 80004d4:	0035      	movs	r5, r6
 80004d6:	2200      	movs	r2, #0
 80004d8:	b2d8      	uxtb	r0, r3
 80004da:	e773      	b.n	80003c4 <__aeabi_fdiv+0x104>
 80004dc:	0192      	lsls	r2, r2, #6
 80004de:	2000      	movs	r0, #0
 80004e0:	0a52      	lsrs	r2, r2, #9
 80004e2:	e76f      	b.n	80003c4 <__aeabi_fdiv+0x104>
 80004e4:	431a      	orrs	r2, r3
 80004e6:	0252      	lsls	r2, r2, #9
 80004e8:	0035      	movs	r5, r6
 80004ea:	20ff      	movs	r0, #255	@ 0xff
 80004ec:	0a52      	lsrs	r2, r2, #9
 80004ee:	e769      	b.n	80003c4 <__aeabi_fdiv+0x104>
 80004f0:	4644      	mov	r4, r8
 80004f2:	e7ad      	b.n	8000450 <__aeabi_fdiv+0x190>
 80004f4:	08006480 	.word	0x08006480
 80004f8:	080064c0 	.word	0x080064c0
 80004fc:	f7ffffff 	.word	0xf7ffffff

08000500 <__aeabi_fsub>:
 8000500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000502:	4647      	mov	r7, r8
 8000504:	46ce      	mov	lr, r9
 8000506:	024e      	lsls	r6, r1, #9
 8000508:	0243      	lsls	r3, r0, #9
 800050a:	0045      	lsls	r5, r0, #1
 800050c:	0a72      	lsrs	r2, r6, #9
 800050e:	0fc4      	lsrs	r4, r0, #31
 8000510:	0048      	lsls	r0, r1, #1
 8000512:	b580      	push	{r7, lr}
 8000514:	4694      	mov	ip, r2
 8000516:	0a5f      	lsrs	r7, r3, #9
 8000518:	0e2d      	lsrs	r5, r5, #24
 800051a:	099b      	lsrs	r3, r3, #6
 800051c:	0e00      	lsrs	r0, r0, #24
 800051e:	0fc9      	lsrs	r1, r1, #31
 8000520:	09b6      	lsrs	r6, r6, #6
 8000522:	28ff      	cmp	r0, #255	@ 0xff
 8000524:	d024      	beq.n	8000570 <__aeabi_fsub+0x70>
 8000526:	2201      	movs	r2, #1
 8000528:	4051      	eors	r1, r2
 800052a:	1a2a      	subs	r2, r5, r0
 800052c:	428c      	cmp	r4, r1
 800052e:	d00f      	beq.n	8000550 <__aeabi_fsub+0x50>
 8000530:	2a00      	cmp	r2, #0
 8000532:	dc00      	bgt.n	8000536 <__aeabi_fsub+0x36>
 8000534:	e16a      	b.n	800080c <__aeabi_fsub+0x30c>
 8000536:	2800      	cmp	r0, #0
 8000538:	d135      	bne.n	80005a6 <__aeabi_fsub+0xa6>
 800053a:	2e00      	cmp	r6, #0
 800053c:	d100      	bne.n	8000540 <__aeabi_fsub+0x40>
 800053e:	e0a2      	b.n	8000686 <__aeabi_fsub+0x186>
 8000540:	1e51      	subs	r1, r2, #1
 8000542:	2a01      	cmp	r2, #1
 8000544:	d100      	bne.n	8000548 <__aeabi_fsub+0x48>
 8000546:	e124      	b.n	8000792 <__aeabi_fsub+0x292>
 8000548:	2aff      	cmp	r2, #255	@ 0xff
 800054a:	d021      	beq.n	8000590 <__aeabi_fsub+0x90>
 800054c:	000a      	movs	r2, r1
 800054e:	e02f      	b.n	80005b0 <__aeabi_fsub+0xb0>
 8000550:	2a00      	cmp	r2, #0
 8000552:	dc00      	bgt.n	8000556 <__aeabi_fsub+0x56>
 8000554:	e167      	b.n	8000826 <__aeabi_fsub+0x326>
 8000556:	2800      	cmp	r0, #0
 8000558:	d05e      	beq.n	8000618 <__aeabi_fsub+0x118>
 800055a:	2dff      	cmp	r5, #255	@ 0xff
 800055c:	d018      	beq.n	8000590 <__aeabi_fsub+0x90>
 800055e:	2180      	movs	r1, #128	@ 0x80
 8000560:	04c9      	lsls	r1, r1, #19
 8000562:	430e      	orrs	r6, r1
 8000564:	2a1b      	cmp	r2, #27
 8000566:	dc00      	bgt.n	800056a <__aeabi_fsub+0x6a>
 8000568:	e076      	b.n	8000658 <__aeabi_fsub+0x158>
 800056a:	002a      	movs	r2, r5
 800056c:	3301      	adds	r3, #1
 800056e:	e032      	b.n	80005d6 <__aeabi_fsub+0xd6>
 8000570:	002a      	movs	r2, r5
 8000572:	3aff      	subs	r2, #255	@ 0xff
 8000574:	4691      	mov	r9, r2
 8000576:	2e00      	cmp	r6, #0
 8000578:	d042      	beq.n	8000600 <__aeabi_fsub+0x100>
 800057a:	428c      	cmp	r4, r1
 800057c:	d055      	beq.n	800062a <__aeabi_fsub+0x12a>
 800057e:	464a      	mov	r2, r9
 8000580:	2a00      	cmp	r2, #0
 8000582:	d100      	bne.n	8000586 <__aeabi_fsub+0x86>
 8000584:	e09c      	b.n	80006c0 <__aeabi_fsub+0x1c0>
 8000586:	2d00      	cmp	r5, #0
 8000588:	d100      	bne.n	800058c <__aeabi_fsub+0x8c>
 800058a:	e077      	b.n	800067c <__aeabi_fsub+0x17c>
 800058c:	000c      	movs	r4, r1
 800058e:	0033      	movs	r3, r6
 8000590:	08db      	lsrs	r3, r3, #3
 8000592:	2b00      	cmp	r3, #0
 8000594:	d100      	bne.n	8000598 <__aeabi_fsub+0x98>
 8000596:	e06e      	b.n	8000676 <__aeabi_fsub+0x176>
 8000598:	2280      	movs	r2, #128	@ 0x80
 800059a:	03d2      	lsls	r2, r2, #15
 800059c:	4313      	orrs	r3, r2
 800059e:	025b      	lsls	r3, r3, #9
 80005a0:	20ff      	movs	r0, #255	@ 0xff
 80005a2:	0a5b      	lsrs	r3, r3, #9
 80005a4:	e024      	b.n	80005f0 <__aeabi_fsub+0xf0>
 80005a6:	2dff      	cmp	r5, #255	@ 0xff
 80005a8:	d0f2      	beq.n	8000590 <__aeabi_fsub+0x90>
 80005aa:	2180      	movs	r1, #128	@ 0x80
 80005ac:	04c9      	lsls	r1, r1, #19
 80005ae:	430e      	orrs	r6, r1
 80005b0:	2101      	movs	r1, #1
 80005b2:	2a1b      	cmp	r2, #27
 80005b4:	dc08      	bgt.n	80005c8 <__aeabi_fsub+0xc8>
 80005b6:	0031      	movs	r1, r6
 80005b8:	2020      	movs	r0, #32
 80005ba:	40d1      	lsrs	r1, r2
 80005bc:	1a82      	subs	r2, r0, r2
 80005be:	4096      	lsls	r6, r2
 80005c0:	0032      	movs	r2, r6
 80005c2:	1e50      	subs	r0, r2, #1
 80005c4:	4182      	sbcs	r2, r0
 80005c6:	4311      	orrs	r1, r2
 80005c8:	1a5b      	subs	r3, r3, r1
 80005ca:	015a      	lsls	r2, r3, #5
 80005cc:	d460      	bmi.n	8000690 <__aeabi_fsub+0x190>
 80005ce:	2107      	movs	r1, #7
 80005d0:	002a      	movs	r2, r5
 80005d2:	4019      	ands	r1, r3
 80005d4:	d057      	beq.n	8000686 <__aeabi_fsub+0x186>
 80005d6:	210f      	movs	r1, #15
 80005d8:	4019      	ands	r1, r3
 80005da:	2904      	cmp	r1, #4
 80005dc:	d000      	beq.n	80005e0 <__aeabi_fsub+0xe0>
 80005de:	3304      	adds	r3, #4
 80005e0:	0159      	lsls	r1, r3, #5
 80005e2:	d550      	bpl.n	8000686 <__aeabi_fsub+0x186>
 80005e4:	1c50      	adds	r0, r2, #1
 80005e6:	2afe      	cmp	r2, #254	@ 0xfe
 80005e8:	d045      	beq.n	8000676 <__aeabi_fsub+0x176>
 80005ea:	019b      	lsls	r3, r3, #6
 80005ec:	b2c0      	uxtb	r0, r0
 80005ee:	0a5b      	lsrs	r3, r3, #9
 80005f0:	05c0      	lsls	r0, r0, #23
 80005f2:	4318      	orrs	r0, r3
 80005f4:	07e4      	lsls	r4, r4, #31
 80005f6:	4320      	orrs	r0, r4
 80005f8:	bcc0      	pop	{r6, r7}
 80005fa:	46b9      	mov	r9, r7
 80005fc:	46b0      	mov	r8, r6
 80005fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000600:	2201      	movs	r2, #1
 8000602:	4051      	eors	r1, r2
 8000604:	428c      	cmp	r4, r1
 8000606:	d1ba      	bne.n	800057e <__aeabi_fsub+0x7e>
 8000608:	464a      	mov	r2, r9
 800060a:	2a00      	cmp	r2, #0
 800060c:	d010      	beq.n	8000630 <__aeabi_fsub+0x130>
 800060e:	2d00      	cmp	r5, #0
 8000610:	d100      	bne.n	8000614 <__aeabi_fsub+0x114>
 8000612:	e098      	b.n	8000746 <__aeabi_fsub+0x246>
 8000614:	2300      	movs	r3, #0
 8000616:	e7bb      	b.n	8000590 <__aeabi_fsub+0x90>
 8000618:	2e00      	cmp	r6, #0
 800061a:	d034      	beq.n	8000686 <__aeabi_fsub+0x186>
 800061c:	1e51      	subs	r1, r2, #1
 800061e:	2a01      	cmp	r2, #1
 8000620:	d06e      	beq.n	8000700 <__aeabi_fsub+0x200>
 8000622:	2aff      	cmp	r2, #255	@ 0xff
 8000624:	d0b4      	beq.n	8000590 <__aeabi_fsub+0x90>
 8000626:	000a      	movs	r2, r1
 8000628:	e79c      	b.n	8000564 <__aeabi_fsub+0x64>
 800062a:	2a00      	cmp	r2, #0
 800062c:	d000      	beq.n	8000630 <__aeabi_fsub+0x130>
 800062e:	e088      	b.n	8000742 <__aeabi_fsub+0x242>
 8000630:	20fe      	movs	r0, #254	@ 0xfe
 8000632:	1c6a      	adds	r2, r5, #1
 8000634:	4210      	tst	r0, r2
 8000636:	d000      	beq.n	800063a <__aeabi_fsub+0x13a>
 8000638:	e092      	b.n	8000760 <__aeabi_fsub+0x260>
 800063a:	2d00      	cmp	r5, #0
 800063c:	d000      	beq.n	8000640 <__aeabi_fsub+0x140>
 800063e:	e0a4      	b.n	800078a <__aeabi_fsub+0x28a>
 8000640:	2b00      	cmp	r3, #0
 8000642:	d100      	bne.n	8000646 <__aeabi_fsub+0x146>
 8000644:	e0cb      	b.n	80007de <__aeabi_fsub+0x2de>
 8000646:	2e00      	cmp	r6, #0
 8000648:	d000      	beq.n	800064c <__aeabi_fsub+0x14c>
 800064a:	e0ca      	b.n	80007e2 <__aeabi_fsub+0x2e2>
 800064c:	2200      	movs	r2, #0
 800064e:	08db      	lsrs	r3, r3, #3
 8000650:	025b      	lsls	r3, r3, #9
 8000652:	0a5b      	lsrs	r3, r3, #9
 8000654:	b2d0      	uxtb	r0, r2
 8000656:	e7cb      	b.n	80005f0 <__aeabi_fsub+0xf0>
 8000658:	0031      	movs	r1, r6
 800065a:	2020      	movs	r0, #32
 800065c:	40d1      	lsrs	r1, r2
 800065e:	1a82      	subs	r2, r0, r2
 8000660:	4096      	lsls	r6, r2
 8000662:	0032      	movs	r2, r6
 8000664:	1e50      	subs	r0, r2, #1
 8000666:	4182      	sbcs	r2, r0
 8000668:	430a      	orrs	r2, r1
 800066a:	189b      	adds	r3, r3, r2
 800066c:	015a      	lsls	r2, r3, #5
 800066e:	d5ae      	bpl.n	80005ce <__aeabi_fsub+0xce>
 8000670:	1c6a      	adds	r2, r5, #1
 8000672:	2dfe      	cmp	r5, #254	@ 0xfe
 8000674:	d14a      	bne.n	800070c <__aeabi_fsub+0x20c>
 8000676:	20ff      	movs	r0, #255	@ 0xff
 8000678:	2300      	movs	r3, #0
 800067a:	e7b9      	b.n	80005f0 <__aeabi_fsub+0xf0>
 800067c:	22ff      	movs	r2, #255	@ 0xff
 800067e:	2b00      	cmp	r3, #0
 8000680:	d14b      	bne.n	800071a <__aeabi_fsub+0x21a>
 8000682:	000c      	movs	r4, r1
 8000684:	0033      	movs	r3, r6
 8000686:	08db      	lsrs	r3, r3, #3
 8000688:	2aff      	cmp	r2, #255	@ 0xff
 800068a:	d100      	bne.n	800068e <__aeabi_fsub+0x18e>
 800068c:	e781      	b.n	8000592 <__aeabi_fsub+0x92>
 800068e:	e7df      	b.n	8000650 <__aeabi_fsub+0x150>
 8000690:	019f      	lsls	r7, r3, #6
 8000692:	09bf      	lsrs	r7, r7, #6
 8000694:	0038      	movs	r0, r7
 8000696:	f002 f861 	bl	800275c <__clzsi2>
 800069a:	3805      	subs	r0, #5
 800069c:	4087      	lsls	r7, r0
 800069e:	4285      	cmp	r5, r0
 80006a0:	dc21      	bgt.n	80006e6 <__aeabi_fsub+0x1e6>
 80006a2:	003b      	movs	r3, r7
 80006a4:	2120      	movs	r1, #32
 80006a6:	1b42      	subs	r2, r0, r5
 80006a8:	3201      	adds	r2, #1
 80006aa:	40d3      	lsrs	r3, r2
 80006ac:	1a8a      	subs	r2, r1, r2
 80006ae:	4097      	lsls	r7, r2
 80006b0:	1e7a      	subs	r2, r7, #1
 80006b2:	4197      	sbcs	r7, r2
 80006b4:	2200      	movs	r2, #0
 80006b6:	433b      	orrs	r3, r7
 80006b8:	0759      	lsls	r1, r3, #29
 80006ba:	d000      	beq.n	80006be <__aeabi_fsub+0x1be>
 80006bc:	e78b      	b.n	80005d6 <__aeabi_fsub+0xd6>
 80006be:	e78f      	b.n	80005e0 <__aeabi_fsub+0xe0>
 80006c0:	20fe      	movs	r0, #254	@ 0xfe
 80006c2:	1c6a      	adds	r2, r5, #1
 80006c4:	4210      	tst	r0, r2
 80006c6:	d112      	bne.n	80006ee <__aeabi_fsub+0x1ee>
 80006c8:	2d00      	cmp	r5, #0
 80006ca:	d152      	bne.n	8000772 <__aeabi_fsub+0x272>
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d07c      	beq.n	80007ca <__aeabi_fsub+0x2ca>
 80006d0:	2e00      	cmp	r6, #0
 80006d2:	d0bb      	beq.n	800064c <__aeabi_fsub+0x14c>
 80006d4:	1b9a      	subs	r2, r3, r6
 80006d6:	0150      	lsls	r0, r2, #5
 80006d8:	d400      	bmi.n	80006dc <__aeabi_fsub+0x1dc>
 80006da:	e08b      	b.n	80007f4 <__aeabi_fsub+0x2f4>
 80006dc:	2401      	movs	r4, #1
 80006de:	2200      	movs	r2, #0
 80006e0:	1af3      	subs	r3, r6, r3
 80006e2:	400c      	ands	r4, r1
 80006e4:	e7e8      	b.n	80006b8 <__aeabi_fsub+0x1b8>
 80006e6:	4b56      	ldr	r3, [pc, #344]	@ (8000840 <__aeabi_fsub+0x340>)
 80006e8:	1a2a      	subs	r2, r5, r0
 80006ea:	403b      	ands	r3, r7
 80006ec:	e7e4      	b.n	80006b8 <__aeabi_fsub+0x1b8>
 80006ee:	1b9f      	subs	r7, r3, r6
 80006f0:	017a      	lsls	r2, r7, #5
 80006f2:	d446      	bmi.n	8000782 <__aeabi_fsub+0x282>
 80006f4:	2f00      	cmp	r7, #0
 80006f6:	d1cd      	bne.n	8000694 <__aeabi_fsub+0x194>
 80006f8:	2400      	movs	r4, #0
 80006fa:	2000      	movs	r0, #0
 80006fc:	2300      	movs	r3, #0
 80006fe:	e777      	b.n	80005f0 <__aeabi_fsub+0xf0>
 8000700:	199b      	adds	r3, r3, r6
 8000702:	2501      	movs	r5, #1
 8000704:	3201      	adds	r2, #1
 8000706:	0159      	lsls	r1, r3, #5
 8000708:	d400      	bmi.n	800070c <__aeabi_fsub+0x20c>
 800070a:	e760      	b.n	80005ce <__aeabi_fsub+0xce>
 800070c:	2101      	movs	r1, #1
 800070e:	484d      	ldr	r0, [pc, #308]	@ (8000844 <__aeabi_fsub+0x344>)
 8000710:	4019      	ands	r1, r3
 8000712:	085b      	lsrs	r3, r3, #1
 8000714:	4003      	ands	r3, r0
 8000716:	430b      	orrs	r3, r1
 8000718:	e7ce      	b.n	80006b8 <__aeabi_fsub+0x1b8>
 800071a:	1e57      	subs	r7, r2, #1
 800071c:	2a01      	cmp	r2, #1
 800071e:	d05a      	beq.n	80007d6 <__aeabi_fsub+0x2d6>
 8000720:	000c      	movs	r4, r1
 8000722:	2aff      	cmp	r2, #255	@ 0xff
 8000724:	d033      	beq.n	800078e <__aeabi_fsub+0x28e>
 8000726:	2201      	movs	r2, #1
 8000728:	2f1b      	cmp	r7, #27
 800072a:	dc07      	bgt.n	800073c <__aeabi_fsub+0x23c>
 800072c:	2120      	movs	r1, #32
 800072e:	1bc9      	subs	r1, r1, r7
 8000730:	001a      	movs	r2, r3
 8000732:	408b      	lsls	r3, r1
 8000734:	40fa      	lsrs	r2, r7
 8000736:	1e59      	subs	r1, r3, #1
 8000738:	418b      	sbcs	r3, r1
 800073a:	431a      	orrs	r2, r3
 800073c:	0005      	movs	r5, r0
 800073e:	1ab3      	subs	r3, r6, r2
 8000740:	e743      	b.n	80005ca <__aeabi_fsub+0xca>
 8000742:	2d00      	cmp	r5, #0
 8000744:	d123      	bne.n	800078e <__aeabi_fsub+0x28e>
 8000746:	22ff      	movs	r2, #255	@ 0xff
 8000748:	2b00      	cmp	r3, #0
 800074a:	d09b      	beq.n	8000684 <__aeabi_fsub+0x184>
 800074c:	1e51      	subs	r1, r2, #1
 800074e:	2a01      	cmp	r2, #1
 8000750:	d0d6      	beq.n	8000700 <__aeabi_fsub+0x200>
 8000752:	2aff      	cmp	r2, #255	@ 0xff
 8000754:	d01b      	beq.n	800078e <__aeabi_fsub+0x28e>
 8000756:	291b      	cmp	r1, #27
 8000758:	dd2c      	ble.n	80007b4 <__aeabi_fsub+0x2b4>
 800075a:	0002      	movs	r2, r0
 800075c:	1c73      	adds	r3, r6, #1
 800075e:	e73a      	b.n	80005d6 <__aeabi_fsub+0xd6>
 8000760:	2aff      	cmp	r2, #255	@ 0xff
 8000762:	d088      	beq.n	8000676 <__aeabi_fsub+0x176>
 8000764:	199b      	adds	r3, r3, r6
 8000766:	085b      	lsrs	r3, r3, #1
 8000768:	0759      	lsls	r1, r3, #29
 800076a:	d000      	beq.n	800076e <__aeabi_fsub+0x26e>
 800076c:	e733      	b.n	80005d6 <__aeabi_fsub+0xd6>
 800076e:	08db      	lsrs	r3, r3, #3
 8000770:	e76e      	b.n	8000650 <__aeabi_fsub+0x150>
 8000772:	2b00      	cmp	r3, #0
 8000774:	d110      	bne.n	8000798 <__aeabi_fsub+0x298>
 8000776:	2e00      	cmp	r6, #0
 8000778:	d043      	beq.n	8000802 <__aeabi_fsub+0x302>
 800077a:	2401      	movs	r4, #1
 800077c:	0033      	movs	r3, r6
 800077e:	400c      	ands	r4, r1
 8000780:	e706      	b.n	8000590 <__aeabi_fsub+0x90>
 8000782:	2401      	movs	r4, #1
 8000784:	1af7      	subs	r7, r6, r3
 8000786:	400c      	ands	r4, r1
 8000788:	e784      	b.n	8000694 <__aeabi_fsub+0x194>
 800078a:	2b00      	cmp	r3, #0
 800078c:	d104      	bne.n	8000798 <__aeabi_fsub+0x298>
 800078e:	0033      	movs	r3, r6
 8000790:	e6fe      	b.n	8000590 <__aeabi_fsub+0x90>
 8000792:	2501      	movs	r5, #1
 8000794:	1b9b      	subs	r3, r3, r6
 8000796:	e718      	b.n	80005ca <__aeabi_fsub+0xca>
 8000798:	2e00      	cmp	r6, #0
 800079a:	d100      	bne.n	800079e <__aeabi_fsub+0x29e>
 800079c:	e6f8      	b.n	8000590 <__aeabi_fsub+0x90>
 800079e:	2280      	movs	r2, #128	@ 0x80
 80007a0:	03d2      	lsls	r2, r2, #15
 80007a2:	4297      	cmp	r7, r2
 80007a4:	d304      	bcc.n	80007b0 <__aeabi_fsub+0x2b0>
 80007a6:	4594      	cmp	ip, r2
 80007a8:	d202      	bcs.n	80007b0 <__aeabi_fsub+0x2b0>
 80007aa:	2401      	movs	r4, #1
 80007ac:	0033      	movs	r3, r6
 80007ae:	400c      	ands	r4, r1
 80007b0:	08db      	lsrs	r3, r3, #3
 80007b2:	e6f1      	b.n	8000598 <__aeabi_fsub+0x98>
 80007b4:	001a      	movs	r2, r3
 80007b6:	2520      	movs	r5, #32
 80007b8:	40ca      	lsrs	r2, r1
 80007ba:	1a69      	subs	r1, r5, r1
 80007bc:	408b      	lsls	r3, r1
 80007be:	1e59      	subs	r1, r3, #1
 80007c0:	418b      	sbcs	r3, r1
 80007c2:	4313      	orrs	r3, r2
 80007c4:	0005      	movs	r5, r0
 80007c6:	199b      	adds	r3, r3, r6
 80007c8:	e750      	b.n	800066c <__aeabi_fsub+0x16c>
 80007ca:	2e00      	cmp	r6, #0
 80007cc:	d094      	beq.n	80006f8 <__aeabi_fsub+0x1f8>
 80007ce:	2401      	movs	r4, #1
 80007d0:	0033      	movs	r3, r6
 80007d2:	400c      	ands	r4, r1
 80007d4:	e73a      	b.n	800064c <__aeabi_fsub+0x14c>
 80007d6:	000c      	movs	r4, r1
 80007d8:	2501      	movs	r5, #1
 80007da:	1af3      	subs	r3, r6, r3
 80007dc:	e6f5      	b.n	80005ca <__aeabi_fsub+0xca>
 80007de:	0033      	movs	r3, r6
 80007e0:	e734      	b.n	800064c <__aeabi_fsub+0x14c>
 80007e2:	199b      	adds	r3, r3, r6
 80007e4:	2200      	movs	r2, #0
 80007e6:	0159      	lsls	r1, r3, #5
 80007e8:	d5c1      	bpl.n	800076e <__aeabi_fsub+0x26e>
 80007ea:	4a15      	ldr	r2, [pc, #84]	@ (8000840 <__aeabi_fsub+0x340>)
 80007ec:	4013      	ands	r3, r2
 80007ee:	08db      	lsrs	r3, r3, #3
 80007f0:	2201      	movs	r2, #1
 80007f2:	e72d      	b.n	8000650 <__aeabi_fsub+0x150>
 80007f4:	2a00      	cmp	r2, #0
 80007f6:	d100      	bne.n	80007fa <__aeabi_fsub+0x2fa>
 80007f8:	e77e      	b.n	80006f8 <__aeabi_fsub+0x1f8>
 80007fa:	0013      	movs	r3, r2
 80007fc:	2200      	movs	r2, #0
 80007fe:	08db      	lsrs	r3, r3, #3
 8000800:	e726      	b.n	8000650 <__aeabi_fsub+0x150>
 8000802:	2380      	movs	r3, #128	@ 0x80
 8000804:	2400      	movs	r4, #0
 8000806:	20ff      	movs	r0, #255	@ 0xff
 8000808:	03db      	lsls	r3, r3, #15
 800080a:	e6f1      	b.n	80005f0 <__aeabi_fsub+0xf0>
 800080c:	2a00      	cmp	r2, #0
 800080e:	d100      	bne.n	8000812 <__aeabi_fsub+0x312>
 8000810:	e756      	b.n	80006c0 <__aeabi_fsub+0x1c0>
 8000812:	1b47      	subs	r7, r0, r5
 8000814:	003a      	movs	r2, r7
 8000816:	2d00      	cmp	r5, #0
 8000818:	d100      	bne.n	800081c <__aeabi_fsub+0x31c>
 800081a:	e730      	b.n	800067e <__aeabi_fsub+0x17e>
 800081c:	2280      	movs	r2, #128	@ 0x80
 800081e:	04d2      	lsls	r2, r2, #19
 8000820:	000c      	movs	r4, r1
 8000822:	4313      	orrs	r3, r2
 8000824:	e77f      	b.n	8000726 <__aeabi_fsub+0x226>
 8000826:	2a00      	cmp	r2, #0
 8000828:	d100      	bne.n	800082c <__aeabi_fsub+0x32c>
 800082a:	e701      	b.n	8000630 <__aeabi_fsub+0x130>
 800082c:	1b41      	subs	r1, r0, r5
 800082e:	2d00      	cmp	r5, #0
 8000830:	d101      	bne.n	8000836 <__aeabi_fsub+0x336>
 8000832:	000a      	movs	r2, r1
 8000834:	e788      	b.n	8000748 <__aeabi_fsub+0x248>
 8000836:	2280      	movs	r2, #128	@ 0x80
 8000838:	04d2      	lsls	r2, r2, #19
 800083a:	4313      	orrs	r3, r2
 800083c:	e78b      	b.n	8000756 <__aeabi_fsub+0x256>
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	fbffffff 	.word	0xfbffffff
 8000844:	7dffffff 	.word	0x7dffffff

08000848 <__aeabi_f2iz>:
 8000848:	0241      	lsls	r1, r0, #9
 800084a:	0042      	lsls	r2, r0, #1
 800084c:	0fc3      	lsrs	r3, r0, #31
 800084e:	0a49      	lsrs	r1, r1, #9
 8000850:	2000      	movs	r0, #0
 8000852:	0e12      	lsrs	r2, r2, #24
 8000854:	2a7e      	cmp	r2, #126	@ 0x7e
 8000856:	dd03      	ble.n	8000860 <__aeabi_f2iz+0x18>
 8000858:	2a9d      	cmp	r2, #157	@ 0x9d
 800085a:	dd02      	ble.n	8000862 <__aeabi_f2iz+0x1a>
 800085c:	4a09      	ldr	r2, [pc, #36]	@ (8000884 <__aeabi_f2iz+0x3c>)
 800085e:	1898      	adds	r0, r3, r2
 8000860:	4770      	bx	lr
 8000862:	2080      	movs	r0, #128	@ 0x80
 8000864:	0400      	lsls	r0, r0, #16
 8000866:	4301      	orrs	r1, r0
 8000868:	2a95      	cmp	r2, #149	@ 0x95
 800086a:	dc07      	bgt.n	800087c <__aeabi_f2iz+0x34>
 800086c:	2096      	movs	r0, #150	@ 0x96
 800086e:	1a82      	subs	r2, r0, r2
 8000870:	40d1      	lsrs	r1, r2
 8000872:	4248      	negs	r0, r1
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1f3      	bne.n	8000860 <__aeabi_f2iz+0x18>
 8000878:	0008      	movs	r0, r1
 800087a:	e7f1      	b.n	8000860 <__aeabi_f2iz+0x18>
 800087c:	3a96      	subs	r2, #150	@ 0x96
 800087e:	4091      	lsls	r1, r2
 8000880:	e7f7      	b.n	8000872 <__aeabi_f2iz+0x2a>
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	7fffffff 	.word	0x7fffffff

08000888 <__aeabi_ui2f>:
 8000888:	b570      	push	{r4, r5, r6, lr}
 800088a:	1e04      	subs	r4, r0, #0
 800088c:	d00e      	beq.n	80008ac <__aeabi_ui2f+0x24>
 800088e:	f001 ff65 	bl	800275c <__clzsi2>
 8000892:	239e      	movs	r3, #158	@ 0x9e
 8000894:	0001      	movs	r1, r0
 8000896:	1a1b      	subs	r3, r3, r0
 8000898:	2b96      	cmp	r3, #150	@ 0x96
 800089a:	dc0c      	bgt.n	80008b6 <__aeabi_ui2f+0x2e>
 800089c:	2808      	cmp	r0, #8
 800089e:	d02f      	beq.n	8000900 <__aeabi_ui2f+0x78>
 80008a0:	3908      	subs	r1, #8
 80008a2:	408c      	lsls	r4, r1
 80008a4:	0264      	lsls	r4, r4, #9
 80008a6:	0a64      	lsrs	r4, r4, #9
 80008a8:	b2d8      	uxtb	r0, r3
 80008aa:	e001      	b.n	80008b0 <__aeabi_ui2f+0x28>
 80008ac:	2000      	movs	r0, #0
 80008ae:	2400      	movs	r4, #0
 80008b0:	05c0      	lsls	r0, r0, #23
 80008b2:	4320      	orrs	r0, r4
 80008b4:	bd70      	pop	{r4, r5, r6, pc}
 80008b6:	2b99      	cmp	r3, #153	@ 0x99
 80008b8:	dc16      	bgt.n	80008e8 <__aeabi_ui2f+0x60>
 80008ba:	1f42      	subs	r2, r0, #5
 80008bc:	2805      	cmp	r0, #5
 80008be:	d000      	beq.n	80008c2 <__aeabi_ui2f+0x3a>
 80008c0:	4094      	lsls	r4, r2
 80008c2:	0022      	movs	r2, r4
 80008c4:	4810      	ldr	r0, [pc, #64]	@ (8000908 <__aeabi_ui2f+0x80>)
 80008c6:	4002      	ands	r2, r0
 80008c8:	0765      	lsls	r5, r4, #29
 80008ca:	d009      	beq.n	80008e0 <__aeabi_ui2f+0x58>
 80008cc:	250f      	movs	r5, #15
 80008ce:	402c      	ands	r4, r5
 80008d0:	2c04      	cmp	r4, #4
 80008d2:	d005      	beq.n	80008e0 <__aeabi_ui2f+0x58>
 80008d4:	3204      	adds	r2, #4
 80008d6:	0154      	lsls	r4, r2, #5
 80008d8:	d502      	bpl.n	80008e0 <__aeabi_ui2f+0x58>
 80008da:	239f      	movs	r3, #159	@ 0x9f
 80008dc:	4002      	ands	r2, r0
 80008de:	1a5b      	subs	r3, r3, r1
 80008e0:	0192      	lsls	r2, r2, #6
 80008e2:	0a54      	lsrs	r4, r2, #9
 80008e4:	b2d8      	uxtb	r0, r3
 80008e6:	e7e3      	b.n	80008b0 <__aeabi_ui2f+0x28>
 80008e8:	0002      	movs	r2, r0
 80008ea:	0020      	movs	r0, r4
 80008ec:	321b      	adds	r2, #27
 80008ee:	4090      	lsls	r0, r2
 80008f0:	0002      	movs	r2, r0
 80008f2:	1e50      	subs	r0, r2, #1
 80008f4:	4182      	sbcs	r2, r0
 80008f6:	2005      	movs	r0, #5
 80008f8:	1a40      	subs	r0, r0, r1
 80008fa:	40c4      	lsrs	r4, r0
 80008fc:	4314      	orrs	r4, r2
 80008fe:	e7e0      	b.n	80008c2 <__aeabi_ui2f+0x3a>
 8000900:	0264      	lsls	r4, r4, #9
 8000902:	2096      	movs	r0, #150	@ 0x96
 8000904:	0a64      	lsrs	r4, r4, #9
 8000906:	e7d3      	b.n	80008b0 <__aeabi_ui2f+0x28>
 8000908:	fbffffff 	.word	0xfbffffff

0800090c <__aeabi_dadd>:
 800090c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800090e:	4657      	mov	r7, sl
 8000910:	464e      	mov	r6, r9
 8000912:	4645      	mov	r5, r8
 8000914:	46de      	mov	lr, fp
 8000916:	b5e0      	push	{r5, r6, r7, lr}
 8000918:	b083      	sub	sp, #12
 800091a:	9000      	str	r0, [sp, #0]
 800091c:	9101      	str	r1, [sp, #4]
 800091e:	030c      	lsls	r4, r1, #12
 8000920:	004f      	lsls	r7, r1, #1
 8000922:	0fce      	lsrs	r6, r1, #31
 8000924:	0a61      	lsrs	r1, r4, #9
 8000926:	9c00      	ldr	r4, [sp, #0]
 8000928:	031d      	lsls	r5, r3, #12
 800092a:	0f64      	lsrs	r4, r4, #29
 800092c:	430c      	orrs	r4, r1
 800092e:	9900      	ldr	r1, [sp, #0]
 8000930:	9200      	str	r2, [sp, #0]
 8000932:	9301      	str	r3, [sp, #4]
 8000934:	00c8      	lsls	r0, r1, #3
 8000936:	0059      	lsls	r1, r3, #1
 8000938:	0d4b      	lsrs	r3, r1, #21
 800093a:	4699      	mov	r9, r3
 800093c:	9a00      	ldr	r2, [sp, #0]
 800093e:	9b01      	ldr	r3, [sp, #4]
 8000940:	0a6d      	lsrs	r5, r5, #9
 8000942:	0fd9      	lsrs	r1, r3, #31
 8000944:	0f53      	lsrs	r3, r2, #29
 8000946:	432b      	orrs	r3, r5
 8000948:	469a      	mov	sl, r3
 800094a:	9b00      	ldr	r3, [sp, #0]
 800094c:	0d7f      	lsrs	r7, r7, #21
 800094e:	00da      	lsls	r2, r3, #3
 8000950:	4694      	mov	ip, r2
 8000952:	464a      	mov	r2, r9
 8000954:	46b0      	mov	r8, r6
 8000956:	1aba      	subs	r2, r7, r2
 8000958:	428e      	cmp	r6, r1
 800095a:	d100      	bne.n	800095e <__aeabi_dadd+0x52>
 800095c:	e0b0      	b.n	8000ac0 <__aeabi_dadd+0x1b4>
 800095e:	2a00      	cmp	r2, #0
 8000960:	dc00      	bgt.n	8000964 <__aeabi_dadd+0x58>
 8000962:	e078      	b.n	8000a56 <__aeabi_dadd+0x14a>
 8000964:	4649      	mov	r1, r9
 8000966:	2900      	cmp	r1, #0
 8000968:	d100      	bne.n	800096c <__aeabi_dadd+0x60>
 800096a:	e0e9      	b.n	8000b40 <__aeabi_dadd+0x234>
 800096c:	49c9      	ldr	r1, [pc, #804]	@ (8000c94 <__aeabi_dadd+0x388>)
 800096e:	428f      	cmp	r7, r1
 8000970:	d100      	bne.n	8000974 <__aeabi_dadd+0x68>
 8000972:	e195      	b.n	8000ca0 <__aeabi_dadd+0x394>
 8000974:	2501      	movs	r5, #1
 8000976:	2a38      	cmp	r2, #56	@ 0x38
 8000978:	dc16      	bgt.n	80009a8 <__aeabi_dadd+0x9c>
 800097a:	2180      	movs	r1, #128	@ 0x80
 800097c:	4653      	mov	r3, sl
 800097e:	0409      	lsls	r1, r1, #16
 8000980:	430b      	orrs	r3, r1
 8000982:	469a      	mov	sl, r3
 8000984:	2a1f      	cmp	r2, #31
 8000986:	dd00      	ble.n	800098a <__aeabi_dadd+0x7e>
 8000988:	e1e7      	b.n	8000d5a <__aeabi_dadd+0x44e>
 800098a:	2120      	movs	r1, #32
 800098c:	4655      	mov	r5, sl
 800098e:	1a8b      	subs	r3, r1, r2
 8000990:	4661      	mov	r1, ip
 8000992:	409d      	lsls	r5, r3
 8000994:	40d1      	lsrs	r1, r2
 8000996:	430d      	orrs	r5, r1
 8000998:	4661      	mov	r1, ip
 800099a:	4099      	lsls	r1, r3
 800099c:	1e4b      	subs	r3, r1, #1
 800099e:	4199      	sbcs	r1, r3
 80009a0:	4653      	mov	r3, sl
 80009a2:	40d3      	lsrs	r3, r2
 80009a4:	430d      	orrs	r5, r1
 80009a6:	1ae4      	subs	r4, r4, r3
 80009a8:	1b45      	subs	r5, r0, r5
 80009aa:	42a8      	cmp	r0, r5
 80009ac:	4180      	sbcs	r0, r0
 80009ae:	4240      	negs	r0, r0
 80009b0:	1a24      	subs	r4, r4, r0
 80009b2:	0223      	lsls	r3, r4, #8
 80009b4:	d400      	bmi.n	80009b8 <__aeabi_dadd+0xac>
 80009b6:	e10f      	b.n	8000bd8 <__aeabi_dadd+0x2cc>
 80009b8:	0264      	lsls	r4, r4, #9
 80009ba:	0a64      	lsrs	r4, r4, #9
 80009bc:	2c00      	cmp	r4, #0
 80009be:	d100      	bne.n	80009c2 <__aeabi_dadd+0xb6>
 80009c0:	e139      	b.n	8000c36 <__aeabi_dadd+0x32a>
 80009c2:	0020      	movs	r0, r4
 80009c4:	f001 feca 	bl	800275c <__clzsi2>
 80009c8:	0003      	movs	r3, r0
 80009ca:	3b08      	subs	r3, #8
 80009cc:	2120      	movs	r1, #32
 80009ce:	0028      	movs	r0, r5
 80009d0:	1aca      	subs	r2, r1, r3
 80009d2:	40d0      	lsrs	r0, r2
 80009d4:	409c      	lsls	r4, r3
 80009d6:	0002      	movs	r2, r0
 80009d8:	409d      	lsls	r5, r3
 80009da:	4322      	orrs	r2, r4
 80009dc:	429f      	cmp	r7, r3
 80009de:	dd00      	ble.n	80009e2 <__aeabi_dadd+0xd6>
 80009e0:	e173      	b.n	8000cca <__aeabi_dadd+0x3be>
 80009e2:	1bd8      	subs	r0, r3, r7
 80009e4:	3001      	adds	r0, #1
 80009e6:	1a09      	subs	r1, r1, r0
 80009e8:	002c      	movs	r4, r5
 80009ea:	408d      	lsls	r5, r1
 80009ec:	40c4      	lsrs	r4, r0
 80009ee:	1e6b      	subs	r3, r5, #1
 80009f0:	419d      	sbcs	r5, r3
 80009f2:	0013      	movs	r3, r2
 80009f4:	40c2      	lsrs	r2, r0
 80009f6:	408b      	lsls	r3, r1
 80009f8:	4325      	orrs	r5, r4
 80009fa:	2700      	movs	r7, #0
 80009fc:	0014      	movs	r4, r2
 80009fe:	431d      	orrs	r5, r3
 8000a00:	076b      	lsls	r3, r5, #29
 8000a02:	d009      	beq.n	8000a18 <__aeabi_dadd+0x10c>
 8000a04:	230f      	movs	r3, #15
 8000a06:	402b      	ands	r3, r5
 8000a08:	2b04      	cmp	r3, #4
 8000a0a:	d005      	beq.n	8000a18 <__aeabi_dadd+0x10c>
 8000a0c:	1d2b      	adds	r3, r5, #4
 8000a0e:	42ab      	cmp	r3, r5
 8000a10:	41ad      	sbcs	r5, r5
 8000a12:	426d      	negs	r5, r5
 8000a14:	1964      	adds	r4, r4, r5
 8000a16:	001d      	movs	r5, r3
 8000a18:	0223      	lsls	r3, r4, #8
 8000a1a:	d400      	bmi.n	8000a1e <__aeabi_dadd+0x112>
 8000a1c:	e12d      	b.n	8000c7a <__aeabi_dadd+0x36e>
 8000a1e:	4a9d      	ldr	r2, [pc, #628]	@ (8000c94 <__aeabi_dadd+0x388>)
 8000a20:	3701      	adds	r7, #1
 8000a22:	4297      	cmp	r7, r2
 8000a24:	d100      	bne.n	8000a28 <__aeabi_dadd+0x11c>
 8000a26:	e0d3      	b.n	8000bd0 <__aeabi_dadd+0x2c4>
 8000a28:	4646      	mov	r6, r8
 8000a2a:	499b      	ldr	r1, [pc, #620]	@ (8000c98 <__aeabi_dadd+0x38c>)
 8000a2c:	08ed      	lsrs	r5, r5, #3
 8000a2e:	4021      	ands	r1, r4
 8000a30:	074a      	lsls	r2, r1, #29
 8000a32:	432a      	orrs	r2, r5
 8000a34:	057c      	lsls	r4, r7, #21
 8000a36:	024d      	lsls	r5, r1, #9
 8000a38:	0b2d      	lsrs	r5, r5, #12
 8000a3a:	0d64      	lsrs	r4, r4, #21
 8000a3c:	0524      	lsls	r4, r4, #20
 8000a3e:	432c      	orrs	r4, r5
 8000a40:	07f6      	lsls	r6, r6, #31
 8000a42:	4334      	orrs	r4, r6
 8000a44:	0010      	movs	r0, r2
 8000a46:	0021      	movs	r1, r4
 8000a48:	b003      	add	sp, #12
 8000a4a:	bcf0      	pop	{r4, r5, r6, r7}
 8000a4c:	46bb      	mov	fp, r7
 8000a4e:	46b2      	mov	sl, r6
 8000a50:	46a9      	mov	r9, r5
 8000a52:	46a0      	mov	r8, r4
 8000a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a56:	2a00      	cmp	r2, #0
 8000a58:	d100      	bne.n	8000a5c <__aeabi_dadd+0x150>
 8000a5a:	e084      	b.n	8000b66 <__aeabi_dadd+0x25a>
 8000a5c:	464a      	mov	r2, r9
 8000a5e:	1bd2      	subs	r2, r2, r7
 8000a60:	2f00      	cmp	r7, #0
 8000a62:	d000      	beq.n	8000a66 <__aeabi_dadd+0x15a>
 8000a64:	e16d      	b.n	8000d42 <__aeabi_dadd+0x436>
 8000a66:	0025      	movs	r5, r4
 8000a68:	4305      	orrs	r5, r0
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_dadd+0x162>
 8000a6c:	e127      	b.n	8000cbe <__aeabi_dadd+0x3b2>
 8000a6e:	1e56      	subs	r6, r2, #1
 8000a70:	2a01      	cmp	r2, #1
 8000a72:	d100      	bne.n	8000a76 <__aeabi_dadd+0x16a>
 8000a74:	e23b      	b.n	8000eee <__aeabi_dadd+0x5e2>
 8000a76:	4d87      	ldr	r5, [pc, #540]	@ (8000c94 <__aeabi_dadd+0x388>)
 8000a78:	42aa      	cmp	r2, r5
 8000a7a:	d100      	bne.n	8000a7e <__aeabi_dadd+0x172>
 8000a7c:	e26a      	b.n	8000f54 <__aeabi_dadd+0x648>
 8000a7e:	2501      	movs	r5, #1
 8000a80:	2e38      	cmp	r6, #56	@ 0x38
 8000a82:	dc12      	bgt.n	8000aaa <__aeabi_dadd+0x19e>
 8000a84:	0032      	movs	r2, r6
 8000a86:	2a1f      	cmp	r2, #31
 8000a88:	dd00      	ble.n	8000a8c <__aeabi_dadd+0x180>
 8000a8a:	e1f8      	b.n	8000e7e <__aeabi_dadd+0x572>
 8000a8c:	2620      	movs	r6, #32
 8000a8e:	0025      	movs	r5, r4
 8000a90:	1ab6      	subs	r6, r6, r2
 8000a92:	0007      	movs	r7, r0
 8000a94:	4653      	mov	r3, sl
 8000a96:	40b0      	lsls	r0, r6
 8000a98:	40d4      	lsrs	r4, r2
 8000a9a:	40b5      	lsls	r5, r6
 8000a9c:	40d7      	lsrs	r7, r2
 8000a9e:	1e46      	subs	r6, r0, #1
 8000aa0:	41b0      	sbcs	r0, r6
 8000aa2:	1b1b      	subs	r3, r3, r4
 8000aa4:	469a      	mov	sl, r3
 8000aa6:	433d      	orrs	r5, r7
 8000aa8:	4305      	orrs	r5, r0
 8000aaa:	4662      	mov	r2, ip
 8000aac:	1b55      	subs	r5, r2, r5
 8000aae:	45ac      	cmp	ip, r5
 8000ab0:	4192      	sbcs	r2, r2
 8000ab2:	4653      	mov	r3, sl
 8000ab4:	4252      	negs	r2, r2
 8000ab6:	000e      	movs	r6, r1
 8000ab8:	464f      	mov	r7, r9
 8000aba:	4688      	mov	r8, r1
 8000abc:	1a9c      	subs	r4, r3, r2
 8000abe:	e778      	b.n	80009b2 <__aeabi_dadd+0xa6>
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	dc00      	bgt.n	8000ac6 <__aeabi_dadd+0x1ba>
 8000ac4:	e08e      	b.n	8000be4 <__aeabi_dadd+0x2d8>
 8000ac6:	4649      	mov	r1, r9
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	d175      	bne.n	8000bb8 <__aeabi_dadd+0x2ac>
 8000acc:	4661      	mov	r1, ip
 8000ace:	4653      	mov	r3, sl
 8000ad0:	4319      	orrs	r1, r3
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dadd+0x1ca>
 8000ad4:	e0f6      	b.n	8000cc4 <__aeabi_dadd+0x3b8>
 8000ad6:	1e51      	subs	r1, r2, #1
 8000ad8:	2a01      	cmp	r2, #1
 8000ada:	d100      	bne.n	8000ade <__aeabi_dadd+0x1d2>
 8000adc:	e191      	b.n	8000e02 <__aeabi_dadd+0x4f6>
 8000ade:	4d6d      	ldr	r5, [pc, #436]	@ (8000c94 <__aeabi_dadd+0x388>)
 8000ae0:	42aa      	cmp	r2, r5
 8000ae2:	d100      	bne.n	8000ae6 <__aeabi_dadd+0x1da>
 8000ae4:	e0dc      	b.n	8000ca0 <__aeabi_dadd+0x394>
 8000ae6:	2501      	movs	r5, #1
 8000ae8:	2938      	cmp	r1, #56	@ 0x38
 8000aea:	dc14      	bgt.n	8000b16 <__aeabi_dadd+0x20a>
 8000aec:	000a      	movs	r2, r1
 8000aee:	2a1f      	cmp	r2, #31
 8000af0:	dd00      	ble.n	8000af4 <__aeabi_dadd+0x1e8>
 8000af2:	e1a2      	b.n	8000e3a <__aeabi_dadd+0x52e>
 8000af4:	2120      	movs	r1, #32
 8000af6:	4653      	mov	r3, sl
 8000af8:	1a89      	subs	r1, r1, r2
 8000afa:	408b      	lsls	r3, r1
 8000afc:	001d      	movs	r5, r3
 8000afe:	4663      	mov	r3, ip
 8000b00:	40d3      	lsrs	r3, r2
 8000b02:	431d      	orrs	r5, r3
 8000b04:	4663      	mov	r3, ip
 8000b06:	408b      	lsls	r3, r1
 8000b08:	0019      	movs	r1, r3
 8000b0a:	1e4b      	subs	r3, r1, #1
 8000b0c:	4199      	sbcs	r1, r3
 8000b0e:	4653      	mov	r3, sl
 8000b10:	40d3      	lsrs	r3, r2
 8000b12:	430d      	orrs	r5, r1
 8000b14:	18e4      	adds	r4, r4, r3
 8000b16:	182d      	adds	r5, r5, r0
 8000b18:	4285      	cmp	r5, r0
 8000b1a:	4180      	sbcs	r0, r0
 8000b1c:	4240      	negs	r0, r0
 8000b1e:	1824      	adds	r4, r4, r0
 8000b20:	0223      	lsls	r3, r4, #8
 8000b22:	d559      	bpl.n	8000bd8 <__aeabi_dadd+0x2cc>
 8000b24:	4b5b      	ldr	r3, [pc, #364]	@ (8000c94 <__aeabi_dadd+0x388>)
 8000b26:	3701      	adds	r7, #1
 8000b28:	429f      	cmp	r7, r3
 8000b2a:	d051      	beq.n	8000bd0 <__aeabi_dadd+0x2c4>
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	4b5a      	ldr	r3, [pc, #360]	@ (8000c98 <__aeabi_dadd+0x38c>)
 8000b30:	086a      	lsrs	r2, r5, #1
 8000b32:	401c      	ands	r4, r3
 8000b34:	4029      	ands	r1, r5
 8000b36:	430a      	orrs	r2, r1
 8000b38:	07e5      	lsls	r5, r4, #31
 8000b3a:	4315      	orrs	r5, r2
 8000b3c:	0864      	lsrs	r4, r4, #1
 8000b3e:	e75f      	b.n	8000a00 <__aeabi_dadd+0xf4>
 8000b40:	4661      	mov	r1, ip
 8000b42:	4653      	mov	r3, sl
 8000b44:	4319      	orrs	r1, r3
 8000b46:	d100      	bne.n	8000b4a <__aeabi_dadd+0x23e>
 8000b48:	e0bc      	b.n	8000cc4 <__aeabi_dadd+0x3b8>
 8000b4a:	1e51      	subs	r1, r2, #1
 8000b4c:	2a01      	cmp	r2, #1
 8000b4e:	d100      	bne.n	8000b52 <__aeabi_dadd+0x246>
 8000b50:	e164      	b.n	8000e1c <__aeabi_dadd+0x510>
 8000b52:	4d50      	ldr	r5, [pc, #320]	@ (8000c94 <__aeabi_dadd+0x388>)
 8000b54:	42aa      	cmp	r2, r5
 8000b56:	d100      	bne.n	8000b5a <__aeabi_dadd+0x24e>
 8000b58:	e16a      	b.n	8000e30 <__aeabi_dadd+0x524>
 8000b5a:	2501      	movs	r5, #1
 8000b5c:	2938      	cmp	r1, #56	@ 0x38
 8000b5e:	dd00      	ble.n	8000b62 <__aeabi_dadd+0x256>
 8000b60:	e722      	b.n	80009a8 <__aeabi_dadd+0x9c>
 8000b62:	000a      	movs	r2, r1
 8000b64:	e70e      	b.n	8000984 <__aeabi_dadd+0x78>
 8000b66:	4a4d      	ldr	r2, [pc, #308]	@ (8000c9c <__aeabi_dadd+0x390>)
 8000b68:	1c7d      	adds	r5, r7, #1
 8000b6a:	4215      	tst	r5, r2
 8000b6c:	d000      	beq.n	8000b70 <__aeabi_dadd+0x264>
 8000b6e:	e0d0      	b.n	8000d12 <__aeabi_dadd+0x406>
 8000b70:	0025      	movs	r5, r4
 8000b72:	4662      	mov	r2, ip
 8000b74:	4653      	mov	r3, sl
 8000b76:	4305      	orrs	r5, r0
 8000b78:	431a      	orrs	r2, r3
 8000b7a:	2f00      	cmp	r7, #0
 8000b7c:	d000      	beq.n	8000b80 <__aeabi_dadd+0x274>
 8000b7e:	e137      	b.n	8000df0 <__aeabi_dadd+0x4e4>
 8000b80:	2d00      	cmp	r5, #0
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dadd+0x27a>
 8000b84:	e1a8      	b.n	8000ed8 <__aeabi_dadd+0x5cc>
 8000b86:	2a00      	cmp	r2, #0
 8000b88:	d100      	bne.n	8000b8c <__aeabi_dadd+0x280>
 8000b8a:	e16a      	b.n	8000e62 <__aeabi_dadd+0x556>
 8000b8c:	4663      	mov	r3, ip
 8000b8e:	1ac5      	subs	r5, r0, r3
 8000b90:	4653      	mov	r3, sl
 8000b92:	1ae2      	subs	r2, r4, r3
 8000b94:	42a8      	cmp	r0, r5
 8000b96:	419b      	sbcs	r3, r3
 8000b98:	425b      	negs	r3, r3
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	021a      	lsls	r2, r3, #8
 8000b9e:	d400      	bmi.n	8000ba2 <__aeabi_dadd+0x296>
 8000ba0:	e203      	b.n	8000faa <__aeabi_dadd+0x69e>
 8000ba2:	4663      	mov	r3, ip
 8000ba4:	1a1d      	subs	r5, r3, r0
 8000ba6:	45ac      	cmp	ip, r5
 8000ba8:	4192      	sbcs	r2, r2
 8000baa:	4653      	mov	r3, sl
 8000bac:	4252      	negs	r2, r2
 8000bae:	1b1c      	subs	r4, r3, r4
 8000bb0:	000e      	movs	r6, r1
 8000bb2:	4688      	mov	r8, r1
 8000bb4:	1aa4      	subs	r4, r4, r2
 8000bb6:	e723      	b.n	8000a00 <__aeabi_dadd+0xf4>
 8000bb8:	4936      	ldr	r1, [pc, #216]	@ (8000c94 <__aeabi_dadd+0x388>)
 8000bba:	428f      	cmp	r7, r1
 8000bbc:	d070      	beq.n	8000ca0 <__aeabi_dadd+0x394>
 8000bbe:	2501      	movs	r5, #1
 8000bc0:	2a38      	cmp	r2, #56	@ 0x38
 8000bc2:	dca8      	bgt.n	8000b16 <__aeabi_dadd+0x20a>
 8000bc4:	2180      	movs	r1, #128	@ 0x80
 8000bc6:	4653      	mov	r3, sl
 8000bc8:	0409      	lsls	r1, r1, #16
 8000bca:	430b      	orrs	r3, r1
 8000bcc:	469a      	mov	sl, r3
 8000bce:	e78e      	b.n	8000aee <__aeabi_dadd+0x1e2>
 8000bd0:	003c      	movs	r4, r7
 8000bd2:	2500      	movs	r5, #0
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	e731      	b.n	8000a3c <__aeabi_dadd+0x130>
 8000bd8:	2307      	movs	r3, #7
 8000bda:	402b      	ands	r3, r5
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d000      	beq.n	8000be2 <__aeabi_dadd+0x2d6>
 8000be0:	e710      	b.n	8000a04 <__aeabi_dadd+0xf8>
 8000be2:	e093      	b.n	8000d0c <__aeabi_dadd+0x400>
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	d074      	beq.n	8000cd2 <__aeabi_dadd+0x3c6>
 8000be8:	464a      	mov	r2, r9
 8000bea:	1bd2      	subs	r2, r2, r7
 8000bec:	2f00      	cmp	r7, #0
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_dadd+0x2e6>
 8000bf0:	e0c7      	b.n	8000d82 <__aeabi_dadd+0x476>
 8000bf2:	4928      	ldr	r1, [pc, #160]	@ (8000c94 <__aeabi_dadd+0x388>)
 8000bf4:	4589      	cmp	r9, r1
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_dadd+0x2ee>
 8000bf8:	e185      	b.n	8000f06 <__aeabi_dadd+0x5fa>
 8000bfa:	2501      	movs	r5, #1
 8000bfc:	2a38      	cmp	r2, #56	@ 0x38
 8000bfe:	dc12      	bgt.n	8000c26 <__aeabi_dadd+0x31a>
 8000c00:	2180      	movs	r1, #128	@ 0x80
 8000c02:	0409      	lsls	r1, r1, #16
 8000c04:	430c      	orrs	r4, r1
 8000c06:	2a1f      	cmp	r2, #31
 8000c08:	dd00      	ble.n	8000c0c <__aeabi_dadd+0x300>
 8000c0a:	e1ab      	b.n	8000f64 <__aeabi_dadd+0x658>
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	0025      	movs	r5, r4
 8000c10:	1a89      	subs	r1, r1, r2
 8000c12:	0007      	movs	r7, r0
 8000c14:	4088      	lsls	r0, r1
 8000c16:	408d      	lsls	r5, r1
 8000c18:	40d7      	lsrs	r7, r2
 8000c1a:	1e41      	subs	r1, r0, #1
 8000c1c:	4188      	sbcs	r0, r1
 8000c1e:	40d4      	lsrs	r4, r2
 8000c20:	433d      	orrs	r5, r7
 8000c22:	4305      	orrs	r5, r0
 8000c24:	44a2      	add	sl, r4
 8000c26:	4465      	add	r5, ip
 8000c28:	4565      	cmp	r5, ip
 8000c2a:	4192      	sbcs	r2, r2
 8000c2c:	4252      	negs	r2, r2
 8000c2e:	4452      	add	r2, sl
 8000c30:	0014      	movs	r4, r2
 8000c32:	464f      	mov	r7, r9
 8000c34:	e774      	b.n	8000b20 <__aeabi_dadd+0x214>
 8000c36:	0028      	movs	r0, r5
 8000c38:	f001 fd90 	bl	800275c <__clzsi2>
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	3318      	adds	r3, #24
 8000c40:	2b1f      	cmp	r3, #31
 8000c42:	dc00      	bgt.n	8000c46 <__aeabi_dadd+0x33a>
 8000c44:	e6c2      	b.n	80009cc <__aeabi_dadd+0xc0>
 8000c46:	002a      	movs	r2, r5
 8000c48:	3808      	subs	r0, #8
 8000c4a:	4082      	lsls	r2, r0
 8000c4c:	429f      	cmp	r7, r3
 8000c4e:	dd00      	ble.n	8000c52 <__aeabi_dadd+0x346>
 8000c50:	e0a9      	b.n	8000da6 <__aeabi_dadd+0x49a>
 8000c52:	1bdb      	subs	r3, r3, r7
 8000c54:	1c58      	adds	r0, r3, #1
 8000c56:	281f      	cmp	r0, #31
 8000c58:	dc00      	bgt.n	8000c5c <__aeabi_dadd+0x350>
 8000c5a:	e1ac      	b.n	8000fb6 <__aeabi_dadd+0x6aa>
 8000c5c:	0015      	movs	r5, r2
 8000c5e:	3b1f      	subs	r3, #31
 8000c60:	40dd      	lsrs	r5, r3
 8000c62:	2820      	cmp	r0, #32
 8000c64:	d005      	beq.n	8000c72 <__aeabi_dadd+0x366>
 8000c66:	2340      	movs	r3, #64	@ 0x40
 8000c68:	1a1b      	subs	r3, r3, r0
 8000c6a:	409a      	lsls	r2, r3
 8000c6c:	1e53      	subs	r3, r2, #1
 8000c6e:	419a      	sbcs	r2, r3
 8000c70:	4315      	orrs	r5, r2
 8000c72:	2307      	movs	r3, #7
 8000c74:	2700      	movs	r7, #0
 8000c76:	402b      	ands	r3, r5
 8000c78:	e7b0      	b.n	8000bdc <__aeabi_dadd+0x2d0>
 8000c7a:	08ed      	lsrs	r5, r5, #3
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <__aeabi_dadd+0x388>)
 8000c7e:	0762      	lsls	r2, r4, #29
 8000c80:	432a      	orrs	r2, r5
 8000c82:	08e4      	lsrs	r4, r4, #3
 8000c84:	429f      	cmp	r7, r3
 8000c86:	d00f      	beq.n	8000ca8 <__aeabi_dadd+0x39c>
 8000c88:	0324      	lsls	r4, r4, #12
 8000c8a:	0b25      	lsrs	r5, r4, #12
 8000c8c:	057c      	lsls	r4, r7, #21
 8000c8e:	0d64      	lsrs	r4, r4, #21
 8000c90:	e6d4      	b.n	8000a3c <__aeabi_dadd+0x130>
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	000007ff 	.word	0x000007ff
 8000c98:	ff7fffff 	.word	0xff7fffff
 8000c9c:	000007fe 	.word	0x000007fe
 8000ca0:	08c0      	lsrs	r0, r0, #3
 8000ca2:	0762      	lsls	r2, r4, #29
 8000ca4:	4302      	orrs	r2, r0
 8000ca6:	08e4      	lsrs	r4, r4, #3
 8000ca8:	0013      	movs	r3, r2
 8000caa:	4323      	orrs	r3, r4
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_dadd+0x3a4>
 8000cae:	e186      	b.n	8000fbe <__aeabi_dadd+0x6b2>
 8000cb0:	2580      	movs	r5, #128	@ 0x80
 8000cb2:	032d      	lsls	r5, r5, #12
 8000cb4:	4325      	orrs	r5, r4
 8000cb6:	032d      	lsls	r5, r5, #12
 8000cb8:	4cc3      	ldr	r4, [pc, #780]	@ (8000fc8 <__aeabi_dadd+0x6bc>)
 8000cba:	0b2d      	lsrs	r5, r5, #12
 8000cbc:	e6be      	b.n	8000a3c <__aeabi_dadd+0x130>
 8000cbe:	4660      	mov	r0, ip
 8000cc0:	4654      	mov	r4, sl
 8000cc2:	000e      	movs	r6, r1
 8000cc4:	0017      	movs	r7, r2
 8000cc6:	08c5      	lsrs	r5, r0, #3
 8000cc8:	e7d8      	b.n	8000c7c <__aeabi_dadd+0x370>
 8000cca:	4cc0      	ldr	r4, [pc, #768]	@ (8000fcc <__aeabi_dadd+0x6c0>)
 8000ccc:	1aff      	subs	r7, r7, r3
 8000cce:	4014      	ands	r4, r2
 8000cd0:	e696      	b.n	8000a00 <__aeabi_dadd+0xf4>
 8000cd2:	4abf      	ldr	r2, [pc, #764]	@ (8000fd0 <__aeabi_dadd+0x6c4>)
 8000cd4:	1c79      	adds	r1, r7, #1
 8000cd6:	4211      	tst	r1, r2
 8000cd8:	d16b      	bne.n	8000db2 <__aeabi_dadd+0x4a6>
 8000cda:	0022      	movs	r2, r4
 8000cdc:	4302      	orrs	r2, r0
 8000cde:	2f00      	cmp	r7, #0
 8000ce0:	d000      	beq.n	8000ce4 <__aeabi_dadd+0x3d8>
 8000ce2:	e0db      	b.n	8000e9c <__aeabi_dadd+0x590>
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	d100      	bne.n	8000cea <__aeabi_dadd+0x3de>
 8000ce8:	e12d      	b.n	8000f46 <__aeabi_dadd+0x63a>
 8000cea:	4662      	mov	r2, ip
 8000cec:	4653      	mov	r3, sl
 8000cee:	431a      	orrs	r2, r3
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_dadd+0x3e8>
 8000cf2:	e0b6      	b.n	8000e62 <__aeabi_dadd+0x556>
 8000cf4:	4663      	mov	r3, ip
 8000cf6:	18c5      	adds	r5, r0, r3
 8000cf8:	4285      	cmp	r5, r0
 8000cfa:	4180      	sbcs	r0, r0
 8000cfc:	4454      	add	r4, sl
 8000cfe:	4240      	negs	r0, r0
 8000d00:	1824      	adds	r4, r4, r0
 8000d02:	0223      	lsls	r3, r4, #8
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_dadd+0x400>
 8000d06:	000f      	movs	r7, r1
 8000d08:	4bb0      	ldr	r3, [pc, #704]	@ (8000fcc <__aeabi_dadd+0x6c0>)
 8000d0a:	401c      	ands	r4, r3
 8000d0c:	003a      	movs	r2, r7
 8000d0e:	0028      	movs	r0, r5
 8000d10:	e7d8      	b.n	8000cc4 <__aeabi_dadd+0x3b8>
 8000d12:	4662      	mov	r2, ip
 8000d14:	1a85      	subs	r5, r0, r2
 8000d16:	42a8      	cmp	r0, r5
 8000d18:	4192      	sbcs	r2, r2
 8000d1a:	4653      	mov	r3, sl
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	4691      	mov	r9, r2
 8000d20:	1ae3      	subs	r3, r4, r3
 8000d22:	001a      	movs	r2, r3
 8000d24:	464b      	mov	r3, r9
 8000d26:	1ad2      	subs	r2, r2, r3
 8000d28:	0013      	movs	r3, r2
 8000d2a:	4691      	mov	r9, r2
 8000d2c:	021a      	lsls	r2, r3, #8
 8000d2e:	d454      	bmi.n	8000dda <__aeabi_dadd+0x4ce>
 8000d30:	464a      	mov	r2, r9
 8000d32:	464c      	mov	r4, r9
 8000d34:	432a      	orrs	r2, r5
 8000d36:	d000      	beq.n	8000d3a <__aeabi_dadd+0x42e>
 8000d38:	e640      	b.n	80009bc <__aeabi_dadd+0xb0>
 8000d3a:	2600      	movs	r6, #0
 8000d3c:	2400      	movs	r4, #0
 8000d3e:	2500      	movs	r5, #0
 8000d40:	e67c      	b.n	8000a3c <__aeabi_dadd+0x130>
 8000d42:	4da1      	ldr	r5, [pc, #644]	@ (8000fc8 <__aeabi_dadd+0x6bc>)
 8000d44:	45a9      	cmp	r9, r5
 8000d46:	d100      	bne.n	8000d4a <__aeabi_dadd+0x43e>
 8000d48:	e090      	b.n	8000e6c <__aeabi_dadd+0x560>
 8000d4a:	2501      	movs	r5, #1
 8000d4c:	2a38      	cmp	r2, #56	@ 0x38
 8000d4e:	dd00      	ble.n	8000d52 <__aeabi_dadd+0x446>
 8000d50:	e6ab      	b.n	8000aaa <__aeabi_dadd+0x19e>
 8000d52:	2580      	movs	r5, #128	@ 0x80
 8000d54:	042d      	lsls	r5, r5, #16
 8000d56:	432c      	orrs	r4, r5
 8000d58:	e695      	b.n	8000a86 <__aeabi_dadd+0x17a>
 8000d5a:	0011      	movs	r1, r2
 8000d5c:	4655      	mov	r5, sl
 8000d5e:	3920      	subs	r1, #32
 8000d60:	40cd      	lsrs	r5, r1
 8000d62:	46a9      	mov	r9, r5
 8000d64:	2a20      	cmp	r2, #32
 8000d66:	d006      	beq.n	8000d76 <__aeabi_dadd+0x46a>
 8000d68:	2140      	movs	r1, #64	@ 0x40
 8000d6a:	4653      	mov	r3, sl
 8000d6c:	1a8a      	subs	r2, r1, r2
 8000d6e:	4093      	lsls	r3, r2
 8000d70:	4662      	mov	r2, ip
 8000d72:	431a      	orrs	r2, r3
 8000d74:	4694      	mov	ip, r2
 8000d76:	4665      	mov	r5, ip
 8000d78:	1e6b      	subs	r3, r5, #1
 8000d7a:	419d      	sbcs	r5, r3
 8000d7c:	464b      	mov	r3, r9
 8000d7e:	431d      	orrs	r5, r3
 8000d80:	e612      	b.n	80009a8 <__aeabi_dadd+0x9c>
 8000d82:	0021      	movs	r1, r4
 8000d84:	4301      	orrs	r1, r0
 8000d86:	d100      	bne.n	8000d8a <__aeabi_dadd+0x47e>
 8000d88:	e0c4      	b.n	8000f14 <__aeabi_dadd+0x608>
 8000d8a:	1e51      	subs	r1, r2, #1
 8000d8c:	2a01      	cmp	r2, #1
 8000d8e:	d100      	bne.n	8000d92 <__aeabi_dadd+0x486>
 8000d90:	e0fb      	b.n	8000f8a <__aeabi_dadd+0x67e>
 8000d92:	4d8d      	ldr	r5, [pc, #564]	@ (8000fc8 <__aeabi_dadd+0x6bc>)
 8000d94:	42aa      	cmp	r2, r5
 8000d96:	d100      	bne.n	8000d9a <__aeabi_dadd+0x48e>
 8000d98:	e0b5      	b.n	8000f06 <__aeabi_dadd+0x5fa>
 8000d9a:	2501      	movs	r5, #1
 8000d9c:	2938      	cmp	r1, #56	@ 0x38
 8000d9e:	dd00      	ble.n	8000da2 <__aeabi_dadd+0x496>
 8000da0:	e741      	b.n	8000c26 <__aeabi_dadd+0x31a>
 8000da2:	000a      	movs	r2, r1
 8000da4:	e72f      	b.n	8000c06 <__aeabi_dadd+0x2fa>
 8000da6:	4c89      	ldr	r4, [pc, #548]	@ (8000fcc <__aeabi_dadd+0x6c0>)
 8000da8:	1aff      	subs	r7, r7, r3
 8000daa:	4014      	ands	r4, r2
 8000dac:	0762      	lsls	r2, r4, #29
 8000dae:	08e4      	lsrs	r4, r4, #3
 8000db0:	e76a      	b.n	8000c88 <__aeabi_dadd+0x37c>
 8000db2:	4a85      	ldr	r2, [pc, #532]	@ (8000fc8 <__aeabi_dadd+0x6bc>)
 8000db4:	4291      	cmp	r1, r2
 8000db6:	d100      	bne.n	8000dba <__aeabi_dadd+0x4ae>
 8000db8:	e0e3      	b.n	8000f82 <__aeabi_dadd+0x676>
 8000dba:	4663      	mov	r3, ip
 8000dbc:	18c2      	adds	r2, r0, r3
 8000dbe:	4282      	cmp	r2, r0
 8000dc0:	4180      	sbcs	r0, r0
 8000dc2:	0023      	movs	r3, r4
 8000dc4:	4240      	negs	r0, r0
 8000dc6:	4453      	add	r3, sl
 8000dc8:	181b      	adds	r3, r3, r0
 8000dca:	07dd      	lsls	r5, r3, #31
 8000dcc:	085c      	lsrs	r4, r3, #1
 8000dce:	2307      	movs	r3, #7
 8000dd0:	0852      	lsrs	r2, r2, #1
 8000dd2:	4315      	orrs	r5, r2
 8000dd4:	000f      	movs	r7, r1
 8000dd6:	402b      	ands	r3, r5
 8000dd8:	e700      	b.n	8000bdc <__aeabi_dadd+0x2d0>
 8000dda:	4663      	mov	r3, ip
 8000ddc:	1a1d      	subs	r5, r3, r0
 8000dde:	45ac      	cmp	ip, r5
 8000de0:	4192      	sbcs	r2, r2
 8000de2:	4653      	mov	r3, sl
 8000de4:	4252      	negs	r2, r2
 8000de6:	1b1c      	subs	r4, r3, r4
 8000de8:	000e      	movs	r6, r1
 8000dea:	4688      	mov	r8, r1
 8000dec:	1aa4      	subs	r4, r4, r2
 8000dee:	e5e5      	b.n	80009bc <__aeabi_dadd+0xb0>
 8000df0:	2d00      	cmp	r5, #0
 8000df2:	d000      	beq.n	8000df6 <__aeabi_dadd+0x4ea>
 8000df4:	e091      	b.n	8000f1a <__aeabi_dadd+0x60e>
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	d138      	bne.n	8000e6c <__aeabi_dadd+0x560>
 8000dfa:	2480      	movs	r4, #128	@ 0x80
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	0324      	lsls	r4, r4, #12
 8000e00:	e756      	b.n	8000cb0 <__aeabi_dadd+0x3a4>
 8000e02:	4663      	mov	r3, ip
 8000e04:	18c5      	adds	r5, r0, r3
 8000e06:	4285      	cmp	r5, r0
 8000e08:	4180      	sbcs	r0, r0
 8000e0a:	4454      	add	r4, sl
 8000e0c:	4240      	negs	r0, r0
 8000e0e:	1824      	adds	r4, r4, r0
 8000e10:	2701      	movs	r7, #1
 8000e12:	0223      	lsls	r3, r4, #8
 8000e14:	d400      	bmi.n	8000e18 <__aeabi_dadd+0x50c>
 8000e16:	e6df      	b.n	8000bd8 <__aeabi_dadd+0x2cc>
 8000e18:	2702      	movs	r7, #2
 8000e1a:	e687      	b.n	8000b2c <__aeabi_dadd+0x220>
 8000e1c:	4663      	mov	r3, ip
 8000e1e:	1ac5      	subs	r5, r0, r3
 8000e20:	42a8      	cmp	r0, r5
 8000e22:	4180      	sbcs	r0, r0
 8000e24:	4653      	mov	r3, sl
 8000e26:	4240      	negs	r0, r0
 8000e28:	1ae4      	subs	r4, r4, r3
 8000e2a:	2701      	movs	r7, #1
 8000e2c:	1a24      	subs	r4, r4, r0
 8000e2e:	e5c0      	b.n	80009b2 <__aeabi_dadd+0xa6>
 8000e30:	0762      	lsls	r2, r4, #29
 8000e32:	08c0      	lsrs	r0, r0, #3
 8000e34:	4302      	orrs	r2, r0
 8000e36:	08e4      	lsrs	r4, r4, #3
 8000e38:	e736      	b.n	8000ca8 <__aeabi_dadd+0x39c>
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	4653      	mov	r3, sl
 8000e3e:	3920      	subs	r1, #32
 8000e40:	40cb      	lsrs	r3, r1
 8000e42:	4699      	mov	r9, r3
 8000e44:	2a20      	cmp	r2, #32
 8000e46:	d006      	beq.n	8000e56 <__aeabi_dadd+0x54a>
 8000e48:	2140      	movs	r1, #64	@ 0x40
 8000e4a:	4653      	mov	r3, sl
 8000e4c:	1a8a      	subs	r2, r1, r2
 8000e4e:	4093      	lsls	r3, r2
 8000e50:	4662      	mov	r2, ip
 8000e52:	431a      	orrs	r2, r3
 8000e54:	4694      	mov	ip, r2
 8000e56:	4665      	mov	r5, ip
 8000e58:	1e6b      	subs	r3, r5, #1
 8000e5a:	419d      	sbcs	r5, r3
 8000e5c:	464b      	mov	r3, r9
 8000e5e:	431d      	orrs	r5, r3
 8000e60:	e659      	b.n	8000b16 <__aeabi_dadd+0x20a>
 8000e62:	0762      	lsls	r2, r4, #29
 8000e64:	08c0      	lsrs	r0, r0, #3
 8000e66:	4302      	orrs	r2, r0
 8000e68:	08e4      	lsrs	r4, r4, #3
 8000e6a:	e70d      	b.n	8000c88 <__aeabi_dadd+0x37c>
 8000e6c:	4653      	mov	r3, sl
 8000e6e:	075a      	lsls	r2, r3, #29
 8000e70:	4663      	mov	r3, ip
 8000e72:	08d8      	lsrs	r0, r3, #3
 8000e74:	4653      	mov	r3, sl
 8000e76:	000e      	movs	r6, r1
 8000e78:	4302      	orrs	r2, r0
 8000e7a:	08dc      	lsrs	r4, r3, #3
 8000e7c:	e714      	b.n	8000ca8 <__aeabi_dadd+0x39c>
 8000e7e:	0015      	movs	r5, r2
 8000e80:	0026      	movs	r6, r4
 8000e82:	3d20      	subs	r5, #32
 8000e84:	40ee      	lsrs	r6, r5
 8000e86:	2a20      	cmp	r2, #32
 8000e88:	d003      	beq.n	8000e92 <__aeabi_dadd+0x586>
 8000e8a:	2540      	movs	r5, #64	@ 0x40
 8000e8c:	1aaa      	subs	r2, r5, r2
 8000e8e:	4094      	lsls	r4, r2
 8000e90:	4320      	orrs	r0, r4
 8000e92:	1e42      	subs	r2, r0, #1
 8000e94:	4190      	sbcs	r0, r2
 8000e96:	0005      	movs	r5, r0
 8000e98:	4335      	orrs	r5, r6
 8000e9a:	e606      	b.n	8000aaa <__aeabi_dadd+0x19e>
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	d07c      	beq.n	8000f9a <__aeabi_dadd+0x68e>
 8000ea0:	4662      	mov	r2, ip
 8000ea2:	4653      	mov	r3, sl
 8000ea4:	08c0      	lsrs	r0, r0, #3
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	d100      	bne.n	8000eac <__aeabi_dadd+0x5a0>
 8000eaa:	e6fa      	b.n	8000ca2 <__aeabi_dadd+0x396>
 8000eac:	0762      	lsls	r2, r4, #29
 8000eae:	4310      	orrs	r0, r2
 8000eb0:	2280      	movs	r2, #128	@ 0x80
 8000eb2:	08e4      	lsrs	r4, r4, #3
 8000eb4:	0312      	lsls	r2, r2, #12
 8000eb6:	4214      	tst	r4, r2
 8000eb8:	d008      	beq.n	8000ecc <__aeabi_dadd+0x5c0>
 8000eba:	08d9      	lsrs	r1, r3, #3
 8000ebc:	4211      	tst	r1, r2
 8000ebe:	d105      	bne.n	8000ecc <__aeabi_dadd+0x5c0>
 8000ec0:	4663      	mov	r3, ip
 8000ec2:	08d8      	lsrs	r0, r3, #3
 8000ec4:	4653      	mov	r3, sl
 8000ec6:	000c      	movs	r4, r1
 8000ec8:	075b      	lsls	r3, r3, #29
 8000eca:	4318      	orrs	r0, r3
 8000ecc:	0f42      	lsrs	r2, r0, #29
 8000ece:	00c0      	lsls	r0, r0, #3
 8000ed0:	08c0      	lsrs	r0, r0, #3
 8000ed2:	0752      	lsls	r2, r2, #29
 8000ed4:	4302      	orrs	r2, r0
 8000ed6:	e6e7      	b.n	8000ca8 <__aeabi_dadd+0x39c>
 8000ed8:	2a00      	cmp	r2, #0
 8000eda:	d100      	bne.n	8000ede <__aeabi_dadd+0x5d2>
 8000edc:	e72d      	b.n	8000d3a <__aeabi_dadd+0x42e>
 8000ede:	4663      	mov	r3, ip
 8000ee0:	08d8      	lsrs	r0, r3, #3
 8000ee2:	4653      	mov	r3, sl
 8000ee4:	075a      	lsls	r2, r3, #29
 8000ee6:	000e      	movs	r6, r1
 8000ee8:	4302      	orrs	r2, r0
 8000eea:	08dc      	lsrs	r4, r3, #3
 8000eec:	e6cc      	b.n	8000c88 <__aeabi_dadd+0x37c>
 8000eee:	4663      	mov	r3, ip
 8000ef0:	1a1d      	subs	r5, r3, r0
 8000ef2:	45ac      	cmp	ip, r5
 8000ef4:	4192      	sbcs	r2, r2
 8000ef6:	4653      	mov	r3, sl
 8000ef8:	4252      	negs	r2, r2
 8000efa:	1b1c      	subs	r4, r3, r4
 8000efc:	000e      	movs	r6, r1
 8000efe:	4688      	mov	r8, r1
 8000f00:	1aa4      	subs	r4, r4, r2
 8000f02:	3701      	adds	r7, #1
 8000f04:	e555      	b.n	80009b2 <__aeabi_dadd+0xa6>
 8000f06:	4663      	mov	r3, ip
 8000f08:	08d9      	lsrs	r1, r3, #3
 8000f0a:	4653      	mov	r3, sl
 8000f0c:	075a      	lsls	r2, r3, #29
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	08dc      	lsrs	r4, r3, #3
 8000f12:	e6c9      	b.n	8000ca8 <__aeabi_dadd+0x39c>
 8000f14:	4660      	mov	r0, ip
 8000f16:	4654      	mov	r4, sl
 8000f18:	e6d4      	b.n	8000cc4 <__aeabi_dadd+0x3b8>
 8000f1a:	08c0      	lsrs	r0, r0, #3
 8000f1c:	2a00      	cmp	r2, #0
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_dadd+0x616>
 8000f20:	e6bf      	b.n	8000ca2 <__aeabi_dadd+0x396>
 8000f22:	0762      	lsls	r2, r4, #29
 8000f24:	4310      	orrs	r0, r2
 8000f26:	2280      	movs	r2, #128	@ 0x80
 8000f28:	08e4      	lsrs	r4, r4, #3
 8000f2a:	0312      	lsls	r2, r2, #12
 8000f2c:	4214      	tst	r4, r2
 8000f2e:	d0cd      	beq.n	8000ecc <__aeabi_dadd+0x5c0>
 8000f30:	08dd      	lsrs	r5, r3, #3
 8000f32:	4215      	tst	r5, r2
 8000f34:	d1ca      	bne.n	8000ecc <__aeabi_dadd+0x5c0>
 8000f36:	4663      	mov	r3, ip
 8000f38:	08d8      	lsrs	r0, r3, #3
 8000f3a:	4653      	mov	r3, sl
 8000f3c:	075b      	lsls	r3, r3, #29
 8000f3e:	000e      	movs	r6, r1
 8000f40:	002c      	movs	r4, r5
 8000f42:	4318      	orrs	r0, r3
 8000f44:	e7c2      	b.n	8000ecc <__aeabi_dadd+0x5c0>
 8000f46:	4663      	mov	r3, ip
 8000f48:	08d9      	lsrs	r1, r3, #3
 8000f4a:	4653      	mov	r3, sl
 8000f4c:	075a      	lsls	r2, r3, #29
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	08dc      	lsrs	r4, r3, #3
 8000f52:	e699      	b.n	8000c88 <__aeabi_dadd+0x37c>
 8000f54:	4663      	mov	r3, ip
 8000f56:	08d8      	lsrs	r0, r3, #3
 8000f58:	4653      	mov	r3, sl
 8000f5a:	075a      	lsls	r2, r3, #29
 8000f5c:	000e      	movs	r6, r1
 8000f5e:	4302      	orrs	r2, r0
 8000f60:	08dc      	lsrs	r4, r3, #3
 8000f62:	e6a1      	b.n	8000ca8 <__aeabi_dadd+0x39c>
 8000f64:	0011      	movs	r1, r2
 8000f66:	0027      	movs	r7, r4
 8000f68:	3920      	subs	r1, #32
 8000f6a:	40cf      	lsrs	r7, r1
 8000f6c:	2a20      	cmp	r2, #32
 8000f6e:	d003      	beq.n	8000f78 <__aeabi_dadd+0x66c>
 8000f70:	2140      	movs	r1, #64	@ 0x40
 8000f72:	1a8a      	subs	r2, r1, r2
 8000f74:	4094      	lsls	r4, r2
 8000f76:	4320      	orrs	r0, r4
 8000f78:	1e42      	subs	r2, r0, #1
 8000f7a:	4190      	sbcs	r0, r2
 8000f7c:	0005      	movs	r5, r0
 8000f7e:	433d      	orrs	r5, r7
 8000f80:	e651      	b.n	8000c26 <__aeabi_dadd+0x31a>
 8000f82:	000c      	movs	r4, r1
 8000f84:	2500      	movs	r5, #0
 8000f86:	2200      	movs	r2, #0
 8000f88:	e558      	b.n	8000a3c <__aeabi_dadd+0x130>
 8000f8a:	4460      	add	r0, ip
 8000f8c:	4560      	cmp	r0, ip
 8000f8e:	4192      	sbcs	r2, r2
 8000f90:	4454      	add	r4, sl
 8000f92:	4252      	negs	r2, r2
 8000f94:	0005      	movs	r5, r0
 8000f96:	18a4      	adds	r4, r4, r2
 8000f98:	e73a      	b.n	8000e10 <__aeabi_dadd+0x504>
 8000f9a:	4653      	mov	r3, sl
 8000f9c:	075a      	lsls	r2, r3, #29
 8000f9e:	4663      	mov	r3, ip
 8000fa0:	08d9      	lsrs	r1, r3, #3
 8000fa2:	4653      	mov	r3, sl
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	08dc      	lsrs	r4, r3, #3
 8000fa8:	e67e      	b.n	8000ca8 <__aeabi_dadd+0x39c>
 8000faa:	001a      	movs	r2, r3
 8000fac:	001c      	movs	r4, r3
 8000fae:	432a      	orrs	r2, r5
 8000fb0:	d000      	beq.n	8000fb4 <__aeabi_dadd+0x6a8>
 8000fb2:	e6ab      	b.n	8000d0c <__aeabi_dadd+0x400>
 8000fb4:	e6c1      	b.n	8000d3a <__aeabi_dadd+0x42e>
 8000fb6:	2120      	movs	r1, #32
 8000fb8:	2500      	movs	r5, #0
 8000fba:	1a09      	subs	r1, r1, r0
 8000fbc:	e519      	b.n	80009f2 <__aeabi_dadd+0xe6>
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2500      	movs	r5, #0
 8000fc2:	4c01      	ldr	r4, [pc, #4]	@ (8000fc8 <__aeabi_dadd+0x6bc>)
 8000fc4:	e53a      	b.n	8000a3c <__aeabi_dadd+0x130>
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	000007ff 	.word	0x000007ff
 8000fcc:	ff7fffff 	.word	0xff7fffff
 8000fd0:	000007fe 	.word	0x000007fe

08000fd4 <__aeabi_ddiv>:
 8000fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd6:	46de      	mov	lr, fp
 8000fd8:	4645      	mov	r5, r8
 8000fda:	4657      	mov	r7, sl
 8000fdc:	464e      	mov	r6, r9
 8000fde:	b5e0      	push	{r5, r6, r7, lr}
 8000fe0:	b087      	sub	sp, #28
 8000fe2:	9200      	str	r2, [sp, #0]
 8000fe4:	9301      	str	r3, [sp, #4]
 8000fe6:	030b      	lsls	r3, r1, #12
 8000fe8:	0b1b      	lsrs	r3, r3, #12
 8000fea:	469b      	mov	fp, r3
 8000fec:	0fca      	lsrs	r2, r1, #31
 8000fee:	004b      	lsls	r3, r1, #1
 8000ff0:	0004      	movs	r4, r0
 8000ff2:	4680      	mov	r8, r0
 8000ff4:	0d5b      	lsrs	r3, r3, #21
 8000ff6:	9202      	str	r2, [sp, #8]
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_ddiv+0x28>
 8000ffa:	e16a      	b.n	80012d2 <__aeabi_ddiv+0x2fe>
 8000ffc:	4ad4      	ldr	r2, [pc, #848]	@ (8001350 <__aeabi_ddiv+0x37c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d100      	bne.n	8001004 <__aeabi_ddiv+0x30>
 8001002:	e18c      	b.n	800131e <__aeabi_ddiv+0x34a>
 8001004:	4659      	mov	r1, fp
 8001006:	0f42      	lsrs	r2, r0, #29
 8001008:	00c9      	lsls	r1, r1, #3
 800100a:	430a      	orrs	r2, r1
 800100c:	2180      	movs	r1, #128	@ 0x80
 800100e:	0409      	lsls	r1, r1, #16
 8001010:	4311      	orrs	r1, r2
 8001012:	00c2      	lsls	r2, r0, #3
 8001014:	4690      	mov	r8, r2
 8001016:	4acf      	ldr	r2, [pc, #828]	@ (8001354 <__aeabi_ddiv+0x380>)
 8001018:	4689      	mov	r9, r1
 800101a:	4692      	mov	sl, r2
 800101c:	449a      	add	sl, r3
 800101e:	2300      	movs	r3, #0
 8001020:	2400      	movs	r4, #0
 8001022:	9303      	str	r3, [sp, #12]
 8001024:	9e00      	ldr	r6, [sp, #0]
 8001026:	9f01      	ldr	r7, [sp, #4]
 8001028:	033b      	lsls	r3, r7, #12
 800102a:	0b1b      	lsrs	r3, r3, #12
 800102c:	469b      	mov	fp, r3
 800102e:	007b      	lsls	r3, r7, #1
 8001030:	0030      	movs	r0, r6
 8001032:	0d5b      	lsrs	r3, r3, #21
 8001034:	0ffd      	lsrs	r5, r7, #31
 8001036:	2b00      	cmp	r3, #0
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x68>
 800103a:	e128      	b.n	800128e <__aeabi_ddiv+0x2ba>
 800103c:	4ac4      	ldr	r2, [pc, #784]	@ (8001350 <__aeabi_ddiv+0x37c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d100      	bne.n	8001044 <__aeabi_ddiv+0x70>
 8001042:	e177      	b.n	8001334 <__aeabi_ddiv+0x360>
 8001044:	4659      	mov	r1, fp
 8001046:	0f72      	lsrs	r2, r6, #29
 8001048:	00c9      	lsls	r1, r1, #3
 800104a:	430a      	orrs	r2, r1
 800104c:	2180      	movs	r1, #128	@ 0x80
 800104e:	0409      	lsls	r1, r1, #16
 8001050:	4311      	orrs	r1, r2
 8001052:	468b      	mov	fp, r1
 8001054:	49bf      	ldr	r1, [pc, #764]	@ (8001354 <__aeabi_ddiv+0x380>)
 8001056:	00f2      	lsls	r2, r6, #3
 8001058:	468c      	mov	ip, r1
 800105a:	4651      	mov	r1, sl
 800105c:	4463      	add	r3, ip
 800105e:	1acb      	subs	r3, r1, r3
 8001060:	469a      	mov	sl, r3
 8001062:	2300      	movs	r3, #0
 8001064:	9e02      	ldr	r6, [sp, #8]
 8001066:	406e      	eors	r6, r5
 8001068:	2c0f      	cmp	r4, #15
 800106a:	d827      	bhi.n	80010bc <__aeabi_ddiv+0xe8>
 800106c:	49ba      	ldr	r1, [pc, #744]	@ (8001358 <__aeabi_ddiv+0x384>)
 800106e:	00a4      	lsls	r4, r4, #2
 8001070:	5909      	ldr	r1, [r1, r4]
 8001072:	468f      	mov	pc, r1
 8001074:	46cb      	mov	fp, r9
 8001076:	4642      	mov	r2, r8
 8001078:	9e02      	ldr	r6, [sp, #8]
 800107a:	9b03      	ldr	r3, [sp, #12]
 800107c:	2b02      	cmp	r3, #2
 800107e:	d016      	beq.n	80010ae <__aeabi_ddiv+0xda>
 8001080:	2b03      	cmp	r3, #3
 8001082:	d100      	bne.n	8001086 <__aeabi_ddiv+0xb2>
 8001084:	e2a6      	b.n	80015d4 <__aeabi_ddiv+0x600>
 8001086:	2b01      	cmp	r3, #1
 8001088:	d000      	beq.n	800108c <__aeabi_ddiv+0xb8>
 800108a:	e0df      	b.n	800124c <__aeabi_ddiv+0x278>
 800108c:	2200      	movs	r2, #0
 800108e:	2300      	movs	r3, #0
 8001090:	2400      	movs	r4, #0
 8001092:	4690      	mov	r8, r2
 8001094:	051b      	lsls	r3, r3, #20
 8001096:	4323      	orrs	r3, r4
 8001098:	07f6      	lsls	r6, r6, #31
 800109a:	4333      	orrs	r3, r6
 800109c:	4640      	mov	r0, r8
 800109e:	0019      	movs	r1, r3
 80010a0:	b007      	add	sp, #28
 80010a2:	bcf0      	pop	{r4, r5, r6, r7}
 80010a4:	46bb      	mov	fp, r7
 80010a6:	46b2      	mov	sl, r6
 80010a8:	46a9      	mov	r9, r5
 80010aa:	46a0      	mov	r8, r4
 80010ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ae:	2200      	movs	r2, #0
 80010b0:	2400      	movs	r4, #0
 80010b2:	4690      	mov	r8, r2
 80010b4:	4ba6      	ldr	r3, [pc, #664]	@ (8001350 <__aeabi_ddiv+0x37c>)
 80010b6:	e7ed      	b.n	8001094 <__aeabi_ddiv+0xc0>
 80010b8:	002e      	movs	r6, r5
 80010ba:	e7df      	b.n	800107c <__aeabi_ddiv+0xa8>
 80010bc:	45cb      	cmp	fp, r9
 80010be:	d200      	bcs.n	80010c2 <__aeabi_ddiv+0xee>
 80010c0:	e1d4      	b.n	800146c <__aeabi_ddiv+0x498>
 80010c2:	d100      	bne.n	80010c6 <__aeabi_ddiv+0xf2>
 80010c4:	e1cf      	b.n	8001466 <__aeabi_ddiv+0x492>
 80010c6:	2301      	movs	r3, #1
 80010c8:	425b      	negs	r3, r3
 80010ca:	469c      	mov	ip, r3
 80010cc:	4644      	mov	r4, r8
 80010ce:	4648      	mov	r0, r9
 80010d0:	2700      	movs	r7, #0
 80010d2:	44e2      	add	sl, ip
 80010d4:	465b      	mov	r3, fp
 80010d6:	0e15      	lsrs	r5, r2, #24
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	431d      	orrs	r5, r3
 80010dc:	0c19      	lsrs	r1, r3, #16
 80010de:	042b      	lsls	r3, r5, #16
 80010e0:	0212      	lsls	r2, r2, #8
 80010e2:	9500      	str	r5, [sp, #0]
 80010e4:	0c1d      	lsrs	r5, r3, #16
 80010e6:	4691      	mov	r9, r2
 80010e8:	9102      	str	r1, [sp, #8]
 80010ea:	9503      	str	r5, [sp, #12]
 80010ec:	f7ff f8a4 	bl	8000238 <__aeabi_uidivmod>
 80010f0:	0002      	movs	r2, r0
 80010f2:	436a      	muls	r2, r5
 80010f4:	040b      	lsls	r3, r1, #16
 80010f6:	0c21      	lsrs	r1, r4, #16
 80010f8:	4680      	mov	r8, r0
 80010fa:	4319      	orrs	r1, r3
 80010fc:	428a      	cmp	r2, r1
 80010fe:	d909      	bls.n	8001114 <__aeabi_ddiv+0x140>
 8001100:	9d00      	ldr	r5, [sp, #0]
 8001102:	2301      	movs	r3, #1
 8001104:	46ac      	mov	ip, r5
 8001106:	425b      	negs	r3, r3
 8001108:	4461      	add	r1, ip
 800110a:	469c      	mov	ip, r3
 800110c:	44e0      	add	r8, ip
 800110e:	428d      	cmp	r5, r1
 8001110:	d800      	bhi.n	8001114 <__aeabi_ddiv+0x140>
 8001112:	e1fb      	b.n	800150c <__aeabi_ddiv+0x538>
 8001114:	1a88      	subs	r0, r1, r2
 8001116:	9902      	ldr	r1, [sp, #8]
 8001118:	f7ff f88e 	bl	8000238 <__aeabi_uidivmod>
 800111c:	9a03      	ldr	r2, [sp, #12]
 800111e:	0424      	lsls	r4, r4, #16
 8001120:	4342      	muls	r2, r0
 8001122:	0409      	lsls	r1, r1, #16
 8001124:	0c24      	lsrs	r4, r4, #16
 8001126:	0003      	movs	r3, r0
 8001128:	430c      	orrs	r4, r1
 800112a:	42a2      	cmp	r2, r4
 800112c:	d906      	bls.n	800113c <__aeabi_ddiv+0x168>
 800112e:	9900      	ldr	r1, [sp, #0]
 8001130:	3b01      	subs	r3, #1
 8001132:	468c      	mov	ip, r1
 8001134:	4464      	add	r4, ip
 8001136:	42a1      	cmp	r1, r4
 8001138:	d800      	bhi.n	800113c <__aeabi_ddiv+0x168>
 800113a:	e1e1      	b.n	8001500 <__aeabi_ddiv+0x52c>
 800113c:	1aa0      	subs	r0, r4, r2
 800113e:	4642      	mov	r2, r8
 8001140:	0412      	lsls	r2, r2, #16
 8001142:	431a      	orrs	r2, r3
 8001144:	4693      	mov	fp, r2
 8001146:	464b      	mov	r3, r9
 8001148:	4659      	mov	r1, fp
 800114a:	0c1b      	lsrs	r3, r3, #16
 800114c:	001d      	movs	r5, r3
 800114e:	9304      	str	r3, [sp, #16]
 8001150:	040b      	lsls	r3, r1, #16
 8001152:	4649      	mov	r1, r9
 8001154:	0409      	lsls	r1, r1, #16
 8001156:	0c09      	lsrs	r1, r1, #16
 8001158:	000c      	movs	r4, r1
 800115a:	0c1b      	lsrs	r3, r3, #16
 800115c:	435c      	muls	r4, r3
 800115e:	0c12      	lsrs	r2, r2, #16
 8001160:	436b      	muls	r3, r5
 8001162:	4688      	mov	r8, r1
 8001164:	4351      	muls	r1, r2
 8001166:	436a      	muls	r2, r5
 8001168:	0c25      	lsrs	r5, r4, #16
 800116a:	46ac      	mov	ip, r5
 800116c:	185b      	adds	r3, r3, r1
 800116e:	4463      	add	r3, ip
 8001170:	4299      	cmp	r1, r3
 8001172:	d903      	bls.n	800117c <__aeabi_ddiv+0x1a8>
 8001174:	2180      	movs	r1, #128	@ 0x80
 8001176:	0249      	lsls	r1, r1, #9
 8001178:	468c      	mov	ip, r1
 800117a:	4462      	add	r2, ip
 800117c:	0c19      	lsrs	r1, r3, #16
 800117e:	0424      	lsls	r4, r4, #16
 8001180:	041b      	lsls	r3, r3, #16
 8001182:	0c24      	lsrs	r4, r4, #16
 8001184:	188a      	adds	r2, r1, r2
 8001186:	191c      	adds	r4, r3, r4
 8001188:	4290      	cmp	r0, r2
 800118a:	d302      	bcc.n	8001192 <__aeabi_ddiv+0x1be>
 800118c:	d116      	bne.n	80011bc <__aeabi_ddiv+0x1e8>
 800118e:	42a7      	cmp	r7, r4
 8001190:	d214      	bcs.n	80011bc <__aeabi_ddiv+0x1e8>
 8001192:	465b      	mov	r3, fp
 8001194:	9d00      	ldr	r5, [sp, #0]
 8001196:	3b01      	subs	r3, #1
 8001198:	444f      	add	r7, r9
 800119a:	9305      	str	r3, [sp, #20]
 800119c:	454f      	cmp	r7, r9
 800119e:	419b      	sbcs	r3, r3
 80011a0:	46ac      	mov	ip, r5
 80011a2:	425b      	negs	r3, r3
 80011a4:	4463      	add	r3, ip
 80011a6:	18c0      	adds	r0, r0, r3
 80011a8:	4285      	cmp	r5, r0
 80011aa:	d300      	bcc.n	80011ae <__aeabi_ddiv+0x1da>
 80011ac:	e1a1      	b.n	80014f2 <__aeabi_ddiv+0x51e>
 80011ae:	4282      	cmp	r2, r0
 80011b0:	d900      	bls.n	80011b4 <__aeabi_ddiv+0x1e0>
 80011b2:	e1f6      	b.n	80015a2 <__aeabi_ddiv+0x5ce>
 80011b4:	d100      	bne.n	80011b8 <__aeabi_ddiv+0x1e4>
 80011b6:	e1f1      	b.n	800159c <__aeabi_ddiv+0x5c8>
 80011b8:	9b05      	ldr	r3, [sp, #20]
 80011ba:	469b      	mov	fp, r3
 80011bc:	1b3c      	subs	r4, r7, r4
 80011be:	42a7      	cmp	r7, r4
 80011c0:	41bf      	sbcs	r7, r7
 80011c2:	9d00      	ldr	r5, [sp, #0]
 80011c4:	1a80      	subs	r0, r0, r2
 80011c6:	427f      	negs	r7, r7
 80011c8:	1bc0      	subs	r0, r0, r7
 80011ca:	4285      	cmp	r5, r0
 80011cc:	d100      	bne.n	80011d0 <__aeabi_ddiv+0x1fc>
 80011ce:	e1d0      	b.n	8001572 <__aeabi_ddiv+0x59e>
 80011d0:	9902      	ldr	r1, [sp, #8]
 80011d2:	f7ff f831 	bl	8000238 <__aeabi_uidivmod>
 80011d6:	9a03      	ldr	r2, [sp, #12]
 80011d8:	040b      	lsls	r3, r1, #16
 80011da:	4342      	muls	r2, r0
 80011dc:	0c21      	lsrs	r1, r4, #16
 80011de:	0007      	movs	r7, r0
 80011e0:	4319      	orrs	r1, r3
 80011e2:	428a      	cmp	r2, r1
 80011e4:	d900      	bls.n	80011e8 <__aeabi_ddiv+0x214>
 80011e6:	e178      	b.n	80014da <__aeabi_ddiv+0x506>
 80011e8:	1a88      	subs	r0, r1, r2
 80011ea:	9902      	ldr	r1, [sp, #8]
 80011ec:	f7ff f824 	bl	8000238 <__aeabi_uidivmod>
 80011f0:	9a03      	ldr	r2, [sp, #12]
 80011f2:	0424      	lsls	r4, r4, #16
 80011f4:	4342      	muls	r2, r0
 80011f6:	0409      	lsls	r1, r1, #16
 80011f8:	0c24      	lsrs	r4, r4, #16
 80011fa:	0003      	movs	r3, r0
 80011fc:	430c      	orrs	r4, r1
 80011fe:	42a2      	cmp	r2, r4
 8001200:	d900      	bls.n	8001204 <__aeabi_ddiv+0x230>
 8001202:	e15d      	b.n	80014c0 <__aeabi_ddiv+0x4ec>
 8001204:	4641      	mov	r1, r8
 8001206:	1aa4      	subs	r4, r4, r2
 8001208:	043a      	lsls	r2, r7, #16
 800120a:	431a      	orrs	r2, r3
 800120c:	9d04      	ldr	r5, [sp, #16]
 800120e:	0413      	lsls	r3, r2, #16
 8001210:	0c1b      	lsrs	r3, r3, #16
 8001212:	4359      	muls	r1, r3
 8001214:	4647      	mov	r7, r8
 8001216:	436b      	muls	r3, r5
 8001218:	469c      	mov	ip, r3
 800121a:	0c10      	lsrs	r0, r2, #16
 800121c:	4347      	muls	r7, r0
 800121e:	0c0b      	lsrs	r3, r1, #16
 8001220:	44bc      	add	ip, r7
 8001222:	4463      	add	r3, ip
 8001224:	4368      	muls	r0, r5
 8001226:	429f      	cmp	r7, r3
 8001228:	d903      	bls.n	8001232 <__aeabi_ddiv+0x25e>
 800122a:	2580      	movs	r5, #128	@ 0x80
 800122c:	026d      	lsls	r5, r5, #9
 800122e:	46ac      	mov	ip, r5
 8001230:	4460      	add	r0, ip
 8001232:	0c1f      	lsrs	r7, r3, #16
 8001234:	0409      	lsls	r1, r1, #16
 8001236:	041b      	lsls	r3, r3, #16
 8001238:	0c09      	lsrs	r1, r1, #16
 800123a:	183f      	adds	r7, r7, r0
 800123c:	185b      	adds	r3, r3, r1
 800123e:	42bc      	cmp	r4, r7
 8001240:	d200      	bcs.n	8001244 <__aeabi_ddiv+0x270>
 8001242:	e102      	b.n	800144a <__aeabi_ddiv+0x476>
 8001244:	d100      	bne.n	8001248 <__aeabi_ddiv+0x274>
 8001246:	e0fd      	b.n	8001444 <__aeabi_ddiv+0x470>
 8001248:	2301      	movs	r3, #1
 800124a:	431a      	orrs	r2, r3
 800124c:	4b43      	ldr	r3, [pc, #268]	@ (800135c <__aeabi_ddiv+0x388>)
 800124e:	4453      	add	r3, sl
 8001250:	2b00      	cmp	r3, #0
 8001252:	dc00      	bgt.n	8001256 <__aeabi_ddiv+0x282>
 8001254:	e0ae      	b.n	80013b4 <__aeabi_ddiv+0x3e0>
 8001256:	0751      	lsls	r1, r2, #29
 8001258:	d000      	beq.n	800125c <__aeabi_ddiv+0x288>
 800125a:	e198      	b.n	800158e <__aeabi_ddiv+0x5ba>
 800125c:	4659      	mov	r1, fp
 800125e:	01c9      	lsls	r1, r1, #7
 8001260:	d506      	bpl.n	8001270 <__aeabi_ddiv+0x29c>
 8001262:	4659      	mov	r1, fp
 8001264:	4b3e      	ldr	r3, [pc, #248]	@ (8001360 <__aeabi_ddiv+0x38c>)
 8001266:	4019      	ands	r1, r3
 8001268:	2380      	movs	r3, #128	@ 0x80
 800126a:	468b      	mov	fp, r1
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	4453      	add	r3, sl
 8001270:	493c      	ldr	r1, [pc, #240]	@ (8001364 <__aeabi_ddiv+0x390>)
 8001272:	428b      	cmp	r3, r1
 8001274:	dd00      	ble.n	8001278 <__aeabi_ddiv+0x2a4>
 8001276:	e71a      	b.n	80010ae <__aeabi_ddiv+0xda>
 8001278:	4659      	mov	r1, fp
 800127a:	08d2      	lsrs	r2, r2, #3
 800127c:	0749      	lsls	r1, r1, #29
 800127e:	4311      	orrs	r1, r2
 8001280:	465a      	mov	r2, fp
 8001282:	055b      	lsls	r3, r3, #21
 8001284:	0254      	lsls	r4, r2, #9
 8001286:	4688      	mov	r8, r1
 8001288:	0b24      	lsrs	r4, r4, #12
 800128a:	0d5b      	lsrs	r3, r3, #21
 800128c:	e702      	b.n	8001094 <__aeabi_ddiv+0xc0>
 800128e:	465a      	mov	r2, fp
 8001290:	9b00      	ldr	r3, [sp, #0]
 8001292:	431a      	orrs	r2, r3
 8001294:	d100      	bne.n	8001298 <__aeabi_ddiv+0x2c4>
 8001296:	e07e      	b.n	8001396 <__aeabi_ddiv+0x3c2>
 8001298:	465b      	mov	r3, fp
 800129a:	2b00      	cmp	r3, #0
 800129c:	d100      	bne.n	80012a0 <__aeabi_ddiv+0x2cc>
 800129e:	e100      	b.n	80014a2 <__aeabi_ddiv+0x4ce>
 80012a0:	4658      	mov	r0, fp
 80012a2:	f001 fa5b 	bl	800275c <__clzsi2>
 80012a6:	0002      	movs	r2, r0
 80012a8:	0003      	movs	r3, r0
 80012aa:	3a0b      	subs	r2, #11
 80012ac:	271d      	movs	r7, #29
 80012ae:	9e00      	ldr	r6, [sp, #0]
 80012b0:	1aba      	subs	r2, r7, r2
 80012b2:	0019      	movs	r1, r3
 80012b4:	4658      	mov	r0, fp
 80012b6:	40d6      	lsrs	r6, r2
 80012b8:	3908      	subs	r1, #8
 80012ba:	4088      	lsls	r0, r1
 80012bc:	0032      	movs	r2, r6
 80012be:	4302      	orrs	r2, r0
 80012c0:	4693      	mov	fp, r2
 80012c2:	9a00      	ldr	r2, [sp, #0]
 80012c4:	408a      	lsls	r2, r1
 80012c6:	4928      	ldr	r1, [pc, #160]	@ (8001368 <__aeabi_ddiv+0x394>)
 80012c8:	4453      	add	r3, sl
 80012ca:	468a      	mov	sl, r1
 80012cc:	449a      	add	sl, r3
 80012ce:	2300      	movs	r3, #0
 80012d0:	e6c8      	b.n	8001064 <__aeabi_ddiv+0x90>
 80012d2:	465b      	mov	r3, fp
 80012d4:	4303      	orrs	r3, r0
 80012d6:	4699      	mov	r9, r3
 80012d8:	d056      	beq.n	8001388 <__aeabi_ddiv+0x3b4>
 80012da:	465b      	mov	r3, fp
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d100      	bne.n	80012e2 <__aeabi_ddiv+0x30e>
 80012e0:	e0cd      	b.n	800147e <__aeabi_ddiv+0x4aa>
 80012e2:	4658      	mov	r0, fp
 80012e4:	f001 fa3a 	bl	800275c <__clzsi2>
 80012e8:	230b      	movs	r3, #11
 80012ea:	425b      	negs	r3, r3
 80012ec:	469c      	mov	ip, r3
 80012ee:	0002      	movs	r2, r0
 80012f0:	4484      	add	ip, r0
 80012f2:	4666      	mov	r6, ip
 80012f4:	231d      	movs	r3, #29
 80012f6:	1b9b      	subs	r3, r3, r6
 80012f8:	0026      	movs	r6, r4
 80012fa:	0011      	movs	r1, r2
 80012fc:	4658      	mov	r0, fp
 80012fe:	40de      	lsrs	r6, r3
 8001300:	3908      	subs	r1, #8
 8001302:	4088      	lsls	r0, r1
 8001304:	0033      	movs	r3, r6
 8001306:	4303      	orrs	r3, r0
 8001308:	4699      	mov	r9, r3
 800130a:	0023      	movs	r3, r4
 800130c:	408b      	lsls	r3, r1
 800130e:	4698      	mov	r8, r3
 8001310:	4b16      	ldr	r3, [pc, #88]	@ (800136c <__aeabi_ddiv+0x398>)
 8001312:	2400      	movs	r4, #0
 8001314:	1a9b      	subs	r3, r3, r2
 8001316:	469a      	mov	sl, r3
 8001318:	2300      	movs	r3, #0
 800131a:	9303      	str	r3, [sp, #12]
 800131c:	e682      	b.n	8001024 <__aeabi_ddiv+0x50>
 800131e:	465a      	mov	r2, fp
 8001320:	4302      	orrs	r2, r0
 8001322:	4691      	mov	r9, r2
 8001324:	d12a      	bne.n	800137c <__aeabi_ddiv+0x3a8>
 8001326:	2200      	movs	r2, #0
 8001328:	469a      	mov	sl, r3
 800132a:	2302      	movs	r3, #2
 800132c:	4690      	mov	r8, r2
 800132e:	2408      	movs	r4, #8
 8001330:	9303      	str	r3, [sp, #12]
 8001332:	e677      	b.n	8001024 <__aeabi_ddiv+0x50>
 8001334:	465a      	mov	r2, fp
 8001336:	9b00      	ldr	r3, [sp, #0]
 8001338:	431a      	orrs	r2, r3
 800133a:	4b0d      	ldr	r3, [pc, #52]	@ (8001370 <__aeabi_ddiv+0x39c>)
 800133c:	469c      	mov	ip, r3
 800133e:	44e2      	add	sl, ip
 8001340:	2a00      	cmp	r2, #0
 8001342:	d117      	bne.n	8001374 <__aeabi_ddiv+0x3a0>
 8001344:	2302      	movs	r3, #2
 8001346:	431c      	orrs	r4, r3
 8001348:	2300      	movs	r3, #0
 800134a:	469b      	mov	fp, r3
 800134c:	3302      	adds	r3, #2
 800134e:	e689      	b.n	8001064 <__aeabi_ddiv+0x90>
 8001350:	000007ff 	.word	0x000007ff
 8001354:	fffffc01 	.word	0xfffffc01
 8001358:	080064fc 	.word	0x080064fc
 800135c:	000003ff 	.word	0x000003ff
 8001360:	feffffff 	.word	0xfeffffff
 8001364:	000007fe 	.word	0x000007fe
 8001368:	000003f3 	.word	0x000003f3
 800136c:	fffffc0d 	.word	0xfffffc0d
 8001370:	fffff801 	.word	0xfffff801
 8001374:	2303      	movs	r3, #3
 8001376:	0032      	movs	r2, r6
 8001378:	431c      	orrs	r4, r3
 800137a:	e673      	b.n	8001064 <__aeabi_ddiv+0x90>
 800137c:	469a      	mov	sl, r3
 800137e:	2303      	movs	r3, #3
 8001380:	46d9      	mov	r9, fp
 8001382:	240c      	movs	r4, #12
 8001384:	9303      	str	r3, [sp, #12]
 8001386:	e64d      	b.n	8001024 <__aeabi_ddiv+0x50>
 8001388:	2300      	movs	r3, #0
 800138a:	4698      	mov	r8, r3
 800138c:	469a      	mov	sl, r3
 800138e:	3301      	adds	r3, #1
 8001390:	2404      	movs	r4, #4
 8001392:	9303      	str	r3, [sp, #12]
 8001394:	e646      	b.n	8001024 <__aeabi_ddiv+0x50>
 8001396:	2301      	movs	r3, #1
 8001398:	431c      	orrs	r4, r3
 800139a:	2300      	movs	r3, #0
 800139c:	469b      	mov	fp, r3
 800139e:	3301      	adds	r3, #1
 80013a0:	e660      	b.n	8001064 <__aeabi_ddiv+0x90>
 80013a2:	2300      	movs	r3, #0
 80013a4:	2480      	movs	r4, #128	@ 0x80
 80013a6:	4698      	mov	r8, r3
 80013a8:	2600      	movs	r6, #0
 80013aa:	4b92      	ldr	r3, [pc, #584]	@ (80015f4 <__aeabi_ddiv+0x620>)
 80013ac:	0324      	lsls	r4, r4, #12
 80013ae:	e671      	b.n	8001094 <__aeabi_ddiv+0xc0>
 80013b0:	2201      	movs	r2, #1
 80013b2:	4252      	negs	r2, r2
 80013b4:	2101      	movs	r1, #1
 80013b6:	1ac9      	subs	r1, r1, r3
 80013b8:	2938      	cmp	r1, #56	@ 0x38
 80013ba:	dd00      	ble.n	80013be <__aeabi_ddiv+0x3ea>
 80013bc:	e666      	b.n	800108c <__aeabi_ddiv+0xb8>
 80013be:	291f      	cmp	r1, #31
 80013c0:	dc00      	bgt.n	80013c4 <__aeabi_ddiv+0x3f0>
 80013c2:	e0ab      	b.n	800151c <__aeabi_ddiv+0x548>
 80013c4:	201f      	movs	r0, #31
 80013c6:	4240      	negs	r0, r0
 80013c8:	1ac3      	subs	r3, r0, r3
 80013ca:	4658      	mov	r0, fp
 80013cc:	40d8      	lsrs	r0, r3
 80013ce:	0003      	movs	r3, r0
 80013d0:	2920      	cmp	r1, #32
 80013d2:	d004      	beq.n	80013de <__aeabi_ddiv+0x40a>
 80013d4:	4658      	mov	r0, fp
 80013d6:	4988      	ldr	r1, [pc, #544]	@ (80015f8 <__aeabi_ddiv+0x624>)
 80013d8:	4451      	add	r1, sl
 80013da:	4088      	lsls	r0, r1
 80013dc:	4302      	orrs	r2, r0
 80013de:	1e51      	subs	r1, r2, #1
 80013e0:	418a      	sbcs	r2, r1
 80013e2:	431a      	orrs	r2, r3
 80013e4:	2307      	movs	r3, #7
 80013e6:	0019      	movs	r1, r3
 80013e8:	2400      	movs	r4, #0
 80013ea:	4011      	ands	r1, r2
 80013ec:	4213      	tst	r3, r2
 80013ee:	d00c      	beq.n	800140a <__aeabi_ddiv+0x436>
 80013f0:	230f      	movs	r3, #15
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	d100      	bne.n	80013fa <__aeabi_ddiv+0x426>
 80013f8:	e0f9      	b.n	80015ee <__aeabi_ddiv+0x61a>
 80013fa:	1d11      	adds	r1, r2, #4
 80013fc:	4291      	cmp	r1, r2
 80013fe:	419b      	sbcs	r3, r3
 8001400:	000a      	movs	r2, r1
 8001402:	425b      	negs	r3, r3
 8001404:	0759      	lsls	r1, r3, #29
 8001406:	025b      	lsls	r3, r3, #9
 8001408:	0b1c      	lsrs	r4, r3, #12
 800140a:	08d2      	lsrs	r2, r2, #3
 800140c:	430a      	orrs	r2, r1
 800140e:	4690      	mov	r8, r2
 8001410:	2300      	movs	r3, #0
 8001412:	e63f      	b.n	8001094 <__aeabi_ddiv+0xc0>
 8001414:	2480      	movs	r4, #128	@ 0x80
 8001416:	464b      	mov	r3, r9
 8001418:	0324      	lsls	r4, r4, #12
 800141a:	4223      	tst	r3, r4
 800141c:	d009      	beq.n	8001432 <__aeabi_ddiv+0x45e>
 800141e:	465b      	mov	r3, fp
 8001420:	4223      	tst	r3, r4
 8001422:	d106      	bne.n	8001432 <__aeabi_ddiv+0x45e>
 8001424:	431c      	orrs	r4, r3
 8001426:	0324      	lsls	r4, r4, #12
 8001428:	002e      	movs	r6, r5
 800142a:	4690      	mov	r8, r2
 800142c:	4b71      	ldr	r3, [pc, #452]	@ (80015f4 <__aeabi_ddiv+0x620>)
 800142e:	0b24      	lsrs	r4, r4, #12
 8001430:	e630      	b.n	8001094 <__aeabi_ddiv+0xc0>
 8001432:	2480      	movs	r4, #128	@ 0x80
 8001434:	464b      	mov	r3, r9
 8001436:	0324      	lsls	r4, r4, #12
 8001438:	431c      	orrs	r4, r3
 800143a:	0324      	lsls	r4, r4, #12
 800143c:	9e02      	ldr	r6, [sp, #8]
 800143e:	4b6d      	ldr	r3, [pc, #436]	@ (80015f4 <__aeabi_ddiv+0x620>)
 8001440:	0b24      	lsrs	r4, r4, #12
 8001442:	e627      	b.n	8001094 <__aeabi_ddiv+0xc0>
 8001444:	2b00      	cmp	r3, #0
 8001446:	d100      	bne.n	800144a <__aeabi_ddiv+0x476>
 8001448:	e700      	b.n	800124c <__aeabi_ddiv+0x278>
 800144a:	9800      	ldr	r0, [sp, #0]
 800144c:	1e51      	subs	r1, r2, #1
 800144e:	4684      	mov	ip, r0
 8001450:	4464      	add	r4, ip
 8001452:	4284      	cmp	r4, r0
 8001454:	d200      	bcs.n	8001458 <__aeabi_ddiv+0x484>
 8001456:	e084      	b.n	8001562 <__aeabi_ddiv+0x58e>
 8001458:	42bc      	cmp	r4, r7
 800145a:	d200      	bcs.n	800145e <__aeabi_ddiv+0x48a>
 800145c:	e0ae      	b.n	80015bc <__aeabi_ddiv+0x5e8>
 800145e:	d100      	bne.n	8001462 <__aeabi_ddiv+0x48e>
 8001460:	e0c1      	b.n	80015e6 <__aeabi_ddiv+0x612>
 8001462:	000a      	movs	r2, r1
 8001464:	e6f0      	b.n	8001248 <__aeabi_ddiv+0x274>
 8001466:	4542      	cmp	r2, r8
 8001468:	d900      	bls.n	800146c <__aeabi_ddiv+0x498>
 800146a:	e62c      	b.n	80010c6 <__aeabi_ddiv+0xf2>
 800146c:	464b      	mov	r3, r9
 800146e:	07dc      	lsls	r4, r3, #31
 8001470:	0858      	lsrs	r0, r3, #1
 8001472:	4643      	mov	r3, r8
 8001474:	085b      	lsrs	r3, r3, #1
 8001476:	431c      	orrs	r4, r3
 8001478:	4643      	mov	r3, r8
 800147a:	07df      	lsls	r7, r3, #31
 800147c:	e62a      	b.n	80010d4 <__aeabi_ddiv+0x100>
 800147e:	f001 f96d 	bl	800275c <__clzsi2>
 8001482:	2315      	movs	r3, #21
 8001484:	469c      	mov	ip, r3
 8001486:	4484      	add	ip, r0
 8001488:	0002      	movs	r2, r0
 800148a:	4663      	mov	r3, ip
 800148c:	3220      	adds	r2, #32
 800148e:	2b1c      	cmp	r3, #28
 8001490:	dc00      	bgt.n	8001494 <__aeabi_ddiv+0x4c0>
 8001492:	e72e      	b.n	80012f2 <__aeabi_ddiv+0x31e>
 8001494:	0023      	movs	r3, r4
 8001496:	3808      	subs	r0, #8
 8001498:	4083      	lsls	r3, r0
 800149a:	4699      	mov	r9, r3
 800149c:	2300      	movs	r3, #0
 800149e:	4698      	mov	r8, r3
 80014a0:	e736      	b.n	8001310 <__aeabi_ddiv+0x33c>
 80014a2:	f001 f95b 	bl	800275c <__clzsi2>
 80014a6:	0002      	movs	r2, r0
 80014a8:	0003      	movs	r3, r0
 80014aa:	3215      	adds	r2, #21
 80014ac:	3320      	adds	r3, #32
 80014ae:	2a1c      	cmp	r2, #28
 80014b0:	dc00      	bgt.n	80014b4 <__aeabi_ddiv+0x4e0>
 80014b2:	e6fb      	b.n	80012ac <__aeabi_ddiv+0x2d8>
 80014b4:	9900      	ldr	r1, [sp, #0]
 80014b6:	3808      	subs	r0, #8
 80014b8:	4081      	lsls	r1, r0
 80014ba:	2200      	movs	r2, #0
 80014bc:	468b      	mov	fp, r1
 80014be:	e702      	b.n	80012c6 <__aeabi_ddiv+0x2f2>
 80014c0:	9900      	ldr	r1, [sp, #0]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	468c      	mov	ip, r1
 80014c6:	4464      	add	r4, ip
 80014c8:	42a1      	cmp	r1, r4
 80014ca:	d900      	bls.n	80014ce <__aeabi_ddiv+0x4fa>
 80014cc:	e69a      	b.n	8001204 <__aeabi_ddiv+0x230>
 80014ce:	42a2      	cmp	r2, r4
 80014d0:	d800      	bhi.n	80014d4 <__aeabi_ddiv+0x500>
 80014d2:	e697      	b.n	8001204 <__aeabi_ddiv+0x230>
 80014d4:	1e83      	subs	r3, r0, #2
 80014d6:	4464      	add	r4, ip
 80014d8:	e694      	b.n	8001204 <__aeabi_ddiv+0x230>
 80014da:	46ac      	mov	ip, r5
 80014dc:	4461      	add	r1, ip
 80014de:	3f01      	subs	r7, #1
 80014e0:	428d      	cmp	r5, r1
 80014e2:	d900      	bls.n	80014e6 <__aeabi_ddiv+0x512>
 80014e4:	e680      	b.n	80011e8 <__aeabi_ddiv+0x214>
 80014e6:	428a      	cmp	r2, r1
 80014e8:	d800      	bhi.n	80014ec <__aeabi_ddiv+0x518>
 80014ea:	e67d      	b.n	80011e8 <__aeabi_ddiv+0x214>
 80014ec:	1e87      	subs	r7, r0, #2
 80014ee:	4461      	add	r1, ip
 80014f0:	e67a      	b.n	80011e8 <__aeabi_ddiv+0x214>
 80014f2:	4285      	cmp	r5, r0
 80014f4:	d000      	beq.n	80014f8 <__aeabi_ddiv+0x524>
 80014f6:	e65f      	b.n	80011b8 <__aeabi_ddiv+0x1e4>
 80014f8:	45b9      	cmp	r9, r7
 80014fa:	d900      	bls.n	80014fe <__aeabi_ddiv+0x52a>
 80014fc:	e65c      	b.n	80011b8 <__aeabi_ddiv+0x1e4>
 80014fe:	e656      	b.n	80011ae <__aeabi_ddiv+0x1da>
 8001500:	42a2      	cmp	r2, r4
 8001502:	d800      	bhi.n	8001506 <__aeabi_ddiv+0x532>
 8001504:	e61a      	b.n	800113c <__aeabi_ddiv+0x168>
 8001506:	1e83      	subs	r3, r0, #2
 8001508:	4464      	add	r4, ip
 800150a:	e617      	b.n	800113c <__aeabi_ddiv+0x168>
 800150c:	428a      	cmp	r2, r1
 800150e:	d800      	bhi.n	8001512 <__aeabi_ddiv+0x53e>
 8001510:	e600      	b.n	8001114 <__aeabi_ddiv+0x140>
 8001512:	46ac      	mov	ip, r5
 8001514:	1e83      	subs	r3, r0, #2
 8001516:	4698      	mov	r8, r3
 8001518:	4461      	add	r1, ip
 800151a:	e5fb      	b.n	8001114 <__aeabi_ddiv+0x140>
 800151c:	4837      	ldr	r0, [pc, #220]	@ (80015fc <__aeabi_ddiv+0x628>)
 800151e:	0014      	movs	r4, r2
 8001520:	4450      	add	r0, sl
 8001522:	4082      	lsls	r2, r0
 8001524:	465b      	mov	r3, fp
 8001526:	0017      	movs	r7, r2
 8001528:	4083      	lsls	r3, r0
 800152a:	40cc      	lsrs	r4, r1
 800152c:	1e7a      	subs	r2, r7, #1
 800152e:	4197      	sbcs	r7, r2
 8001530:	4323      	orrs	r3, r4
 8001532:	433b      	orrs	r3, r7
 8001534:	001a      	movs	r2, r3
 8001536:	465b      	mov	r3, fp
 8001538:	40cb      	lsrs	r3, r1
 800153a:	0751      	lsls	r1, r2, #29
 800153c:	d009      	beq.n	8001552 <__aeabi_ddiv+0x57e>
 800153e:	210f      	movs	r1, #15
 8001540:	4011      	ands	r1, r2
 8001542:	2904      	cmp	r1, #4
 8001544:	d005      	beq.n	8001552 <__aeabi_ddiv+0x57e>
 8001546:	1d11      	adds	r1, r2, #4
 8001548:	4291      	cmp	r1, r2
 800154a:	4192      	sbcs	r2, r2
 800154c:	4252      	negs	r2, r2
 800154e:	189b      	adds	r3, r3, r2
 8001550:	000a      	movs	r2, r1
 8001552:	0219      	lsls	r1, r3, #8
 8001554:	d400      	bmi.n	8001558 <__aeabi_ddiv+0x584>
 8001556:	e755      	b.n	8001404 <__aeabi_ddiv+0x430>
 8001558:	2200      	movs	r2, #0
 800155a:	2301      	movs	r3, #1
 800155c:	2400      	movs	r4, #0
 800155e:	4690      	mov	r8, r2
 8001560:	e598      	b.n	8001094 <__aeabi_ddiv+0xc0>
 8001562:	000a      	movs	r2, r1
 8001564:	42bc      	cmp	r4, r7
 8001566:	d000      	beq.n	800156a <__aeabi_ddiv+0x596>
 8001568:	e66e      	b.n	8001248 <__aeabi_ddiv+0x274>
 800156a:	454b      	cmp	r3, r9
 800156c:	d000      	beq.n	8001570 <__aeabi_ddiv+0x59c>
 800156e:	e66b      	b.n	8001248 <__aeabi_ddiv+0x274>
 8001570:	e66c      	b.n	800124c <__aeabi_ddiv+0x278>
 8001572:	4b23      	ldr	r3, [pc, #140]	@ (8001600 <__aeabi_ddiv+0x62c>)
 8001574:	4a23      	ldr	r2, [pc, #140]	@ (8001604 <__aeabi_ddiv+0x630>)
 8001576:	4453      	add	r3, sl
 8001578:	4592      	cmp	sl, r2
 800157a:	da00      	bge.n	800157e <__aeabi_ddiv+0x5aa>
 800157c:	e718      	b.n	80013b0 <__aeabi_ddiv+0x3dc>
 800157e:	2101      	movs	r1, #1
 8001580:	4249      	negs	r1, r1
 8001582:	1d0a      	adds	r2, r1, #4
 8001584:	428a      	cmp	r2, r1
 8001586:	4189      	sbcs	r1, r1
 8001588:	4249      	negs	r1, r1
 800158a:	448b      	add	fp, r1
 800158c:	e666      	b.n	800125c <__aeabi_ddiv+0x288>
 800158e:	210f      	movs	r1, #15
 8001590:	4011      	ands	r1, r2
 8001592:	2904      	cmp	r1, #4
 8001594:	d100      	bne.n	8001598 <__aeabi_ddiv+0x5c4>
 8001596:	e661      	b.n	800125c <__aeabi_ddiv+0x288>
 8001598:	0011      	movs	r1, r2
 800159a:	e7f2      	b.n	8001582 <__aeabi_ddiv+0x5ae>
 800159c:	42bc      	cmp	r4, r7
 800159e:	d800      	bhi.n	80015a2 <__aeabi_ddiv+0x5ce>
 80015a0:	e60a      	b.n	80011b8 <__aeabi_ddiv+0x1e4>
 80015a2:	2302      	movs	r3, #2
 80015a4:	425b      	negs	r3, r3
 80015a6:	469c      	mov	ip, r3
 80015a8:	9900      	ldr	r1, [sp, #0]
 80015aa:	444f      	add	r7, r9
 80015ac:	454f      	cmp	r7, r9
 80015ae:	419b      	sbcs	r3, r3
 80015b0:	44e3      	add	fp, ip
 80015b2:	468c      	mov	ip, r1
 80015b4:	425b      	negs	r3, r3
 80015b6:	4463      	add	r3, ip
 80015b8:	18c0      	adds	r0, r0, r3
 80015ba:	e5ff      	b.n	80011bc <__aeabi_ddiv+0x1e8>
 80015bc:	4649      	mov	r1, r9
 80015be:	9d00      	ldr	r5, [sp, #0]
 80015c0:	0048      	lsls	r0, r1, #1
 80015c2:	4548      	cmp	r0, r9
 80015c4:	4189      	sbcs	r1, r1
 80015c6:	46ac      	mov	ip, r5
 80015c8:	4249      	negs	r1, r1
 80015ca:	4461      	add	r1, ip
 80015cc:	4681      	mov	r9, r0
 80015ce:	3a02      	subs	r2, #2
 80015d0:	1864      	adds	r4, r4, r1
 80015d2:	e7c7      	b.n	8001564 <__aeabi_ddiv+0x590>
 80015d4:	2480      	movs	r4, #128	@ 0x80
 80015d6:	465b      	mov	r3, fp
 80015d8:	0324      	lsls	r4, r4, #12
 80015da:	431c      	orrs	r4, r3
 80015dc:	0324      	lsls	r4, r4, #12
 80015de:	4690      	mov	r8, r2
 80015e0:	4b04      	ldr	r3, [pc, #16]	@ (80015f4 <__aeabi_ddiv+0x620>)
 80015e2:	0b24      	lsrs	r4, r4, #12
 80015e4:	e556      	b.n	8001094 <__aeabi_ddiv+0xc0>
 80015e6:	4599      	cmp	r9, r3
 80015e8:	d3e8      	bcc.n	80015bc <__aeabi_ddiv+0x5e8>
 80015ea:	000a      	movs	r2, r1
 80015ec:	e7bd      	b.n	800156a <__aeabi_ddiv+0x596>
 80015ee:	2300      	movs	r3, #0
 80015f0:	e708      	b.n	8001404 <__aeabi_ddiv+0x430>
 80015f2:	46c0      	nop			@ (mov r8, r8)
 80015f4:	000007ff 	.word	0x000007ff
 80015f8:	0000043e 	.word	0x0000043e
 80015fc:	0000041e 	.word	0x0000041e
 8001600:	000003ff 	.word	0x000003ff
 8001604:	fffffc02 	.word	0xfffffc02

08001608 <__eqdf2>:
 8001608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160a:	4657      	mov	r7, sl
 800160c:	46de      	mov	lr, fp
 800160e:	464e      	mov	r6, r9
 8001610:	4645      	mov	r5, r8
 8001612:	b5e0      	push	{r5, r6, r7, lr}
 8001614:	000d      	movs	r5, r1
 8001616:	0004      	movs	r4, r0
 8001618:	0fe8      	lsrs	r0, r5, #31
 800161a:	4683      	mov	fp, r0
 800161c:	0309      	lsls	r1, r1, #12
 800161e:	0fd8      	lsrs	r0, r3, #31
 8001620:	0b09      	lsrs	r1, r1, #12
 8001622:	4682      	mov	sl, r0
 8001624:	4819      	ldr	r0, [pc, #100]	@ (800168c <__eqdf2+0x84>)
 8001626:	468c      	mov	ip, r1
 8001628:	031f      	lsls	r7, r3, #12
 800162a:	0069      	lsls	r1, r5, #1
 800162c:	005e      	lsls	r6, r3, #1
 800162e:	0d49      	lsrs	r1, r1, #21
 8001630:	0b3f      	lsrs	r7, r7, #12
 8001632:	0d76      	lsrs	r6, r6, #21
 8001634:	4281      	cmp	r1, r0
 8001636:	d018      	beq.n	800166a <__eqdf2+0x62>
 8001638:	4286      	cmp	r6, r0
 800163a:	d00f      	beq.n	800165c <__eqdf2+0x54>
 800163c:	2001      	movs	r0, #1
 800163e:	42b1      	cmp	r1, r6
 8001640:	d10d      	bne.n	800165e <__eqdf2+0x56>
 8001642:	45bc      	cmp	ip, r7
 8001644:	d10b      	bne.n	800165e <__eqdf2+0x56>
 8001646:	4294      	cmp	r4, r2
 8001648:	d109      	bne.n	800165e <__eqdf2+0x56>
 800164a:	45d3      	cmp	fp, sl
 800164c:	d01c      	beq.n	8001688 <__eqdf2+0x80>
 800164e:	2900      	cmp	r1, #0
 8001650:	d105      	bne.n	800165e <__eqdf2+0x56>
 8001652:	4660      	mov	r0, ip
 8001654:	4320      	orrs	r0, r4
 8001656:	1e43      	subs	r3, r0, #1
 8001658:	4198      	sbcs	r0, r3
 800165a:	e000      	b.n	800165e <__eqdf2+0x56>
 800165c:	2001      	movs	r0, #1
 800165e:	bcf0      	pop	{r4, r5, r6, r7}
 8001660:	46bb      	mov	fp, r7
 8001662:	46b2      	mov	sl, r6
 8001664:	46a9      	mov	r9, r5
 8001666:	46a0      	mov	r8, r4
 8001668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800166a:	2001      	movs	r0, #1
 800166c:	428e      	cmp	r6, r1
 800166e:	d1f6      	bne.n	800165e <__eqdf2+0x56>
 8001670:	4661      	mov	r1, ip
 8001672:	4339      	orrs	r1, r7
 8001674:	000f      	movs	r7, r1
 8001676:	4317      	orrs	r7, r2
 8001678:	4327      	orrs	r7, r4
 800167a:	d1f0      	bne.n	800165e <__eqdf2+0x56>
 800167c:	465b      	mov	r3, fp
 800167e:	4652      	mov	r2, sl
 8001680:	1a98      	subs	r0, r3, r2
 8001682:	1e43      	subs	r3, r0, #1
 8001684:	4198      	sbcs	r0, r3
 8001686:	e7ea      	b.n	800165e <__eqdf2+0x56>
 8001688:	2000      	movs	r0, #0
 800168a:	e7e8      	b.n	800165e <__eqdf2+0x56>
 800168c:	000007ff 	.word	0x000007ff

08001690 <__gedf2>:
 8001690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001692:	4657      	mov	r7, sl
 8001694:	464e      	mov	r6, r9
 8001696:	4645      	mov	r5, r8
 8001698:	46de      	mov	lr, fp
 800169a:	b5e0      	push	{r5, r6, r7, lr}
 800169c:	000d      	movs	r5, r1
 800169e:	030f      	lsls	r7, r1, #12
 80016a0:	0b39      	lsrs	r1, r7, #12
 80016a2:	b083      	sub	sp, #12
 80016a4:	0004      	movs	r4, r0
 80016a6:	4680      	mov	r8, r0
 80016a8:	9101      	str	r1, [sp, #4]
 80016aa:	0058      	lsls	r0, r3, #1
 80016ac:	0fe9      	lsrs	r1, r5, #31
 80016ae:	4f31      	ldr	r7, [pc, #196]	@ (8001774 <__gedf2+0xe4>)
 80016b0:	0d40      	lsrs	r0, r0, #21
 80016b2:	468c      	mov	ip, r1
 80016b4:	006e      	lsls	r6, r5, #1
 80016b6:	0319      	lsls	r1, r3, #12
 80016b8:	4682      	mov	sl, r0
 80016ba:	4691      	mov	r9, r2
 80016bc:	0d76      	lsrs	r6, r6, #21
 80016be:	0b09      	lsrs	r1, r1, #12
 80016c0:	0fd8      	lsrs	r0, r3, #31
 80016c2:	42be      	cmp	r6, r7
 80016c4:	d01f      	beq.n	8001706 <__gedf2+0x76>
 80016c6:	45ba      	cmp	sl, r7
 80016c8:	d00f      	beq.n	80016ea <__gedf2+0x5a>
 80016ca:	2e00      	cmp	r6, #0
 80016cc:	d12f      	bne.n	800172e <__gedf2+0x9e>
 80016ce:	4655      	mov	r5, sl
 80016d0:	9e01      	ldr	r6, [sp, #4]
 80016d2:	4334      	orrs	r4, r6
 80016d4:	2d00      	cmp	r5, #0
 80016d6:	d127      	bne.n	8001728 <__gedf2+0x98>
 80016d8:	430a      	orrs	r2, r1
 80016da:	d03a      	beq.n	8001752 <__gedf2+0xc2>
 80016dc:	2c00      	cmp	r4, #0
 80016de:	d145      	bne.n	800176c <__gedf2+0xdc>
 80016e0:	2800      	cmp	r0, #0
 80016e2:	d11a      	bne.n	800171a <__gedf2+0x8a>
 80016e4:	2001      	movs	r0, #1
 80016e6:	4240      	negs	r0, r0
 80016e8:	e017      	b.n	800171a <__gedf2+0x8a>
 80016ea:	4311      	orrs	r1, r2
 80016ec:	d13b      	bne.n	8001766 <__gedf2+0xd6>
 80016ee:	2e00      	cmp	r6, #0
 80016f0:	d102      	bne.n	80016f8 <__gedf2+0x68>
 80016f2:	9f01      	ldr	r7, [sp, #4]
 80016f4:	4327      	orrs	r7, r4
 80016f6:	d0f3      	beq.n	80016e0 <__gedf2+0x50>
 80016f8:	4584      	cmp	ip, r0
 80016fa:	d109      	bne.n	8001710 <__gedf2+0x80>
 80016fc:	4663      	mov	r3, ip
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f0      	beq.n	80016e4 <__gedf2+0x54>
 8001702:	4660      	mov	r0, ip
 8001704:	e009      	b.n	800171a <__gedf2+0x8a>
 8001706:	9f01      	ldr	r7, [sp, #4]
 8001708:	4327      	orrs	r7, r4
 800170a:	d12c      	bne.n	8001766 <__gedf2+0xd6>
 800170c:	45b2      	cmp	sl, r6
 800170e:	d024      	beq.n	800175a <__gedf2+0xca>
 8001710:	4663      	mov	r3, ip
 8001712:	2002      	movs	r0, #2
 8001714:	3b01      	subs	r3, #1
 8001716:	4018      	ands	r0, r3
 8001718:	3801      	subs	r0, #1
 800171a:	b003      	add	sp, #12
 800171c:	bcf0      	pop	{r4, r5, r6, r7}
 800171e:	46bb      	mov	fp, r7
 8001720:	46b2      	mov	sl, r6
 8001722:	46a9      	mov	r9, r5
 8001724:	46a0      	mov	r8, r4
 8001726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001728:	2c00      	cmp	r4, #0
 800172a:	d0d9      	beq.n	80016e0 <__gedf2+0x50>
 800172c:	e7e4      	b.n	80016f8 <__gedf2+0x68>
 800172e:	4654      	mov	r4, sl
 8001730:	2c00      	cmp	r4, #0
 8001732:	d0ed      	beq.n	8001710 <__gedf2+0x80>
 8001734:	4584      	cmp	ip, r0
 8001736:	d1eb      	bne.n	8001710 <__gedf2+0x80>
 8001738:	4556      	cmp	r6, sl
 800173a:	dce9      	bgt.n	8001710 <__gedf2+0x80>
 800173c:	dbde      	blt.n	80016fc <__gedf2+0x6c>
 800173e:	9b01      	ldr	r3, [sp, #4]
 8001740:	428b      	cmp	r3, r1
 8001742:	d8e5      	bhi.n	8001710 <__gedf2+0x80>
 8001744:	d1da      	bne.n	80016fc <__gedf2+0x6c>
 8001746:	45c8      	cmp	r8, r9
 8001748:	d8e2      	bhi.n	8001710 <__gedf2+0x80>
 800174a:	2000      	movs	r0, #0
 800174c:	45c8      	cmp	r8, r9
 800174e:	d2e4      	bcs.n	800171a <__gedf2+0x8a>
 8001750:	e7d4      	b.n	80016fc <__gedf2+0x6c>
 8001752:	2000      	movs	r0, #0
 8001754:	2c00      	cmp	r4, #0
 8001756:	d0e0      	beq.n	800171a <__gedf2+0x8a>
 8001758:	e7da      	b.n	8001710 <__gedf2+0x80>
 800175a:	4311      	orrs	r1, r2
 800175c:	d103      	bne.n	8001766 <__gedf2+0xd6>
 800175e:	4584      	cmp	ip, r0
 8001760:	d1d6      	bne.n	8001710 <__gedf2+0x80>
 8001762:	2000      	movs	r0, #0
 8001764:	e7d9      	b.n	800171a <__gedf2+0x8a>
 8001766:	2002      	movs	r0, #2
 8001768:	4240      	negs	r0, r0
 800176a:	e7d6      	b.n	800171a <__gedf2+0x8a>
 800176c:	4584      	cmp	ip, r0
 800176e:	d0e6      	beq.n	800173e <__gedf2+0xae>
 8001770:	e7ce      	b.n	8001710 <__gedf2+0x80>
 8001772:	46c0      	nop			@ (mov r8, r8)
 8001774:	000007ff 	.word	0x000007ff

08001778 <__ledf2>:
 8001778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177a:	4657      	mov	r7, sl
 800177c:	464e      	mov	r6, r9
 800177e:	4645      	mov	r5, r8
 8001780:	46de      	mov	lr, fp
 8001782:	b5e0      	push	{r5, r6, r7, lr}
 8001784:	000d      	movs	r5, r1
 8001786:	030f      	lsls	r7, r1, #12
 8001788:	0004      	movs	r4, r0
 800178a:	4680      	mov	r8, r0
 800178c:	0fe8      	lsrs	r0, r5, #31
 800178e:	0b39      	lsrs	r1, r7, #12
 8001790:	4684      	mov	ip, r0
 8001792:	b083      	sub	sp, #12
 8001794:	0058      	lsls	r0, r3, #1
 8001796:	4f30      	ldr	r7, [pc, #192]	@ (8001858 <__ledf2+0xe0>)
 8001798:	0d40      	lsrs	r0, r0, #21
 800179a:	9101      	str	r1, [sp, #4]
 800179c:	031e      	lsls	r6, r3, #12
 800179e:	0069      	lsls	r1, r5, #1
 80017a0:	4682      	mov	sl, r0
 80017a2:	4691      	mov	r9, r2
 80017a4:	0d49      	lsrs	r1, r1, #21
 80017a6:	0b36      	lsrs	r6, r6, #12
 80017a8:	0fd8      	lsrs	r0, r3, #31
 80017aa:	42b9      	cmp	r1, r7
 80017ac:	d020      	beq.n	80017f0 <__ledf2+0x78>
 80017ae:	45ba      	cmp	sl, r7
 80017b0:	d00f      	beq.n	80017d2 <__ledf2+0x5a>
 80017b2:	2900      	cmp	r1, #0
 80017b4:	d12b      	bne.n	800180e <__ledf2+0x96>
 80017b6:	9901      	ldr	r1, [sp, #4]
 80017b8:	430c      	orrs	r4, r1
 80017ba:	4651      	mov	r1, sl
 80017bc:	2900      	cmp	r1, #0
 80017be:	d137      	bne.n	8001830 <__ledf2+0xb8>
 80017c0:	4332      	orrs	r2, r6
 80017c2:	d038      	beq.n	8001836 <__ledf2+0xbe>
 80017c4:	2c00      	cmp	r4, #0
 80017c6:	d144      	bne.n	8001852 <__ledf2+0xda>
 80017c8:	2800      	cmp	r0, #0
 80017ca:	d119      	bne.n	8001800 <__ledf2+0x88>
 80017cc:	2001      	movs	r0, #1
 80017ce:	4240      	negs	r0, r0
 80017d0:	e016      	b.n	8001800 <__ledf2+0x88>
 80017d2:	4316      	orrs	r6, r2
 80017d4:	d113      	bne.n	80017fe <__ledf2+0x86>
 80017d6:	2900      	cmp	r1, #0
 80017d8:	d102      	bne.n	80017e0 <__ledf2+0x68>
 80017da:	9f01      	ldr	r7, [sp, #4]
 80017dc:	4327      	orrs	r7, r4
 80017de:	d0f3      	beq.n	80017c8 <__ledf2+0x50>
 80017e0:	4584      	cmp	ip, r0
 80017e2:	d020      	beq.n	8001826 <__ledf2+0xae>
 80017e4:	4663      	mov	r3, ip
 80017e6:	2002      	movs	r0, #2
 80017e8:	3b01      	subs	r3, #1
 80017ea:	4018      	ands	r0, r3
 80017ec:	3801      	subs	r0, #1
 80017ee:	e007      	b.n	8001800 <__ledf2+0x88>
 80017f0:	9f01      	ldr	r7, [sp, #4]
 80017f2:	4327      	orrs	r7, r4
 80017f4:	d103      	bne.n	80017fe <__ledf2+0x86>
 80017f6:	458a      	cmp	sl, r1
 80017f8:	d1f4      	bne.n	80017e4 <__ledf2+0x6c>
 80017fa:	4316      	orrs	r6, r2
 80017fc:	d01f      	beq.n	800183e <__ledf2+0xc6>
 80017fe:	2002      	movs	r0, #2
 8001800:	b003      	add	sp, #12
 8001802:	bcf0      	pop	{r4, r5, r6, r7}
 8001804:	46bb      	mov	fp, r7
 8001806:	46b2      	mov	sl, r6
 8001808:	46a9      	mov	r9, r5
 800180a:	46a0      	mov	r8, r4
 800180c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800180e:	4654      	mov	r4, sl
 8001810:	2c00      	cmp	r4, #0
 8001812:	d0e7      	beq.n	80017e4 <__ledf2+0x6c>
 8001814:	4584      	cmp	ip, r0
 8001816:	d1e5      	bne.n	80017e4 <__ledf2+0x6c>
 8001818:	4551      	cmp	r1, sl
 800181a:	dce3      	bgt.n	80017e4 <__ledf2+0x6c>
 800181c:	db03      	blt.n	8001826 <__ledf2+0xae>
 800181e:	9b01      	ldr	r3, [sp, #4]
 8001820:	42b3      	cmp	r3, r6
 8001822:	d8df      	bhi.n	80017e4 <__ledf2+0x6c>
 8001824:	d00f      	beq.n	8001846 <__ledf2+0xce>
 8001826:	4663      	mov	r3, ip
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0cf      	beq.n	80017cc <__ledf2+0x54>
 800182c:	4660      	mov	r0, ip
 800182e:	e7e7      	b.n	8001800 <__ledf2+0x88>
 8001830:	2c00      	cmp	r4, #0
 8001832:	d0c9      	beq.n	80017c8 <__ledf2+0x50>
 8001834:	e7d4      	b.n	80017e0 <__ledf2+0x68>
 8001836:	2000      	movs	r0, #0
 8001838:	2c00      	cmp	r4, #0
 800183a:	d0e1      	beq.n	8001800 <__ledf2+0x88>
 800183c:	e7d2      	b.n	80017e4 <__ledf2+0x6c>
 800183e:	4584      	cmp	ip, r0
 8001840:	d1d0      	bne.n	80017e4 <__ledf2+0x6c>
 8001842:	2000      	movs	r0, #0
 8001844:	e7dc      	b.n	8001800 <__ledf2+0x88>
 8001846:	45c8      	cmp	r8, r9
 8001848:	d8cc      	bhi.n	80017e4 <__ledf2+0x6c>
 800184a:	2000      	movs	r0, #0
 800184c:	45c8      	cmp	r8, r9
 800184e:	d2d7      	bcs.n	8001800 <__ledf2+0x88>
 8001850:	e7e9      	b.n	8001826 <__ledf2+0xae>
 8001852:	4584      	cmp	ip, r0
 8001854:	d0e3      	beq.n	800181e <__ledf2+0xa6>
 8001856:	e7c5      	b.n	80017e4 <__ledf2+0x6c>
 8001858:	000007ff 	.word	0x000007ff

0800185c <__aeabi_dmul>:
 800185c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800185e:	4657      	mov	r7, sl
 8001860:	46de      	mov	lr, fp
 8001862:	464e      	mov	r6, r9
 8001864:	4645      	mov	r5, r8
 8001866:	b5e0      	push	{r5, r6, r7, lr}
 8001868:	001f      	movs	r7, r3
 800186a:	030b      	lsls	r3, r1, #12
 800186c:	0b1b      	lsrs	r3, r3, #12
 800186e:	0016      	movs	r6, r2
 8001870:	469a      	mov	sl, r3
 8001872:	0fca      	lsrs	r2, r1, #31
 8001874:	004b      	lsls	r3, r1, #1
 8001876:	0004      	movs	r4, r0
 8001878:	4693      	mov	fp, r2
 800187a:	b087      	sub	sp, #28
 800187c:	0d5b      	lsrs	r3, r3, #21
 800187e:	d100      	bne.n	8001882 <__aeabi_dmul+0x26>
 8001880:	e0d5      	b.n	8001a2e <__aeabi_dmul+0x1d2>
 8001882:	4abb      	ldr	r2, [pc, #748]	@ (8001b70 <__aeabi_dmul+0x314>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d100      	bne.n	800188a <__aeabi_dmul+0x2e>
 8001888:	e0f8      	b.n	8001a7c <__aeabi_dmul+0x220>
 800188a:	4651      	mov	r1, sl
 800188c:	0f42      	lsrs	r2, r0, #29
 800188e:	00c9      	lsls	r1, r1, #3
 8001890:	430a      	orrs	r2, r1
 8001892:	2180      	movs	r1, #128	@ 0x80
 8001894:	0409      	lsls	r1, r1, #16
 8001896:	4311      	orrs	r1, r2
 8001898:	00c2      	lsls	r2, r0, #3
 800189a:	4691      	mov	r9, r2
 800189c:	4ab5      	ldr	r2, [pc, #724]	@ (8001b74 <__aeabi_dmul+0x318>)
 800189e:	468a      	mov	sl, r1
 80018a0:	189d      	adds	r5, r3, r2
 80018a2:	2300      	movs	r3, #0
 80018a4:	4698      	mov	r8, r3
 80018a6:	9302      	str	r3, [sp, #8]
 80018a8:	033c      	lsls	r4, r7, #12
 80018aa:	007b      	lsls	r3, r7, #1
 80018ac:	0ffa      	lsrs	r2, r7, #31
 80018ae:	0030      	movs	r0, r6
 80018b0:	0b24      	lsrs	r4, r4, #12
 80018b2:	0d5b      	lsrs	r3, r3, #21
 80018b4:	9200      	str	r2, [sp, #0]
 80018b6:	d100      	bne.n	80018ba <__aeabi_dmul+0x5e>
 80018b8:	e096      	b.n	80019e8 <__aeabi_dmul+0x18c>
 80018ba:	4aad      	ldr	r2, [pc, #692]	@ (8001b70 <__aeabi_dmul+0x314>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d031      	beq.n	8001924 <__aeabi_dmul+0xc8>
 80018c0:	0f72      	lsrs	r2, r6, #29
 80018c2:	00e4      	lsls	r4, r4, #3
 80018c4:	4322      	orrs	r2, r4
 80018c6:	2480      	movs	r4, #128	@ 0x80
 80018c8:	0424      	lsls	r4, r4, #16
 80018ca:	4314      	orrs	r4, r2
 80018cc:	4aa9      	ldr	r2, [pc, #676]	@ (8001b74 <__aeabi_dmul+0x318>)
 80018ce:	00f0      	lsls	r0, r6, #3
 80018d0:	4694      	mov	ip, r2
 80018d2:	4463      	add	r3, ip
 80018d4:	195b      	adds	r3, r3, r5
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	9201      	str	r2, [sp, #4]
 80018da:	4642      	mov	r2, r8
 80018dc:	2600      	movs	r6, #0
 80018de:	2a0a      	cmp	r2, #10
 80018e0:	dc42      	bgt.n	8001968 <__aeabi_dmul+0x10c>
 80018e2:	465a      	mov	r2, fp
 80018e4:	9900      	ldr	r1, [sp, #0]
 80018e6:	404a      	eors	r2, r1
 80018e8:	4693      	mov	fp, r2
 80018ea:	4642      	mov	r2, r8
 80018ec:	2a02      	cmp	r2, #2
 80018ee:	dc32      	bgt.n	8001956 <__aeabi_dmul+0xfa>
 80018f0:	3a01      	subs	r2, #1
 80018f2:	2a01      	cmp	r2, #1
 80018f4:	d900      	bls.n	80018f8 <__aeabi_dmul+0x9c>
 80018f6:	e149      	b.n	8001b8c <__aeabi_dmul+0x330>
 80018f8:	2e02      	cmp	r6, #2
 80018fa:	d100      	bne.n	80018fe <__aeabi_dmul+0xa2>
 80018fc:	e0ca      	b.n	8001a94 <__aeabi_dmul+0x238>
 80018fe:	2e01      	cmp	r6, #1
 8001900:	d13d      	bne.n	800197e <__aeabi_dmul+0x122>
 8001902:	2300      	movs	r3, #0
 8001904:	2400      	movs	r4, #0
 8001906:	2200      	movs	r2, #0
 8001908:	0010      	movs	r0, r2
 800190a:	465a      	mov	r2, fp
 800190c:	051b      	lsls	r3, r3, #20
 800190e:	4323      	orrs	r3, r4
 8001910:	07d2      	lsls	r2, r2, #31
 8001912:	4313      	orrs	r3, r2
 8001914:	0019      	movs	r1, r3
 8001916:	b007      	add	sp, #28
 8001918:	bcf0      	pop	{r4, r5, r6, r7}
 800191a:	46bb      	mov	fp, r7
 800191c:	46b2      	mov	sl, r6
 800191e:	46a9      	mov	r9, r5
 8001920:	46a0      	mov	r8, r4
 8001922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001924:	4b92      	ldr	r3, [pc, #584]	@ (8001b70 <__aeabi_dmul+0x314>)
 8001926:	4326      	orrs	r6, r4
 8001928:	18eb      	adds	r3, r5, r3
 800192a:	2e00      	cmp	r6, #0
 800192c:	d100      	bne.n	8001930 <__aeabi_dmul+0xd4>
 800192e:	e0bb      	b.n	8001aa8 <__aeabi_dmul+0x24c>
 8001930:	2203      	movs	r2, #3
 8001932:	4641      	mov	r1, r8
 8001934:	4311      	orrs	r1, r2
 8001936:	465a      	mov	r2, fp
 8001938:	4688      	mov	r8, r1
 800193a:	9900      	ldr	r1, [sp, #0]
 800193c:	404a      	eors	r2, r1
 800193e:	2180      	movs	r1, #128	@ 0x80
 8001940:	0109      	lsls	r1, r1, #4
 8001942:	468c      	mov	ip, r1
 8001944:	0029      	movs	r1, r5
 8001946:	4461      	add	r1, ip
 8001948:	9101      	str	r1, [sp, #4]
 800194a:	4641      	mov	r1, r8
 800194c:	290a      	cmp	r1, #10
 800194e:	dd00      	ble.n	8001952 <__aeabi_dmul+0xf6>
 8001950:	e233      	b.n	8001dba <__aeabi_dmul+0x55e>
 8001952:	4693      	mov	fp, r2
 8001954:	2603      	movs	r6, #3
 8001956:	4642      	mov	r2, r8
 8001958:	2701      	movs	r7, #1
 800195a:	4097      	lsls	r7, r2
 800195c:	21a6      	movs	r1, #166	@ 0xa6
 800195e:	003a      	movs	r2, r7
 8001960:	00c9      	lsls	r1, r1, #3
 8001962:	400a      	ands	r2, r1
 8001964:	420f      	tst	r7, r1
 8001966:	d031      	beq.n	80019cc <__aeabi_dmul+0x170>
 8001968:	9e02      	ldr	r6, [sp, #8]
 800196a:	2e02      	cmp	r6, #2
 800196c:	d100      	bne.n	8001970 <__aeabi_dmul+0x114>
 800196e:	e235      	b.n	8001ddc <__aeabi_dmul+0x580>
 8001970:	2e03      	cmp	r6, #3
 8001972:	d100      	bne.n	8001976 <__aeabi_dmul+0x11a>
 8001974:	e1d2      	b.n	8001d1c <__aeabi_dmul+0x4c0>
 8001976:	4654      	mov	r4, sl
 8001978:	4648      	mov	r0, r9
 800197a:	2e01      	cmp	r6, #1
 800197c:	d0c1      	beq.n	8001902 <__aeabi_dmul+0xa6>
 800197e:	9a01      	ldr	r2, [sp, #4]
 8001980:	4b7d      	ldr	r3, [pc, #500]	@ (8001b78 <__aeabi_dmul+0x31c>)
 8001982:	4694      	mov	ip, r2
 8001984:	4463      	add	r3, ip
 8001986:	2b00      	cmp	r3, #0
 8001988:	dc00      	bgt.n	800198c <__aeabi_dmul+0x130>
 800198a:	e0c0      	b.n	8001b0e <__aeabi_dmul+0x2b2>
 800198c:	0742      	lsls	r2, r0, #29
 800198e:	d009      	beq.n	80019a4 <__aeabi_dmul+0x148>
 8001990:	220f      	movs	r2, #15
 8001992:	4002      	ands	r2, r0
 8001994:	2a04      	cmp	r2, #4
 8001996:	d005      	beq.n	80019a4 <__aeabi_dmul+0x148>
 8001998:	1d02      	adds	r2, r0, #4
 800199a:	4282      	cmp	r2, r0
 800199c:	4180      	sbcs	r0, r0
 800199e:	4240      	negs	r0, r0
 80019a0:	1824      	adds	r4, r4, r0
 80019a2:	0010      	movs	r0, r2
 80019a4:	01e2      	lsls	r2, r4, #7
 80019a6:	d506      	bpl.n	80019b6 <__aeabi_dmul+0x15a>
 80019a8:	4b74      	ldr	r3, [pc, #464]	@ (8001b7c <__aeabi_dmul+0x320>)
 80019aa:	9a01      	ldr	r2, [sp, #4]
 80019ac:	401c      	ands	r4, r3
 80019ae:	2380      	movs	r3, #128	@ 0x80
 80019b0:	4694      	mov	ip, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4463      	add	r3, ip
 80019b6:	4a72      	ldr	r2, [pc, #456]	@ (8001b80 <__aeabi_dmul+0x324>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	dc6b      	bgt.n	8001a94 <__aeabi_dmul+0x238>
 80019bc:	0762      	lsls	r2, r4, #29
 80019be:	08c0      	lsrs	r0, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	4302      	orrs	r2, r0
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e79d      	b.n	8001908 <__aeabi_dmul+0xac>
 80019cc:	2190      	movs	r1, #144	@ 0x90
 80019ce:	0089      	lsls	r1, r1, #2
 80019d0:	420f      	tst	r7, r1
 80019d2:	d163      	bne.n	8001a9c <__aeabi_dmul+0x240>
 80019d4:	2288      	movs	r2, #136	@ 0x88
 80019d6:	423a      	tst	r2, r7
 80019d8:	d100      	bne.n	80019dc <__aeabi_dmul+0x180>
 80019da:	e0d7      	b.n	8001b8c <__aeabi_dmul+0x330>
 80019dc:	9b00      	ldr	r3, [sp, #0]
 80019de:	46a2      	mov	sl, r4
 80019e0:	469b      	mov	fp, r3
 80019e2:	4681      	mov	r9, r0
 80019e4:	9602      	str	r6, [sp, #8]
 80019e6:	e7bf      	b.n	8001968 <__aeabi_dmul+0x10c>
 80019e8:	0023      	movs	r3, r4
 80019ea:	4333      	orrs	r3, r6
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dmul+0x194>
 80019ee:	e07f      	b.n	8001af0 <__aeabi_dmul+0x294>
 80019f0:	2c00      	cmp	r4, #0
 80019f2:	d100      	bne.n	80019f6 <__aeabi_dmul+0x19a>
 80019f4:	e1ad      	b.n	8001d52 <__aeabi_dmul+0x4f6>
 80019f6:	0020      	movs	r0, r4
 80019f8:	f000 feb0 	bl	800275c <__clzsi2>
 80019fc:	0002      	movs	r2, r0
 80019fe:	0003      	movs	r3, r0
 8001a00:	3a0b      	subs	r2, #11
 8001a02:	201d      	movs	r0, #29
 8001a04:	0019      	movs	r1, r3
 8001a06:	1a82      	subs	r2, r0, r2
 8001a08:	0030      	movs	r0, r6
 8001a0a:	3908      	subs	r1, #8
 8001a0c:	40d0      	lsrs	r0, r2
 8001a0e:	408c      	lsls	r4, r1
 8001a10:	4304      	orrs	r4, r0
 8001a12:	0030      	movs	r0, r6
 8001a14:	4088      	lsls	r0, r1
 8001a16:	4a5b      	ldr	r2, [pc, #364]	@ (8001b84 <__aeabi_dmul+0x328>)
 8001a18:	1aeb      	subs	r3, r5, r3
 8001a1a:	4694      	mov	ip, r2
 8001a1c:	4463      	add	r3, ip
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	9201      	str	r2, [sp, #4]
 8001a22:	4642      	mov	r2, r8
 8001a24:	2600      	movs	r6, #0
 8001a26:	2a0a      	cmp	r2, #10
 8001a28:	dc00      	bgt.n	8001a2c <__aeabi_dmul+0x1d0>
 8001a2a:	e75a      	b.n	80018e2 <__aeabi_dmul+0x86>
 8001a2c:	e79c      	b.n	8001968 <__aeabi_dmul+0x10c>
 8001a2e:	4653      	mov	r3, sl
 8001a30:	4303      	orrs	r3, r0
 8001a32:	4699      	mov	r9, r3
 8001a34:	d054      	beq.n	8001ae0 <__aeabi_dmul+0x284>
 8001a36:	4653      	mov	r3, sl
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d100      	bne.n	8001a3e <__aeabi_dmul+0x1e2>
 8001a3c:	e177      	b.n	8001d2e <__aeabi_dmul+0x4d2>
 8001a3e:	4650      	mov	r0, sl
 8001a40:	f000 fe8c 	bl	800275c <__clzsi2>
 8001a44:	230b      	movs	r3, #11
 8001a46:	425b      	negs	r3, r3
 8001a48:	469c      	mov	ip, r3
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	4484      	add	ip, r0
 8001a4e:	0011      	movs	r1, r2
 8001a50:	4650      	mov	r0, sl
 8001a52:	3908      	subs	r1, #8
 8001a54:	4088      	lsls	r0, r1
 8001a56:	231d      	movs	r3, #29
 8001a58:	4680      	mov	r8, r0
 8001a5a:	4660      	mov	r0, ip
 8001a5c:	1a1b      	subs	r3, r3, r0
 8001a5e:	0020      	movs	r0, r4
 8001a60:	40d8      	lsrs	r0, r3
 8001a62:	0003      	movs	r3, r0
 8001a64:	4640      	mov	r0, r8
 8001a66:	4303      	orrs	r3, r0
 8001a68:	469a      	mov	sl, r3
 8001a6a:	0023      	movs	r3, r4
 8001a6c:	408b      	lsls	r3, r1
 8001a6e:	4699      	mov	r9, r3
 8001a70:	2300      	movs	r3, #0
 8001a72:	4d44      	ldr	r5, [pc, #272]	@ (8001b84 <__aeabi_dmul+0x328>)
 8001a74:	4698      	mov	r8, r3
 8001a76:	1aad      	subs	r5, r5, r2
 8001a78:	9302      	str	r3, [sp, #8]
 8001a7a:	e715      	b.n	80018a8 <__aeabi_dmul+0x4c>
 8001a7c:	4652      	mov	r2, sl
 8001a7e:	4302      	orrs	r2, r0
 8001a80:	4691      	mov	r9, r2
 8001a82:	d126      	bne.n	8001ad2 <__aeabi_dmul+0x276>
 8001a84:	2200      	movs	r2, #0
 8001a86:	001d      	movs	r5, r3
 8001a88:	2302      	movs	r3, #2
 8001a8a:	4692      	mov	sl, r2
 8001a8c:	3208      	adds	r2, #8
 8001a8e:	4690      	mov	r8, r2
 8001a90:	9302      	str	r3, [sp, #8]
 8001a92:	e709      	b.n	80018a8 <__aeabi_dmul+0x4c>
 8001a94:	2400      	movs	r4, #0
 8001a96:	2200      	movs	r2, #0
 8001a98:	4b35      	ldr	r3, [pc, #212]	@ (8001b70 <__aeabi_dmul+0x314>)
 8001a9a:	e735      	b.n	8001908 <__aeabi_dmul+0xac>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2480      	movs	r4, #128	@ 0x80
 8001aa0:	469b      	mov	fp, r3
 8001aa2:	0324      	lsls	r4, r4, #12
 8001aa4:	4b32      	ldr	r3, [pc, #200]	@ (8001b70 <__aeabi_dmul+0x314>)
 8001aa6:	e72f      	b.n	8001908 <__aeabi_dmul+0xac>
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	4641      	mov	r1, r8
 8001aac:	4311      	orrs	r1, r2
 8001aae:	2280      	movs	r2, #128	@ 0x80
 8001ab0:	0112      	lsls	r2, r2, #4
 8001ab2:	4694      	mov	ip, r2
 8001ab4:	002a      	movs	r2, r5
 8001ab6:	4462      	add	r2, ip
 8001ab8:	4688      	mov	r8, r1
 8001aba:	9201      	str	r2, [sp, #4]
 8001abc:	290a      	cmp	r1, #10
 8001abe:	dd00      	ble.n	8001ac2 <__aeabi_dmul+0x266>
 8001ac0:	e752      	b.n	8001968 <__aeabi_dmul+0x10c>
 8001ac2:	465a      	mov	r2, fp
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	9900      	ldr	r1, [sp, #0]
 8001ac8:	0004      	movs	r4, r0
 8001aca:	404a      	eors	r2, r1
 8001acc:	4693      	mov	fp, r2
 8001ace:	2602      	movs	r6, #2
 8001ad0:	e70b      	b.n	80018ea <__aeabi_dmul+0x8e>
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	001d      	movs	r5, r3
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	4681      	mov	r9, r0
 8001ada:	4690      	mov	r8, r2
 8001adc:	9302      	str	r3, [sp, #8]
 8001ade:	e6e3      	b.n	80018a8 <__aeabi_dmul+0x4c>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	469a      	mov	sl, r3
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	4698      	mov	r8, r3
 8001ae8:	3b03      	subs	r3, #3
 8001aea:	2500      	movs	r5, #0
 8001aec:	9302      	str	r3, [sp, #8]
 8001aee:	e6db      	b.n	80018a8 <__aeabi_dmul+0x4c>
 8001af0:	4642      	mov	r2, r8
 8001af2:	3301      	adds	r3, #1
 8001af4:	431a      	orrs	r2, r3
 8001af6:	002b      	movs	r3, r5
 8001af8:	4690      	mov	r8, r2
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	9201      	str	r2, [sp, #4]
 8001afe:	4642      	mov	r2, r8
 8001b00:	2400      	movs	r4, #0
 8001b02:	2000      	movs	r0, #0
 8001b04:	2601      	movs	r6, #1
 8001b06:	2a0a      	cmp	r2, #10
 8001b08:	dc00      	bgt.n	8001b0c <__aeabi_dmul+0x2b0>
 8001b0a:	e6ea      	b.n	80018e2 <__aeabi_dmul+0x86>
 8001b0c:	e72c      	b.n	8001968 <__aeabi_dmul+0x10c>
 8001b0e:	2201      	movs	r2, #1
 8001b10:	1ad2      	subs	r2, r2, r3
 8001b12:	2a38      	cmp	r2, #56	@ 0x38
 8001b14:	dd00      	ble.n	8001b18 <__aeabi_dmul+0x2bc>
 8001b16:	e6f4      	b.n	8001902 <__aeabi_dmul+0xa6>
 8001b18:	2a1f      	cmp	r2, #31
 8001b1a:	dc00      	bgt.n	8001b1e <__aeabi_dmul+0x2c2>
 8001b1c:	e12a      	b.n	8001d74 <__aeabi_dmul+0x518>
 8001b1e:	211f      	movs	r1, #31
 8001b20:	4249      	negs	r1, r1
 8001b22:	1acb      	subs	r3, r1, r3
 8001b24:	0021      	movs	r1, r4
 8001b26:	40d9      	lsrs	r1, r3
 8001b28:	000b      	movs	r3, r1
 8001b2a:	2a20      	cmp	r2, #32
 8001b2c:	d005      	beq.n	8001b3a <__aeabi_dmul+0x2de>
 8001b2e:	4a16      	ldr	r2, [pc, #88]	@ (8001b88 <__aeabi_dmul+0x32c>)
 8001b30:	9d01      	ldr	r5, [sp, #4]
 8001b32:	4694      	mov	ip, r2
 8001b34:	4465      	add	r5, ip
 8001b36:	40ac      	lsls	r4, r5
 8001b38:	4320      	orrs	r0, r4
 8001b3a:	1e42      	subs	r2, r0, #1
 8001b3c:	4190      	sbcs	r0, r2
 8001b3e:	4318      	orrs	r0, r3
 8001b40:	2307      	movs	r3, #7
 8001b42:	0019      	movs	r1, r3
 8001b44:	2400      	movs	r4, #0
 8001b46:	4001      	ands	r1, r0
 8001b48:	4203      	tst	r3, r0
 8001b4a:	d00c      	beq.n	8001b66 <__aeabi_dmul+0x30a>
 8001b4c:	230f      	movs	r3, #15
 8001b4e:	4003      	ands	r3, r0
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d100      	bne.n	8001b56 <__aeabi_dmul+0x2fa>
 8001b54:	e140      	b.n	8001dd8 <__aeabi_dmul+0x57c>
 8001b56:	1d03      	adds	r3, r0, #4
 8001b58:	4283      	cmp	r3, r0
 8001b5a:	41a4      	sbcs	r4, r4
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	4264      	negs	r4, r4
 8001b60:	0761      	lsls	r1, r4, #29
 8001b62:	0264      	lsls	r4, r4, #9
 8001b64:	0b24      	lsrs	r4, r4, #12
 8001b66:	08c2      	lsrs	r2, r0, #3
 8001b68:	2300      	movs	r3, #0
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	e6cc      	b.n	8001908 <__aeabi_dmul+0xac>
 8001b6e:	46c0      	nop			@ (mov r8, r8)
 8001b70:	000007ff 	.word	0x000007ff
 8001b74:	fffffc01 	.word	0xfffffc01
 8001b78:	000003ff 	.word	0x000003ff
 8001b7c:	feffffff 	.word	0xfeffffff
 8001b80:	000007fe 	.word	0x000007fe
 8001b84:	fffffc0d 	.word	0xfffffc0d
 8001b88:	0000043e 	.word	0x0000043e
 8001b8c:	4649      	mov	r1, r9
 8001b8e:	464a      	mov	r2, r9
 8001b90:	0409      	lsls	r1, r1, #16
 8001b92:	0c09      	lsrs	r1, r1, #16
 8001b94:	000d      	movs	r5, r1
 8001b96:	0c16      	lsrs	r6, r2, #16
 8001b98:	0c02      	lsrs	r2, r0, #16
 8001b9a:	0400      	lsls	r0, r0, #16
 8001b9c:	0c00      	lsrs	r0, r0, #16
 8001b9e:	4345      	muls	r5, r0
 8001ba0:	46ac      	mov	ip, r5
 8001ba2:	0005      	movs	r5, r0
 8001ba4:	4375      	muls	r5, r6
 8001ba6:	46a8      	mov	r8, r5
 8001ba8:	0015      	movs	r5, r2
 8001baa:	000f      	movs	r7, r1
 8001bac:	4375      	muls	r5, r6
 8001bae:	9200      	str	r2, [sp, #0]
 8001bb0:	9502      	str	r5, [sp, #8]
 8001bb2:	002a      	movs	r2, r5
 8001bb4:	9d00      	ldr	r5, [sp, #0]
 8001bb6:	436f      	muls	r7, r5
 8001bb8:	4665      	mov	r5, ip
 8001bba:	0c2d      	lsrs	r5, r5, #16
 8001bbc:	46a9      	mov	r9, r5
 8001bbe:	4447      	add	r7, r8
 8001bc0:	444f      	add	r7, r9
 8001bc2:	45b8      	cmp	r8, r7
 8001bc4:	d905      	bls.n	8001bd2 <__aeabi_dmul+0x376>
 8001bc6:	0015      	movs	r5, r2
 8001bc8:	2280      	movs	r2, #128	@ 0x80
 8001bca:	0252      	lsls	r2, r2, #9
 8001bcc:	4690      	mov	r8, r2
 8001bce:	4445      	add	r5, r8
 8001bd0:	9502      	str	r5, [sp, #8]
 8001bd2:	0c3d      	lsrs	r5, r7, #16
 8001bd4:	9503      	str	r5, [sp, #12]
 8001bd6:	4665      	mov	r5, ip
 8001bd8:	042d      	lsls	r5, r5, #16
 8001bda:	043f      	lsls	r7, r7, #16
 8001bdc:	0c2d      	lsrs	r5, r5, #16
 8001bde:	46ac      	mov	ip, r5
 8001be0:	003d      	movs	r5, r7
 8001be2:	4465      	add	r5, ip
 8001be4:	9504      	str	r5, [sp, #16]
 8001be6:	0c25      	lsrs	r5, r4, #16
 8001be8:	0424      	lsls	r4, r4, #16
 8001bea:	0c24      	lsrs	r4, r4, #16
 8001bec:	46ac      	mov	ip, r5
 8001bee:	0025      	movs	r5, r4
 8001bf0:	4375      	muls	r5, r6
 8001bf2:	46a8      	mov	r8, r5
 8001bf4:	4665      	mov	r5, ip
 8001bf6:	000f      	movs	r7, r1
 8001bf8:	4369      	muls	r1, r5
 8001bfa:	4441      	add	r1, r8
 8001bfc:	4689      	mov	r9, r1
 8001bfe:	4367      	muls	r7, r4
 8001c00:	0c39      	lsrs	r1, r7, #16
 8001c02:	4449      	add	r1, r9
 8001c04:	436e      	muls	r6, r5
 8001c06:	4588      	cmp	r8, r1
 8001c08:	d903      	bls.n	8001c12 <__aeabi_dmul+0x3b6>
 8001c0a:	2280      	movs	r2, #128	@ 0x80
 8001c0c:	0252      	lsls	r2, r2, #9
 8001c0e:	4690      	mov	r8, r2
 8001c10:	4446      	add	r6, r8
 8001c12:	0c0d      	lsrs	r5, r1, #16
 8001c14:	46a8      	mov	r8, r5
 8001c16:	0035      	movs	r5, r6
 8001c18:	4445      	add	r5, r8
 8001c1a:	9505      	str	r5, [sp, #20]
 8001c1c:	9d03      	ldr	r5, [sp, #12]
 8001c1e:	043f      	lsls	r7, r7, #16
 8001c20:	46a8      	mov	r8, r5
 8001c22:	0c3f      	lsrs	r7, r7, #16
 8001c24:	0409      	lsls	r1, r1, #16
 8001c26:	19c9      	adds	r1, r1, r7
 8001c28:	4488      	add	r8, r1
 8001c2a:	4645      	mov	r5, r8
 8001c2c:	9503      	str	r5, [sp, #12]
 8001c2e:	4655      	mov	r5, sl
 8001c30:	042e      	lsls	r6, r5, #16
 8001c32:	0c36      	lsrs	r6, r6, #16
 8001c34:	0c2f      	lsrs	r7, r5, #16
 8001c36:	0035      	movs	r5, r6
 8001c38:	4345      	muls	r5, r0
 8001c3a:	4378      	muls	r0, r7
 8001c3c:	4681      	mov	r9, r0
 8001c3e:	0038      	movs	r0, r7
 8001c40:	46a8      	mov	r8, r5
 8001c42:	0c2d      	lsrs	r5, r5, #16
 8001c44:	46aa      	mov	sl, r5
 8001c46:	9a00      	ldr	r2, [sp, #0]
 8001c48:	4350      	muls	r0, r2
 8001c4a:	4372      	muls	r2, r6
 8001c4c:	444a      	add	r2, r9
 8001c4e:	4452      	add	r2, sl
 8001c50:	4591      	cmp	r9, r2
 8001c52:	d903      	bls.n	8001c5c <__aeabi_dmul+0x400>
 8001c54:	2580      	movs	r5, #128	@ 0x80
 8001c56:	026d      	lsls	r5, r5, #9
 8001c58:	46a9      	mov	r9, r5
 8001c5a:	4448      	add	r0, r9
 8001c5c:	0c15      	lsrs	r5, r2, #16
 8001c5e:	46a9      	mov	r9, r5
 8001c60:	4645      	mov	r5, r8
 8001c62:	042d      	lsls	r5, r5, #16
 8001c64:	0c2d      	lsrs	r5, r5, #16
 8001c66:	46a8      	mov	r8, r5
 8001c68:	4665      	mov	r5, ip
 8001c6a:	437d      	muls	r5, r7
 8001c6c:	0412      	lsls	r2, r2, #16
 8001c6e:	4448      	add	r0, r9
 8001c70:	4490      	add	r8, r2
 8001c72:	46a9      	mov	r9, r5
 8001c74:	0032      	movs	r2, r6
 8001c76:	4665      	mov	r5, ip
 8001c78:	4362      	muls	r2, r4
 8001c7a:	436e      	muls	r6, r5
 8001c7c:	437c      	muls	r4, r7
 8001c7e:	0c17      	lsrs	r7, r2, #16
 8001c80:	1936      	adds	r6, r6, r4
 8001c82:	19bf      	adds	r7, r7, r6
 8001c84:	42bc      	cmp	r4, r7
 8001c86:	d903      	bls.n	8001c90 <__aeabi_dmul+0x434>
 8001c88:	2480      	movs	r4, #128	@ 0x80
 8001c8a:	0264      	lsls	r4, r4, #9
 8001c8c:	46a4      	mov	ip, r4
 8001c8e:	44e1      	add	r9, ip
 8001c90:	9c02      	ldr	r4, [sp, #8]
 8001c92:	9e03      	ldr	r6, [sp, #12]
 8001c94:	46a4      	mov	ip, r4
 8001c96:	9d05      	ldr	r5, [sp, #20]
 8001c98:	4466      	add	r6, ip
 8001c9a:	428e      	cmp	r6, r1
 8001c9c:	4189      	sbcs	r1, r1
 8001c9e:	46ac      	mov	ip, r5
 8001ca0:	0412      	lsls	r2, r2, #16
 8001ca2:	043c      	lsls	r4, r7, #16
 8001ca4:	0c12      	lsrs	r2, r2, #16
 8001ca6:	18a2      	adds	r2, r4, r2
 8001ca8:	4462      	add	r2, ip
 8001caa:	4249      	negs	r1, r1
 8001cac:	1854      	adds	r4, r2, r1
 8001cae:	4446      	add	r6, r8
 8001cb0:	46a4      	mov	ip, r4
 8001cb2:	4546      	cmp	r6, r8
 8001cb4:	41a4      	sbcs	r4, r4
 8001cb6:	4682      	mov	sl, r0
 8001cb8:	4264      	negs	r4, r4
 8001cba:	46a0      	mov	r8, r4
 8001cbc:	42aa      	cmp	r2, r5
 8001cbe:	4192      	sbcs	r2, r2
 8001cc0:	458c      	cmp	ip, r1
 8001cc2:	4189      	sbcs	r1, r1
 8001cc4:	44e2      	add	sl, ip
 8001cc6:	44d0      	add	r8, sl
 8001cc8:	4249      	negs	r1, r1
 8001cca:	4252      	negs	r2, r2
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	45a0      	cmp	r8, r4
 8001cd0:	41a4      	sbcs	r4, r4
 8001cd2:	4582      	cmp	sl, r0
 8001cd4:	4189      	sbcs	r1, r1
 8001cd6:	4264      	negs	r4, r4
 8001cd8:	4249      	negs	r1, r1
 8001cda:	430c      	orrs	r4, r1
 8001cdc:	4641      	mov	r1, r8
 8001cde:	0c3f      	lsrs	r7, r7, #16
 8001ce0:	19d2      	adds	r2, r2, r7
 8001ce2:	1912      	adds	r2, r2, r4
 8001ce4:	0dcc      	lsrs	r4, r1, #23
 8001ce6:	9904      	ldr	r1, [sp, #16]
 8001ce8:	0270      	lsls	r0, r6, #9
 8001cea:	4308      	orrs	r0, r1
 8001cec:	1e41      	subs	r1, r0, #1
 8001cee:	4188      	sbcs	r0, r1
 8001cf0:	4641      	mov	r1, r8
 8001cf2:	444a      	add	r2, r9
 8001cf4:	0df6      	lsrs	r6, r6, #23
 8001cf6:	0252      	lsls	r2, r2, #9
 8001cf8:	4330      	orrs	r0, r6
 8001cfa:	0249      	lsls	r1, r1, #9
 8001cfc:	4314      	orrs	r4, r2
 8001cfe:	4308      	orrs	r0, r1
 8001d00:	01d2      	lsls	r2, r2, #7
 8001d02:	d535      	bpl.n	8001d70 <__aeabi_dmul+0x514>
 8001d04:	2201      	movs	r2, #1
 8001d06:	0843      	lsrs	r3, r0, #1
 8001d08:	4002      	ands	r2, r0
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	07e0      	lsls	r0, r4, #31
 8001d0e:	4318      	orrs	r0, r3
 8001d10:	0864      	lsrs	r4, r4, #1
 8001d12:	e634      	b.n	800197e <__aeabi_dmul+0x122>
 8001d14:	9b00      	ldr	r3, [sp, #0]
 8001d16:	46a2      	mov	sl, r4
 8001d18:	469b      	mov	fp, r3
 8001d1a:	4681      	mov	r9, r0
 8001d1c:	2480      	movs	r4, #128	@ 0x80
 8001d1e:	4653      	mov	r3, sl
 8001d20:	0324      	lsls	r4, r4, #12
 8001d22:	431c      	orrs	r4, r3
 8001d24:	0324      	lsls	r4, r4, #12
 8001d26:	464a      	mov	r2, r9
 8001d28:	4b2e      	ldr	r3, [pc, #184]	@ (8001de4 <__aeabi_dmul+0x588>)
 8001d2a:	0b24      	lsrs	r4, r4, #12
 8001d2c:	e5ec      	b.n	8001908 <__aeabi_dmul+0xac>
 8001d2e:	f000 fd15 	bl	800275c <__clzsi2>
 8001d32:	2315      	movs	r3, #21
 8001d34:	469c      	mov	ip, r3
 8001d36:	4484      	add	ip, r0
 8001d38:	0002      	movs	r2, r0
 8001d3a:	4663      	mov	r3, ip
 8001d3c:	3220      	adds	r2, #32
 8001d3e:	2b1c      	cmp	r3, #28
 8001d40:	dc00      	bgt.n	8001d44 <__aeabi_dmul+0x4e8>
 8001d42:	e684      	b.n	8001a4e <__aeabi_dmul+0x1f2>
 8001d44:	2300      	movs	r3, #0
 8001d46:	4699      	mov	r9, r3
 8001d48:	0023      	movs	r3, r4
 8001d4a:	3808      	subs	r0, #8
 8001d4c:	4083      	lsls	r3, r0
 8001d4e:	469a      	mov	sl, r3
 8001d50:	e68e      	b.n	8001a70 <__aeabi_dmul+0x214>
 8001d52:	f000 fd03 	bl	800275c <__clzsi2>
 8001d56:	0002      	movs	r2, r0
 8001d58:	0003      	movs	r3, r0
 8001d5a:	3215      	adds	r2, #21
 8001d5c:	3320      	adds	r3, #32
 8001d5e:	2a1c      	cmp	r2, #28
 8001d60:	dc00      	bgt.n	8001d64 <__aeabi_dmul+0x508>
 8001d62:	e64e      	b.n	8001a02 <__aeabi_dmul+0x1a6>
 8001d64:	0002      	movs	r2, r0
 8001d66:	0034      	movs	r4, r6
 8001d68:	3a08      	subs	r2, #8
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	4094      	lsls	r4, r2
 8001d6e:	e652      	b.n	8001a16 <__aeabi_dmul+0x1ba>
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	e604      	b.n	800197e <__aeabi_dmul+0x122>
 8001d74:	4b1c      	ldr	r3, [pc, #112]	@ (8001de8 <__aeabi_dmul+0x58c>)
 8001d76:	0021      	movs	r1, r4
 8001d78:	469c      	mov	ip, r3
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	9d01      	ldr	r5, [sp, #4]
 8001d7e:	40d3      	lsrs	r3, r2
 8001d80:	4465      	add	r5, ip
 8001d82:	40a9      	lsls	r1, r5
 8001d84:	4319      	orrs	r1, r3
 8001d86:	0003      	movs	r3, r0
 8001d88:	40ab      	lsls	r3, r5
 8001d8a:	1e58      	subs	r0, r3, #1
 8001d8c:	4183      	sbcs	r3, r0
 8001d8e:	4319      	orrs	r1, r3
 8001d90:	0008      	movs	r0, r1
 8001d92:	40d4      	lsrs	r4, r2
 8001d94:	074b      	lsls	r3, r1, #29
 8001d96:	d009      	beq.n	8001dac <__aeabi_dmul+0x550>
 8001d98:	230f      	movs	r3, #15
 8001d9a:	400b      	ands	r3, r1
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d005      	beq.n	8001dac <__aeabi_dmul+0x550>
 8001da0:	1d0b      	adds	r3, r1, #4
 8001da2:	428b      	cmp	r3, r1
 8001da4:	4180      	sbcs	r0, r0
 8001da6:	4240      	negs	r0, r0
 8001da8:	1824      	adds	r4, r4, r0
 8001daa:	0018      	movs	r0, r3
 8001dac:	0223      	lsls	r3, r4, #8
 8001dae:	d400      	bmi.n	8001db2 <__aeabi_dmul+0x556>
 8001db0:	e6d6      	b.n	8001b60 <__aeabi_dmul+0x304>
 8001db2:	2301      	movs	r3, #1
 8001db4:	2400      	movs	r4, #0
 8001db6:	2200      	movs	r2, #0
 8001db8:	e5a6      	b.n	8001908 <__aeabi_dmul+0xac>
 8001dba:	290f      	cmp	r1, #15
 8001dbc:	d1aa      	bne.n	8001d14 <__aeabi_dmul+0x4b8>
 8001dbe:	2380      	movs	r3, #128	@ 0x80
 8001dc0:	4652      	mov	r2, sl
 8001dc2:	031b      	lsls	r3, r3, #12
 8001dc4:	421a      	tst	r2, r3
 8001dc6:	d0a9      	beq.n	8001d1c <__aeabi_dmul+0x4c0>
 8001dc8:	421c      	tst	r4, r3
 8001dca:	d1a7      	bne.n	8001d1c <__aeabi_dmul+0x4c0>
 8001dcc:	431c      	orrs	r4, r3
 8001dce:	9b00      	ldr	r3, [sp, #0]
 8001dd0:	0002      	movs	r2, r0
 8001dd2:	469b      	mov	fp, r3
 8001dd4:	4b03      	ldr	r3, [pc, #12]	@ (8001de4 <__aeabi_dmul+0x588>)
 8001dd6:	e597      	b.n	8001908 <__aeabi_dmul+0xac>
 8001dd8:	2400      	movs	r4, #0
 8001dda:	e6c1      	b.n	8001b60 <__aeabi_dmul+0x304>
 8001ddc:	2400      	movs	r4, #0
 8001dde:	4b01      	ldr	r3, [pc, #4]	@ (8001de4 <__aeabi_dmul+0x588>)
 8001de0:	0022      	movs	r2, r4
 8001de2:	e591      	b.n	8001908 <__aeabi_dmul+0xac>
 8001de4:	000007ff 	.word	0x000007ff
 8001de8:	0000041e 	.word	0x0000041e

08001dec <__aeabi_dsub>:
 8001dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dee:	464e      	mov	r6, r9
 8001df0:	4645      	mov	r5, r8
 8001df2:	46de      	mov	lr, fp
 8001df4:	4657      	mov	r7, sl
 8001df6:	b5e0      	push	{r5, r6, r7, lr}
 8001df8:	b085      	sub	sp, #20
 8001dfa:	9000      	str	r0, [sp, #0]
 8001dfc:	9101      	str	r1, [sp, #4]
 8001dfe:	030c      	lsls	r4, r1, #12
 8001e00:	004f      	lsls	r7, r1, #1
 8001e02:	0fce      	lsrs	r6, r1, #31
 8001e04:	0a61      	lsrs	r1, r4, #9
 8001e06:	9c00      	ldr	r4, [sp, #0]
 8001e08:	46b0      	mov	r8, r6
 8001e0a:	0f64      	lsrs	r4, r4, #29
 8001e0c:	430c      	orrs	r4, r1
 8001e0e:	9900      	ldr	r1, [sp, #0]
 8001e10:	0d7f      	lsrs	r7, r7, #21
 8001e12:	00c8      	lsls	r0, r1, #3
 8001e14:	0011      	movs	r1, r2
 8001e16:	001a      	movs	r2, r3
 8001e18:	031b      	lsls	r3, r3, #12
 8001e1a:	469c      	mov	ip, r3
 8001e1c:	9100      	str	r1, [sp, #0]
 8001e1e:	9201      	str	r2, [sp, #4]
 8001e20:	0051      	lsls	r1, r2, #1
 8001e22:	0d4b      	lsrs	r3, r1, #21
 8001e24:	4699      	mov	r9, r3
 8001e26:	9b01      	ldr	r3, [sp, #4]
 8001e28:	9d00      	ldr	r5, [sp, #0]
 8001e2a:	0fd9      	lsrs	r1, r3, #31
 8001e2c:	4663      	mov	r3, ip
 8001e2e:	0f6a      	lsrs	r2, r5, #29
 8001e30:	0a5b      	lsrs	r3, r3, #9
 8001e32:	4313      	orrs	r3, r2
 8001e34:	00ea      	lsls	r2, r5, #3
 8001e36:	4694      	mov	ip, r2
 8001e38:	4693      	mov	fp, r2
 8001e3a:	4ac1      	ldr	r2, [pc, #772]	@ (8002140 <__aeabi_dsub+0x354>)
 8001e3c:	9003      	str	r0, [sp, #12]
 8001e3e:	9302      	str	r3, [sp, #8]
 8001e40:	4591      	cmp	r9, r2
 8001e42:	d100      	bne.n	8001e46 <__aeabi_dsub+0x5a>
 8001e44:	e0cd      	b.n	8001fe2 <__aeabi_dsub+0x1f6>
 8001e46:	2501      	movs	r5, #1
 8001e48:	4069      	eors	r1, r5
 8001e4a:	464d      	mov	r5, r9
 8001e4c:	1b7d      	subs	r5, r7, r5
 8001e4e:	46aa      	mov	sl, r5
 8001e50:	428e      	cmp	r6, r1
 8001e52:	d100      	bne.n	8001e56 <__aeabi_dsub+0x6a>
 8001e54:	e080      	b.n	8001f58 <__aeabi_dsub+0x16c>
 8001e56:	2d00      	cmp	r5, #0
 8001e58:	dc00      	bgt.n	8001e5c <__aeabi_dsub+0x70>
 8001e5a:	e335      	b.n	80024c8 <__aeabi_dsub+0x6dc>
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	2900      	cmp	r1, #0
 8001e60:	d100      	bne.n	8001e64 <__aeabi_dsub+0x78>
 8001e62:	e0df      	b.n	8002024 <__aeabi_dsub+0x238>
 8001e64:	4297      	cmp	r7, r2
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x7e>
 8001e68:	e194      	b.n	8002194 <__aeabi_dsub+0x3a8>
 8001e6a:	4652      	mov	r2, sl
 8001e6c:	2501      	movs	r5, #1
 8001e6e:	2a38      	cmp	r2, #56	@ 0x38
 8001e70:	dc19      	bgt.n	8001ea6 <__aeabi_dsub+0xba>
 8001e72:	2280      	movs	r2, #128	@ 0x80
 8001e74:	9b02      	ldr	r3, [sp, #8]
 8001e76:	0412      	lsls	r2, r2, #16
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	9302      	str	r3, [sp, #8]
 8001e7c:	4652      	mov	r2, sl
 8001e7e:	2a1f      	cmp	r2, #31
 8001e80:	dd00      	ble.n	8001e84 <__aeabi_dsub+0x98>
 8001e82:	e1e3      	b.n	800224c <__aeabi_dsub+0x460>
 8001e84:	4653      	mov	r3, sl
 8001e86:	2220      	movs	r2, #32
 8001e88:	4661      	mov	r1, ip
 8001e8a:	9d02      	ldr	r5, [sp, #8]
 8001e8c:	1ad2      	subs	r2, r2, r3
 8001e8e:	4095      	lsls	r5, r2
 8001e90:	40d9      	lsrs	r1, r3
 8001e92:	430d      	orrs	r5, r1
 8001e94:	4661      	mov	r1, ip
 8001e96:	4091      	lsls	r1, r2
 8001e98:	000a      	movs	r2, r1
 8001e9a:	1e51      	subs	r1, r2, #1
 8001e9c:	418a      	sbcs	r2, r1
 8001e9e:	4315      	orrs	r5, r2
 8001ea0:	9a02      	ldr	r2, [sp, #8]
 8001ea2:	40da      	lsrs	r2, r3
 8001ea4:	1aa4      	subs	r4, r4, r2
 8001ea6:	1b45      	subs	r5, r0, r5
 8001ea8:	42a8      	cmp	r0, r5
 8001eaa:	4180      	sbcs	r0, r0
 8001eac:	4240      	negs	r0, r0
 8001eae:	1a24      	subs	r4, r4, r0
 8001eb0:	0223      	lsls	r3, r4, #8
 8001eb2:	d400      	bmi.n	8001eb6 <__aeabi_dsub+0xca>
 8001eb4:	e13d      	b.n	8002132 <__aeabi_dsub+0x346>
 8001eb6:	0264      	lsls	r4, r4, #9
 8001eb8:	0a64      	lsrs	r4, r4, #9
 8001eba:	2c00      	cmp	r4, #0
 8001ebc:	d100      	bne.n	8001ec0 <__aeabi_dsub+0xd4>
 8001ebe:	e147      	b.n	8002150 <__aeabi_dsub+0x364>
 8001ec0:	0020      	movs	r0, r4
 8001ec2:	f000 fc4b 	bl	800275c <__clzsi2>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	3b08      	subs	r3, #8
 8001eca:	2120      	movs	r1, #32
 8001ecc:	0028      	movs	r0, r5
 8001ece:	1aca      	subs	r2, r1, r3
 8001ed0:	40d0      	lsrs	r0, r2
 8001ed2:	409c      	lsls	r4, r3
 8001ed4:	0002      	movs	r2, r0
 8001ed6:	409d      	lsls	r5, r3
 8001ed8:	4322      	orrs	r2, r4
 8001eda:	429f      	cmp	r7, r3
 8001edc:	dd00      	ble.n	8001ee0 <__aeabi_dsub+0xf4>
 8001ede:	e177      	b.n	80021d0 <__aeabi_dsub+0x3e4>
 8001ee0:	1bd8      	subs	r0, r3, r7
 8001ee2:	3001      	adds	r0, #1
 8001ee4:	1a09      	subs	r1, r1, r0
 8001ee6:	002c      	movs	r4, r5
 8001ee8:	408d      	lsls	r5, r1
 8001eea:	40c4      	lsrs	r4, r0
 8001eec:	1e6b      	subs	r3, r5, #1
 8001eee:	419d      	sbcs	r5, r3
 8001ef0:	0013      	movs	r3, r2
 8001ef2:	40c2      	lsrs	r2, r0
 8001ef4:	408b      	lsls	r3, r1
 8001ef6:	4325      	orrs	r5, r4
 8001ef8:	2700      	movs	r7, #0
 8001efa:	0014      	movs	r4, r2
 8001efc:	431d      	orrs	r5, r3
 8001efe:	076b      	lsls	r3, r5, #29
 8001f00:	d009      	beq.n	8001f16 <__aeabi_dsub+0x12a>
 8001f02:	230f      	movs	r3, #15
 8001f04:	402b      	ands	r3, r5
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d005      	beq.n	8001f16 <__aeabi_dsub+0x12a>
 8001f0a:	1d2b      	adds	r3, r5, #4
 8001f0c:	42ab      	cmp	r3, r5
 8001f0e:	41ad      	sbcs	r5, r5
 8001f10:	426d      	negs	r5, r5
 8001f12:	1964      	adds	r4, r4, r5
 8001f14:	001d      	movs	r5, r3
 8001f16:	0223      	lsls	r3, r4, #8
 8001f18:	d400      	bmi.n	8001f1c <__aeabi_dsub+0x130>
 8001f1a:	e140      	b.n	800219e <__aeabi_dsub+0x3b2>
 8001f1c:	4a88      	ldr	r2, [pc, #544]	@ (8002140 <__aeabi_dsub+0x354>)
 8001f1e:	3701      	adds	r7, #1
 8001f20:	4297      	cmp	r7, r2
 8001f22:	d100      	bne.n	8001f26 <__aeabi_dsub+0x13a>
 8001f24:	e101      	b.n	800212a <__aeabi_dsub+0x33e>
 8001f26:	2601      	movs	r6, #1
 8001f28:	4643      	mov	r3, r8
 8001f2a:	4986      	ldr	r1, [pc, #536]	@ (8002144 <__aeabi_dsub+0x358>)
 8001f2c:	08ed      	lsrs	r5, r5, #3
 8001f2e:	4021      	ands	r1, r4
 8001f30:	074a      	lsls	r2, r1, #29
 8001f32:	432a      	orrs	r2, r5
 8001f34:	057c      	lsls	r4, r7, #21
 8001f36:	024d      	lsls	r5, r1, #9
 8001f38:	0b2d      	lsrs	r5, r5, #12
 8001f3a:	0d64      	lsrs	r4, r4, #21
 8001f3c:	401e      	ands	r6, r3
 8001f3e:	0524      	lsls	r4, r4, #20
 8001f40:	432c      	orrs	r4, r5
 8001f42:	07f6      	lsls	r6, r6, #31
 8001f44:	4334      	orrs	r4, r6
 8001f46:	0010      	movs	r0, r2
 8001f48:	0021      	movs	r1, r4
 8001f4a:	b005      	add	sp, #20
 8001f4c:	bcf0      	pop	{r4, r5, r6, r7}
 8001f4e:	46bb      	mov	fp, r7
 8001f50:	46b2      	mov	sl, r6
 8001f52:	46a9      	mov	r9, r5
 8001f54:	46a0      	mov	r8, r4
 8001f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f58:	2d00      	cmp	r5, #0
 8001f5a:	dc00      	bgt.n	8001f5e <__aeabi_dsub+0x172>
 8001f5c:	e2d0      	b.n	8002500 <__aeabi_dsub+0x714>
 8001f5e:	4649      	mov	r1, r9
 8001f60:	2900      	cmp	r1, #0
 8001f62:	d000      	beq.n	8001f66 <__aeabi_dsub+0x17a>
 8001f64:	e0d4      	b.n	8002110 <__aeabi_dsub+0x324>
 8001f66:	4661      	mov	r1, ip
 8001f68:	9b02      	ldr	r3, [sp, #8]
 8001f6a:	4319      	orrs	r1, r3
 8001f6c:	d100      	bne.n	8001f70 <__aeabi_dsub+0x184>
 8001f6e:	e12b      	b.n	80021c8 <__aeabi_dsub+0x3dc>
 8001f70:	1e69      	subs	r1, r5, #1
 8001f72:	2d01      	cmp	r5, #1
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dsub+0x18c>
 8001f76:	e1d9      	b.n	800232c <__aeabi_dsub+0x540>
 8001f78:	4295      	cmp	r5, r2
 8001f7a:	d100      	bne.n	8001f7e <__aeabi_dsub+0x192>
 8001f7c:	e10a      	b.n	8002194 <__aeabi_dsub+0x3a8>
 8001f7e:	2501      	movs	r5, #1
 8001f80:	2938      	cmp	r1, #56	@ 0x38
 8001f82:	dc17      	bgt.n	8001fb4 <__aeabi_dsub+0x1c8>
 8001f84:	468a      	mov	sl, r1
 8001f86:	4653      	mov	r3, sl
 8001f88:	2b1f      	cmp	r3, #31
 8001f8a:	dd00      	ble.n	8001f8e <__aeabi_dsub+0x1a2>
 8001f8c:	e1e7      	b.n	800235e <__aeabi_dsub+0x572>
 8001f8e:	2220      	movs	r2, #32
 8001f90:	1ad2      	subs	r2, r2, r3
 8001f92:	9b02      	ldr	r3, [sp, #8]
 8001f94:	4661      	mov	r1, ip
 8001f96:	4093      	lsls	r3, r2
 8001f98:	001d      	movs	r5, r3
 8001f9a:	4653      	mov	r3, sl
 8001f9c:	40d9      	lsrs	r1, r3
 8001f9e:	4663      	mov	r3, ip
 8001fa0:	4093      	lsls	r3, r2
 8001fa2:	001a      	movs	r2, r3
 8001fa4:	430d      	orrs	r5, r1
 8001fa6:	1e51      	subs	r1, r2, #1
 8001fa8:	418a      	sbcs	r2, r1
 8001faa:	4653      	mov	r3, sl
 8001fac:	4315      	orrs	r5, r2
 8001fae:	9a02      	ldr	r2, [sp, #8]
 8001fb0:	40da      	lsrs	r2, r3
 8001fb2:	18a4      	adds	r4, r4, r2
 8001fb4:	182d      	adds	r5, r5, r0
 8001fb6:	4285      	cmp	r5, r0
 8001fb8:	4180      	sbcs	r0, r0
 8001fba:	4240      	negs	r0, r0
 8001fbc:	1824      	adds	r4, r4, r0
 8001fbe:	0223      	lsls	r3, r4, #8
 8001fc0:	d400      	bmi.n	8001fc4 <__aeabi_dsub+0x1d8>
 8001fc2:	e0b6      	b.n	8002132 <__aeabi_dsub+0x346>
 8001fc4:	4b5e      	ldr	r3, [pc, #376]	@ (8002140 <__aeabi_dsub+0x354>)
 8001fc6:	3701      	adds	r7, #1
 8001fc8:	429f      	cmp	r7, r3
 8001fca:	d100      	bne.n	8001fce <__aeabi_dsub+0x1e2>
 8001fcc:	e0ad      	b.n	800212a <__aeabi_dsub+0x33e>
 8001fce:	2101      	movs	r1, #1
 8001fd0:	4b5c      	ldr	r3, [pc, #368]	@ (8002144 <__aeabi_dsub+0x358>)
 8001fd2:	086a      	lsrs	r2, r5, #1
 8001fd4:	401c      	ands	r4, r3
 8001fd6:	4029      	ands	r1, r5
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	07e5      	lsls	r5, r4, #31
 8001fdc:	4315      	orrs	r5, r2
 8001fde:	0864      	lsrs	r4, r4, #1
 8001fe0:	e78d      	b.n	8001efe <__aeabi_dsub+0x112>
 8001fe2:	4a59      	ldr	r2, [pc, #356]	@ (8002148 <__aeabi_dsub+0x35c>)
 8001fe4:	9b02      	ldr	r3, [sp, #8]
 8001fe6:	4692      	mov	sl, r2
 8001fe8:	4662      	mov	r2, ip
 8001fea:	44ba      	add	sl, r7
 8001fec:	431a      	orrs	r2, r3
 8001fee:	d02c      	beq.n	800204a <__aeabi_dsub+0x25e>
 8001ff0:	428e      	cmp	r6, r1
 8001ff2:	d02e      	beq.n	8002052 <__aeabi_dsub+0x266>
 8001ff4:	4652      	mov	r2, sl
 8001ff6:	2a00      	cmp	r2, #0
 8001ff8:	d060      	beq.n	80020bc <__aeabi_dsub+0x2d0>
 8001ffa:	2f00      	cmp	r7, #0
 8001ffc:	d100      	bne.n	8002000 <__aeabi_dsub+0x214>
 8001ffe:	e0db      	b.n	80021b8 <__aeabi_dsub+0x3cc>
 8002000:	4663      	mov	r3, ip
 8002002:	000e      	movs	r6, r1
 8002004:	9c02      	ldr	r4, [sp, #8]
 8002006:	08d8      	lsrs	r0, r3, #3
 8002008:	0762      	lsls	r2, r4, #29
 800200a:	4302      	orrs	r2, r0
 800200c:	08e4      	lsrs	r4, r4, #3
 800200e:	0013      	movs	r3, r2
 8002010:	4323      	orrs	r3, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x22a>
 8002014:	e254      	b.n	80024c0 <__aeabi_dsub+0x6d4>
 8002016:	2580      	movs	r5, #128	@ 0x80
 8002018:	032d      	lsls	r5, r5, #12
 800201a:	4325      	orrs	r5, r4
 800201c:	032d      	lsls	r5, r5, #12
 800201e:	4c48      	ldr	r4, [pc, #288]	@ (8002140 <__aeabi_dsub+0x354>)
 8002020:	0b2d      	lsrs	r5, r5, #12
 8002022:	e78c      	b.n	8001f3e <__aeabi_dsub+0x152>
 8002024:	4661      	mov	r1, ip
 8002026:	9b02      	ldr	r3, [sp, #8]
 8002028:	4319      	orrs	r1, r3
 800202a:	d100      	bne.n	800202e <__aeabi_dsub+0x242>
 800202c:	e0cc      	b.n	80021c8 <__aeabi_dsub+0x3dc>
 800202e:	0029      	movs	r1, r5
 8002030:	3901      	subs	r1, #1
 8002032:	2d01      	cmp	r5, #1
 8002034:	d100      	bne.n	8002038 <__aeabi_dsub+0x24c>
 8002036:	e188      	b.n	800234a <__aeabi_dsub+0x55e>
 8002038:	4295      	cmp	r5, r2
 800203a:	d100      	bne.n	800203e <__aeabi_dsub+0x252>
 800203c:	e0aa      	b.n	8002194 <__aeabi_dsub+0x3a8>
 800203e:	2501      	movs	r5, #1
 8002040:	2938      	cmp	r1, #56	@ 0x38
 8002042:	dd00      	ble.n	8002046 <__aeabi_dsub+0x25a>
 8002044:	e72f      	b.n	8001ea6 <__aeabi_dsub+0xba>
 8002046:	468a      	mov	sl, r1
 8002048:	e718      	b.n	8001e7c <__aeabi_dsub+0x90>
 800204a:	2201      	movs	r2, #1
 800204c:	4051      	eors	r1, r2
 800204e:	428e      	cmp	r6, r1
 8002050:	d1d0      	bne.n	8001ff4 <__aeabi_dsub+0x208>
 8002052:	4653      	mov	r3, sl
 8002054:	2b00      	cmp	r3, #0
 8002056:	d100      	bne.n	800205a <__aeabi_dsub+0x26e>
 8002058:	e0be      	b.n	80021d8 <__aeabi_dsub+0x3ec>
 800205a:	2f00      	cmp	r7, #0
 800205c:	d000      	beq.n	8002060 <__aeabi_dsub+0x274>
 800205e:	e138      	b.n	80022d2 <__aeabi_dsub+0x4e6>
 8002060:	46ca      	mov	sl, r9
 8002062:	0022      	movs	r2, r4
 8002064:	4302      	orrs	r2, r0
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x27e>
 8002068:	e1e2      	b.n	8002430 <__aeabi_dsub+0x644>
 800206a:	4653      	mov	r3, sl
 800206c:	1e59      	subs	r1, r3, #1
 800206e:	2b01      	cmp	r3, #1
 8002070:	d100      	bne.n	8002074 <__aeabi_dsub+0x288>
 8002072:	e20d      	b.n	8002490 <__aeabi_dsub+0x6a4>
 8002074:	4a32      	ldr	r2, [pc, #200]	@ (8002140 <__aeabi_dsub+0x354>)
 8002076:	4592      	cmp	sl, r2
 8002078:	d100      	bne.n	800207c <__aeabi_dsub+0x290>
 800207a:	e1d2      	b.n	8002422 <__aeabi_dsub+0x636>
 800207c:	2701      	movs	r7, #1
 800207e:	2938      	cmp	r1, #56	@ 0x38
 8002080:	dc13      	bgt.n	80020aa <__aeabi_dsub+0x2be>
 8002082:	291f      	cmp	r1, #31
 8002084:	dd00      	ble.n	8002088 <__aeabi_dsub+0x29c>
 8002086:	e1ee      	b.n	8002466 <__aeabi_dsub+0x67a>
 8002088:	2220      	movs	r2, #32
 800208a:	9b02      	ldr	r3, [sp, #8]
 800208c:	1a52      	subs	r2, r2, r1
 800208e:	0025      	movs	r5, r4
 8002090:	0007      	movs	r7, r0
 8002092:	469a      	mov	sl, r3
 8002094:	40cc      	lsrs	r4, r1
 8002096:	4090      	lsls	r0, r2
 8002098:	4095      	lsls	r5, r2
 800209a:	40cf      	lsrs	r7, r1
 800209c:	44a2      	add	sl, r4
 800209e:	1e42      	subs	r2, r0, #1
 80020a0:	4190      	sbcs	r0, r2
 80020a2:	4653      	mov	r3, sl
 80020a4:	432f      	orrs	r7, r5
 80020a6:	4307      	orrs	r7, r0
 80020a8:	9302      	str	r3, [sp, #8]
 80020aa:	003d      	movs	r5, r7
 80020ac:	4465      	add	r5, ip
 80020ae:	4565      	cmp	r5, ip
 80020b0:	4192      	sbcs	r2, r2
 80020b2:	9b02      	ldr	r3, [sp, #8]
 80020b4:	4252      	negs	r2, r2
 80020b6:	464f      	mov	r7, r9
 80020b8:	18d4      	adds	r4, r2, r3
 80020ba:	e780      	b.n	8001fbe <__aeabi_dsub+0x1d2>
 80020bc:	4a23      	ldr	r2, [pc, #140]	@ (800214c <__aeabi_dsub+0x360>)
 80020be:	1c7d      	adds	r5, r7, #1
 80020c0:	4215      	tst	r5, r2
 80020c2:	d000      	beq.n	80020c6 <__aeabi_dsub+0x2da>
 80020c4:	e0aa      	b.n	800221c <__aeabi_dsub+0x430>
 80020c6:	4662      	mov	r2, ip
 80020c8:	0025      	movs	r5, r4
 80020ca:	9b02      	ldr	r3, [sp, #8]
 80020cc:	4305      	orrs	r5, r0
 80020ce:	431a      	orrs	r2, r3
 80020d0:	2f00      	cmp	r7, #0
 80020d2:	d000      	beq.n	80020d6 <__aeabi_dsub+0x2ea>
 80020d4:	e0f5      	b.n	80022c2 <__aeabi_dsub+0x4d6>
 80020d6:	2d00      	cmp	r5, #0
 80020d8:	d100      	bne.n	80020dc <__aeabi_dsub+0x2f0>
 80020da:	e16b      	b.n	80023b4 <__aeabi_dsub+0x5c8>
 80020dc:	2a00      	cmp	r2, #0
 80020de:	d100      	bne.n	80020e2 <__aeabi_dsub+0x2f6>
 80020e0:	e152      	b.n	8002388 <__aeabi_dsub+0x59c>
 80020e2:	4663      	mov	r3, ip
 80020e4:	1ac5      	subs	r5, r0, r3
 80020e6:	9b02      	ldr	r3, [sp, #8]
 80020e8:	1ae2      	subs	r2, r4, r3
 80020ea:	42a8      	cmp	r0, r5
 80020ec:	419b      	sbcs	r3, r3
 80020ee:	425b      	negs	r3, r3
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	021a      	lsls	r2, r3, #8
 80020f4:	d400      	bmi.n	80020f8 <__aeabi_dsub+0x30c>
 80020f6:	e1d5      	b.n	80024a4 <__aeabi_dsub+0x6b8>
 80020f8:	4663      	mov	r3, ip
 80020fa:	1a1d      	subs	r5, r3, r0
 80020fc:	45ac      	cmp	ip, r5
 80020fe:	4192      	sbcs	r2, r2
 8002100:	2601      	movs	r6, #1
 8002102:	9b02      	ldr	r3, [sp, #8]
 8002104:	4252      	negs	r2, r2
 8002106:	1b1c      	subs	r4, r3, r4
 8002108:	4688      	mov	r8, r1
 800210a:	1aa4      	subs	r4, r4, r2
 800210c:	400e      	ands	r6, r1
 800210e:	e6f6      	b.n	8001efe <__aeabi_dsub+0x112>
 8002110:	4297      	cmp	r7, r2
 8002112:	d03f      	beq.n	8002194 <__aeabi_dsub+0x3a8>
 8002114:	4652      	mov	r2, sl
 8002116:	2501      	movs	r5, #1
 8002118:	2a38      	cmp	r2, #56	@ 0x38
 800211a:	dd00      	ble.n	800211e <__aeabi_dsub+0x332>
 800211c:	e74a      	b.n	8001fb4 <__aeabi_dsub+0x1c8>
 800211e:	2280      	movs	r2, #128	@ 0x80
 8002120:	9b02      	ldr	r3, [sp, #8]
 8002122:	0412      	lsls	r2, r2, #16
 8002124:	4313      	orrs	r3, r2
 8002126:	9302      	str	r3, [sp, #8]
 8002128:	e72d      	b.n	8001f86 <__aeabi_dsub+0x19a>
 800212a:	003c      	movs	r4, r7
 800212c:	2500      	movs	r5, #0
 800212e:	2200      	movs	r2, #0
 8002130:	e705      	b.n	8001f3e <__aeabi_dsub+0x152>
 8002132:	2307      	movs	r3, #7
 8002134:	402b      	ands	r3, r5
 8002136:	2b00      	cmp	r3, #0
 8002138:	d000      	beq.n	800213c <__aeabi_dsub+0x350>
 800213a:	e6e2      	b.n	8001f02 <__aeabi_dsub+0x116>
 800213c:	e06b      	b.n	8002216 <__aeabi_dsub+0x42a>
 800213e:	46c0      	nop			@ (mov r8, r8)
 8002140:	000007ff 	.word	0x000007ff
 8002144:	ff7fffff 	.word	0xff7fffff
 8002148:	fffff801 	.word	0xfffff801
 800214c:	000007fe 	.word	0x000007fe
 8002150:	0028      	movs	r0, r5
 8002152:	f000 fb03 	bl	800275c <__clzsi2>
 8002156:	0003      	movs	r3, r0
 8002158:	3318      	adds	r3, #24
 800215a:	2b1f      	cmp	r3, #31
 800215c:	dc00      	bgt.n	8002160 <__aeabi_dsub+0x374>
 800215e:	e6b4      	b.n	8001eca <__aeabi_dsub+0xde>
 8002160:	002a      	movs	r2, r5
 8002162:	3808      	subs	r0, #8
 8002164:	4082      	lsls	r2, r0
 8002166:	429f      	cmp	r7, r3
 8002168:	dd00      	ble.n	800216c <__aeabi_dsub+0x380>
 800216a:	e0b9      	b.n	80022e0 <__aeabi_dsub+0x4f4>
 800216c:	1bdb      	subs	r3, r3, r7
 800216e:	1c58      	adds	r0, r3, #1
 8002170:	281f      	cmp	r0, #31
 8002172:	dc00      	bgt.n	8002176 <__aeabi_dsub+0x38a>
 8002174:	e1a0      	b.n	80024b8 <__aeabi_dsub+0x6cc>
 8002176:	0015      	movs	r5, r2
 8002178:	3b1f      	subs	r3, #31
 800217a:	40dd      	lsrs	r5, r3
 800217c:	2820      	cmp	r0, #32
 800217e:	d005      	beq.n	800218c <__aeabi_dsub+0x3a0>
 8002180:	2340      	movs	r3, #64	@ 0x40
 8002182:	1a1b      	subs	r3, r3, r0
 8002184:	409a      	lsls	r2, r3
 8002186:	1e53      	subs	r3, r2, #1
 8002188:	419a      	sbcs	r2, r3
 800218a:	4315      	orrs	r5, r2
 800218c:	2307      	movs	r3, #7
 800218e:	2700      	movs	r7, #0
 8002190:	402b      	ands	r3, r5
 8002192:	e7d0      	b.n	8002136 <__aeabi_dsub+0x34a>
 8002194:	08c0      	lsrs	r0, r0, #3
 8002196:	0762      	lsls	r2, r4, #29
 8002198:	4302      	orrs	r2, r0
 800219a:	08e4      	lsrs	r4, r4, #3
 800219c:	e737      	b.n	800200e <__aeabi_dsub+0x222>
 800219e:	08ea      	lsrs	r2, r5, #3
 80021a0:	0763      	lsls	r3, r4, #29
 80021a2:	431a      	orrs	r2, r3
 80021a4:	4bd3      	ldr	r3, [pc, #844]	@ (80024f4 <__aeabi_dsub+0x708>)
 80021a6:	08e4      	lsrs	r4, r4, #3
 80021a8:	429f      	cmp	r7, r3
 80021aa:	d100      	bne.n	80021ae <__aeabi_dsub+0x3c2>
 80021ac:	e72f      	b.n	800200e <__aeabi_dsub+0x222>
 80021ae:	0324      	lsls	r4, r4, #12
 80021b0:	0b25      	lsrs	r5, r4, #12
 80021b2:	057c      	lsls	r4, r7, #21
 80021b4:	0d64      	lsrs	r4, r4, #21
 80021b6:	e6c2      	b.n	8001f3e <__aeabi_dsub+0x152>
 80021b8:	46ca      	mov	sl, r9
 80021ba:	0022      	movs	r2, r4
 80021bc:	4302      	orrs	r2, r0
 80021be:	d158      	bne.n	8002272 <__aeabi_dsub+0x486>
 80021c0:	4663      	mov	r3, ip
 80021c2:	000e      	movs	r6, r1
 80021c4:	9c02      	ldr	r4, [sp, #8]
 80021c6:	9303      	str	r3, [sp, #12]
 80021c8:	9b03      	ldr	r3, [sp, #12]
 80021ca:	4657      	mov	r7, sl
 80021cc:	08da      	lsrs	r2, r3, #3
 80021ce:	e7e7      	b.n	80021a0 <__aeabi_dsub+0x3b4>
 80021d0:	4cc9      	ldr	r4, [pc, #804]	@ (80024f8 <__aeabi_dsub+0x70c>)
 80021d2:	1aff      	subs	r7, r7, r3
 80021d4:	4014      	ands	r4, r2
 80021d6:	e692      	b.n	8001efe <__aeabi_dsub+0x112>
 80021d8:	4dc8      	ldr	r5, [pc, #800]	@ (80024fc <__aeabi_dsub+0x710>)
 80021da:	1c7a      	adds	r2, r7, #1
 80021dc:	422a      	tst	r2, r5
 80021de:	d000      	beq.n	80021e2 <__aeabi_dsub+0x3f6>
 80021e0:	e084      	b.n	80022ec <__aeabi_dsub+0x500>
 80021e2:	0022      	movs	r2, r4
 80021e4:	4302      	orrs	r2, r0
 80021e6:	2f00      	cmp	r7, #0
 80021e8:	d000      	beq.n	80021ec <__aeabi_dsub+0x400>
 80021ea:	e0ef      	b.n	80023cc <__aeabi_dsub+0x5e0>
 80021ec:	2a00      	cmp	r2, #0
 80021ee:	d100      	bne.n	80021f2 <__aeabi_dsub+0x406>
 80021f0:	e0e5      	b.n	80023be <__aeabi_dsub+0x5d2>
 80021f2:	4662      	mov	r2, ip
 80021f4:	9902      	ldr	r1, [sp, #8]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	d100      	bne.n	80021fc <__aeabi_dsub+0x410>
 80021fa:	e0c5      	b.n	8002388 <__aeabi_dsub+0x59c>
 80021fc:	4663      	mov	r3, ip
 80021fe:	18c5      	adds	r5, r0, r3
 8002200:	468c      	mov	ip, r1
 8002202:	4285      	cmp	r5, r0
 8002204:	4180      	sbcs	r0, r0
 8002206:	4464      	add	r4, ip
 8002208:	4240      	negs	r0, r0
 800220a:	1824      	adds	r4, r4, r0
 800220c:	0223      	lsls	r3, r4, #8
 800220e:	d502      	bpl.n	8002216 <__aeabi_dsub+0x42a>
 8002210:	4bb9      	ldr	r3, [pc, #740]	@ (80024f8 <__aeabi_dsub+0x70c>)
 8002212:	3701      	adds	r7, #1
 8002214:	401c      	ands	r4, r3
 8002216:	46ba      	mov	sl, r7
 8002218:	9503      	str	r5, [sp, #12]
 800221a:	e7d5      	b.n	80021c8 <__aeabi_dsub+0x3dc>
 800221c:	4662      	mov	r2, ip
 800221e:	1a85      	subs	r5, r0, r2
 8002220:	42a8      	cmp	r0, r5
 8002222:	4192      	sbcs	r2, r2
 8002224:	4252      	negs	r2, r2
 8002226:	4691      	mov	r9, r2
 8002228:	9b02      	ldr	r3, [sp, #8]
 800222a:	1ae3      	subs	r3, r4, r3
 800222c:	001a      	movs	r2, r3
 800222e:	464b      	mov	r3, r9
 8002230:	1ad2      	subs	r2, r2, r3
 8002232:	0013      	movs	r3, r2
 8002234:	4691      	mov	r9, r2
 8002236:	021a      	lsls	r2, r3, #8
 8002238:	d46c      	bmi.n	8002314 <__aeabi_dsub+0x528>
 800223a:	464a      	mov	r2, r9
 800223c:	464c      	mov	r4, r9
 800223e:	432a      	orrs	r2, r5
 8002240:	d000      	beq.n	8002244 <__aeabi_dsub+0x458>
 8002242:	e63a      	b.n	8001eba <__aeabi_dsub+0xce>
 8002244:	2600      	movs	r6, #0
 8002246:	2400      	movs	r4, #0
 8002248:	2500      	movs	r5, #0
 800224a:	e678      	b.n	8001f3e <__aeabi_dsub+0x152>
 800224c:	9902      	ldr	r1, [sp, #8]
 800224e:	4653      	mov	r3, sl
 8002250:	000d      	movs	r5, r1
 8002252:	3a20      	subs	r2, #32
 8002254:	40d5      	lsrs	r5, r2
 8002256:	2b20      	cmp	r3, #32
 8002258:	d006      	beq.n	8002268 <__aeabi_dsub+0x47c>
 800225a:	2240      	movs	r2, #64	@ 0x40
 800225c:	1ad2      	subs	r2, r2, r3
 800225e:	000b      	movs	r3, r1
 8002260:	4093      	lsls	r3, r2
 8002262:	4662      	mov	r2, ip
 8002264:	431a      	orrs	r2, r3
 8002266:	4693      	mov	fp, r2
 8002268:	465b      	mov	r3, fp
 800226a:	1e5a      	subs	r2, r3, #1
 800226c:	4193      	sbcs	r3, r2
 800226e:	431d      	orrs	r5, r3
 8002270:	e619      	b.n	8001ea6 <__aeabi_dsub+0xba>
 8002272:	4653      	mov	r3, sl
 8002274:	1e5a      	subs	r2, r3, #1
 8002276:	2b01      	cmp	r3, #1
 8002278:	d100      	bne.n	800227c <__aeabi_dsub+0x490>
 800227a:	e0c6      	b.n	800240a <__aeabi_dsub+0x61e>
 800227c:	4e9d      	ldr	r6, [pc, #628]	@ (80024f4 <__aeabi_dsub+0x708>)
 800227e:	45b2      	cmp	sl, r6
 8002280:	d100      	bne.n	8002284 <__aeabi_dsub+0x498>
 8002282:	e6bd      	b.n	8002000 <__aeabi_dsub+0x214>
 8002284:	4688      	mov	r8, r1
 8002286:	000e      	movs	r6, r1
 8002288:	2501      	movs	r5, #1
 800228a:	2a38      	cmp	r2, #56	@ 0x38
 800228c:	dc10      	bgt.n	80022b0 <__aeabi_dsub+0x4c4>
 800228e:	2a1f      	cmp	r2, #31
 8002290:	dc7f      	bgt.n	8002392 <__aeabi_dsub+0x5a6>
 8002292:	2120      	movs	r1, #32
 8002294:	0025      	movs	r5, r4
 8002296:	1a89      	subs	r1, r1, r2
 8002298:	0007      	movs	r7, r0
 800229a:	4088      	lsls	r0, r1
 800229c:	408d      	lsls	r5, r1
 800229e:	40d7      	lsrs	r7, r2
 80022a0:	40d4      	lsrs	r4, r2
 80022a2:	1e41      	subs	r1, r0, #1
 80022a4:	4188      	sbcs	r0, r1
 80022a6:	9b02      	ldr	r3, [sp, #8]
 80022a8:	433d      	orrs	r5, r7
 80022aa:	1b1b      	subs	r3, r3, r4
 80022ac:	4305      	orrs	r5, r0
 80022ae:	9302      	str	r3, [sp, #8]
 80022b0:	4662      	mov	r2, ip
 80022b2:	1b55      	subs	r5, r2, r5
 80022b4:	45ac      	cmp	ip, r5
 80022b6:	4192      	sbcs	r2, r2
 80022b8:	9b02      	ldr	r3, [sp, #8]
 80022ba:	4252      	negs	r2, r2
 80022bc:	464f      	mov	r7, r9
 80022be:	1a9c      	subs	r4, r3, r2
 80022c0:	e5f6      	b.n	8001eb0 <__aeabi_dsub+0xc4>
 80022c2:	2d00      	cmp	r5, #0
 80022c4:	d000      	beq.n	80022c8 <__aeabi_dsub+0x4dc>
 80022c6:	e0b7      	b.n	8002438 <__aeabi_dsub+0x64c>
 80022c8:	2a00      	cmp	r2, #0
 80022ca:	d100      	bne.n	80022ce <__aeabi_dsub+0x4e2>
 80022cc:	e0f0      	b.n	80024b0 <__aeabi_dsub+0x6c4>
 80022ce:	2601      	movs	r6, #1
 80022d0:	400e      	ands	r6, r1
 80022d2:	4663      	mov	r3, ip
 80022d4:	9802      	ldr	r0, [sp, #8]
 80022d6:	08d9      	lsrs	r1, r3, #3
 80022d8:	0742      	lsls	r2, r0, #29
 80022da:	430a      	orrs	r2, r1
 80022dc:	08c4      	lsrs	r4, r0, #3
 80022de:	e696      	b.n	800200e <__aeabi_dsub+0x222>
 80022e0:	4c85      	ldr	r4, [pc, #532]	@ (80024f8 <__aeabi_dsub+0x70c>)
 80022e2:	1aff      	subs	r7, r7, r3
 80022e4:	4014      	ands	r4, r2
 80022e6:	0762      	lsls	r2, r4, #29
 80022e8:	08e4      	lsrs	r4, r4, #3
 80022ea:	e760      	b.n	80021ae <__aeabi_dsub+0x3c2>
 80022ec:	4981      	ldr	r1, [pc, #516]	@ (80024f4 <__aeabi_dsub+0x708>)
 80022ee:	428a      	cmp	r2, r1
 80022f0:	d100      	bne.n	80022f4 <__aeabi_dsub+0x508>
 80022f2:	e0c9      	b.n	8002488 <__aeabi_dsub+0x69c>
 80022f4:	4663      	mov	r3, ip
 80022f6:	18c1      	adds	r1, r0, r3
 80022f8:	4281      	cmp	r1, r0
 80022fa:	4180      	sbcs	r0, r0
 80022fc:	9b02      	ldr	r3, [sp, #8]
 80022fe:	4240      	negs	r0, r0
 8002300:	18e3      	adds	r3, r4, r3
 8002302:	181b      	adds	r3, r3, r0
 8002304:	07dd      	lsls	r5, r3, #31
 8002306:	085c      	lsrs	r4, r3, #1
 8002308:	2307      	movs	r3, #7
 800230a:	0849      	lsrs	r1, r1, #1
 800230c:	430d      	orrs	r5, r1
 800230e:	0017      	movs	r7, r2
 8002310:	402b      	ands	r3, r5
 8002312:	e710      	b.n	8002136 <__aeabi_dsub+0x34a>
 8002314:	4663      	mov	r3, ip
 8002316:	1a1d      	subs	r5, r3, r0
 8002318:	45ac      	cmp	ip, r5
 800231a:	4192      	sbcs	r2, r2
 800231c:	2601      	movs	r6, #1
 800231e:	9b02      	ldr	r3, [sp, #8]
 8002320:	4252      	negs	r2, r2
 8002322:	1b1c      	subs	r4, r3, r4
 8002324:	4688      	mov	r8, r1
 8002326:	1aa4      	subs	r4, r4, r2
 8002328:	400e      	ands	r6, r1
 800232a:	e5c6      	b.n	8001eba <__aeabi_dsub+0xce>
 800232c:	4663      	mov	r3, ip
 800232e:	18c5      	adds	r5, r0, r3
 8002330:	9b02      	ldr	r3, [sp, #8]
 8002332:	4285      	cmp	r5, r0
 8002334:	4180      	sbcs	r0, r0
 8002336:	469c      	mov	ip, r3
 8002338:	4240      	negs	r0, r0
 800233a:	4464      	add	r4, ip
 800233c:	1824      	adds	r4, r4, r0
 800233e:	2701      	movs	r7, #1
 8002340:	0223      	lsls	r3, r4, #8
 8002342:	d400      	bmi.n	8002346 <__aeabi_dsub+0x55a>
 8002344:	e6f5      	b.n	8002132 <__aeabi_dsub+0x346>
 8002346:	2702      	movs	r7, #2
 8002348:	e641      	b.n	8001fce <__aeabi_dsub+0x1e2>
 800234a:	4663      	mov	r3, ip
 800234c:	1ac5      	subs	r5, r0, r3
 800234e:	42a8      	cmp	r0, r5
 8002350:	4180      	sbcs	r0, r0
 8002352:	9b02      	ldr	r3, [sp, #8]
 8002354:	4240      	negs	r0, r0
 8002356:	1ae4      	subs	r4, r4, r3
 8002358:	2701      	movs	r7, #1
 800235a:	1a24      	subs	r4, r4, r0
 800235c:	e5a8      	b.n	8001eb0 <__aeabi_dsub+0xc4>
 800235e:	9d02      	ldr	r5, [sp, #8]
 8002360:	4652      	mov	r2, sl
 8002362:	002b      	movs	r3, r5
 8002364:	3a20      	subs	r2, #32
 8002366:	40d3      	lsrs	r3, r2
 8002368:	0019      	movs	r1, r3
 800236a:	4653      	mov	r3, sl
 800236c:	2b20      	cmp	r3, #32
 800236e:	d006      	beq.n	800237e <__aeabi_dsub+0x592>
 8002370:	2240      	movs	r2, #64	@ 0x40
 8002372:	1ad2      	subs	r2, r2, r3
 8002374:	002b      	movs	r3, r5
 8002376:	4093      	lsls	r3, r2
 8002378:	4662      	mov	r2, ip
 800237a:	431a      	orrs	r2, r3
 800237c:	4693      	mov	fp, r2
 800237e:	465d      	mov	r5, fp
 8002380:	1e6b      	subs	r3, r5, #1
 8002382:	419d      	sbcs	r5, r3
 8002384:	430d      	orrs	r5, r1
 8002386:	e615      	b.n	8001fb4 <__aeabi_dsub+0x1c8>
 8002388:	0762      	lsls	r2, r4, #29
 800238a:	08c0      	lsrs	r0, r0, #3
 800238c:	4302      	orrs	r2, r0
 800238e:	08e4      	lsrs	r4, r4, #3
 8002390:	e70d      	b.n	80021ae <__aeabi_dsub+0x3c2>
 8002392:	0011      	movs	r1, r2
 8002394:	0027      	movs	r7, r4
 8002396:	3920      	subs	r1, #32
 8002398:	40cf      	lsrs	r7, r1
 800239a:	2a20      	cmp	r2, #32
 800239c:	d005      	beq.n	80023aa <__aeabi_dsub+0x5be>
 800239e:	2140      	movs	r1, #64	@ 0x40
 80023a0:	1a8a      	subs	r2, r1, r2
 80023a2:	4094      	lsls	r4, r2
 80023a4:	0025      	movs	r5, r4
 80023a6:	4305      	orrs	r5, r0
 80023a8:	9503      	str	r5, [sp, #12]
 80023aa:	9d03      	ldr	r5, [sp, #12]
 80023ac:	1e6a      	subs	r2, r5, #1
 80023ae:	4195      	sbcs	r5, r2
 80023b0:	433d      	orrs	r5, r7
 80023b2:	e77d      	b.n	80022b0 <__aeabi_dsub+0x4c4>
 80023b4:	2a00      	cmp	r2, #0
 80023b6:	d100      	bne.n	80023ba <__aeabi_dsub+0x5ce>
 80023b8:	e744      	b.n	8002244 <__aeabi_dsub+0x458>
 80023ba:	2601      	movs	r6, #1
 80023bc:	400e      	ands	r6, r1
 80023be:	4663      	mov	r3, ip
 80023c0:	08d9      	lsrs	r1, r3, #3
 80023c2:	9b02      	ldr	r3, [sp, #8]
 80023c4:	075a      	lsls	r2, r3, #29
 80023c6:	430a      	orrs	r2, r1
 80023c8:	08dc      	lsrs	r4, r3, #3
 80023ca:	e6f0      	b.n	80021ae <__aeabi_dsub+0x3c2>
 80023cc:	2a00      	cmp	r2, #0
 80023ce:	d028      	beq.n	8002422 <__aeabi_dsub+0x636>
 80023d0:	4662      	mov	r2, ip
 80023d2:	9f02      	ldr	r7, [sp, #8]
 80023d4:	08c0      	lsrs	r0, r0, #3
 80023d6:	433a      	orrs	r2, r7
 80023d8:	d100      	bne.n	80023dc <__aeabi_dsub+0x5f0>
 80023da:	e6dc      	b.n	8002196 <__aeabi_dsub+0x3aa>
 80023dc:	0762      	lsls	r2, r4, #29
 80023de:	4310      	orrs	r0, r2
 80023e0:	2280      	movs	r2, #128	@ 0x80
 80023e2:	08e4      	lsrs	r4, r4, #3
 80023e4:	0312      	lsls	r2, r2, #12
 80023e6:	4214      	tst	r4, r2
 80023e8:	d009      	beq.n	80023fe <__aeabi_dsub+0x612>
 80023ea:	08fd      	lsrs	r5, r7, #3
 80023ec:	4215      	tst	r5, r2
 80023ee:	d106      	bne.n	80023fe <__aeabi_dsub+0x612>
 80023f0:	4663      	mov	r3, ip
 80023f2:	2601      	movs	r6, #1
 80023f4:	002c      	movs	r4, r5
 80023f6:	08d8      	lsrs	r0, r3, #3
 80023f8:	077b      	lsls	r3, r7, #29
 80023fa:	4318      	orrs	r0, r3
 80023fc:	400e      	ands	r6, r1
 80023fe:	0f42      	lsrs	r2, r0, #29
 8002400:	00c0      	lsls	r0, r0, #3
 8002402:	08c0      	lsrs	r0, r0, #3
 8002404:	0752      	lsls	r2, r2, #29
 8002406:	4302      	orrs	r2, r0
 8002408:	e601      	b.n	800200e <__aeabi_dsub+0x222>
 800240a:	4663      	mov	r3, ip
 800240c:	1a1d      	subs	r5, r3, r0
 800240e:	45ac      	cmp	ip, r5
 8002410:	4192      	sbcs	r2, r2
 8002412:	9b02      	ldr	r3, [sp, #8]
 8002414:	4252      	negs	r2, r2
 8002416:	1b1c      	subs	r4, r3, r4
 8002418:	000e      	movs	r6, r1
 800241a:	4688      	mov	r8, r1
 800241c:	2701      	movs	r7, #1
 800241e:	1aa4      	subs	r4, r4, r2
 8002420:	e546      	b.n	8001eb0 <__aeabi_dsub+0xc4>
 8002422:	4663      	mov	r3, ip
 8002424:	08d9      	lsrs	r1, r3, #3
 8002426:	9b02      	ldr	r3, [sp, #8]
 8002428:	075a      	lsls	r2, r3, #29
 800242a:	430a      	orrs	r2, r1
 800242c:	08dc      	lsrs	r4, r3, #3
 800242e:	e5ee      	b.n	800200e <__aeabi_dsub+0x222>
 8002430:	4663      	mov	r3, ip
 8002432:	9c02      	ldr	r4, [sp, #8]
 8002434:	9303      	str	r3, [sp, #12]
 8002436:	e6c7      	b.n	80021c8 <__aeabi_dsub+0x3dc>
 8002438:	08c0      	lsrs	r0, r0, #3
 800243a:	2a00      	cmp	r2, #0
 800243c:	d100      	bne.n	8002440 <__aeabi_dsub+0x654>
 800243e:	e6aa      	b.n	8002196 <__aeabi_dsub+0x3aa>
 8002440:	0762      	lsls	r2, r4, #29
 8002442:	4310      	orrs	r0, r2
 8002444:	2280      	movs	r2, #128	@ 0x80
 8002446:	08e4      	lsrs	r4, r4, #3
 8002448:	0312      	lsls	r2, r2, #12
 800244a:	4214      	tst	r4, r2
 800244c:	d0d7      	beq.n	80023fe <__aeabi_dsub+0x612>
 800244e:	9f02      	ldr	r7, [sp, #8]
 8002450:	08fd      	lsrs	r5, r7, #3
 8002452:	4215      	tst	r5, r2
 8002454:	d1d3      	bne.n	80023fe <__aeabi_dsub+0x612>
 8002456:	4663      	mov	r3, ip
 8002458:	2601      	movs	r6, #1
 800245a:	08d8      	lsrs	r0, r3, #3
 800245c:	077b      	lsls	r3, r7, #29
 800245e:	002c      	movs	r4, r5
 8002460:	4318      	orrs	r0, r3
 8002462:	400e      	ands	r6, r1
 8002464:	e7cb      	b.n	80023fe <__aeabi_dsub+0x612>
 8002466:	000a      	movs	r2, r1
 8002468:	0027      	movs	r7, r4
 800246a:	3a20      	subs	r2, #32
 800246c:	40d7      	lsrs	r7, r2
 800246e:	2920      	cmp	r1, #32
 8002470:	d005      	beq.n	800247e <__aeabi_dsub+0x692>
 8002472:	2240      	movs	r2, #64	@ 0x40
 8002474:	1a52      	subs	r2, r2, r1
 8002476:	4094      	lsls	r4, r2
 8002478:	0025      	movs	r5, r4
 800247a:	4305      	orrs	r5, r0
 800247c:	9503      	str	r5, [sp, #12]
 800247e:	9d03      	ldr	r5, [sp, #12]
 8002480:	1e6a      	subs	r2, r5, #1
 8002482:	4195      	sbcs	r5, r2
 8002484:	432f      	orrs	r7, r5
 8002486:	e610      	b.n	80020aa <__aeabi_dsub+0x2be>
 8002488:	0014      	movs	r4, r2
 800248a:	2500      	movs	r5, #0
 800248c:	2200      	movs	r2, #0
 800248e:	e556      	b.n	8001f3e <__aeabi_dsub+0x152>
 8002490:	9b02      	ldr	r3, [sp, #8]
 8002492:	4460      	add	r0, ip
 8002494:	4699      	mov	r9, r3
 8002496:	4560      	cmp	r0, ip
 8002498:	4192      	sbcs	r2, r2
 800249a:	444c      	add	r4, r9
 800249c:	4252      	negs	r2, r2
 800249e:	0005      	movs	r5, r0
 80024a0:	18a4      	adds	r4, r4, r2
 80024a2:	e74c      	b.n	800233e <__aeabi_dsub+0x552>
 80024a4:	001a      	movs	r2, r3
 80024a6:	001c      	movs	r4, r3
 80024a8:	432a      	orrs	r2, r5
 80024aa:	d000      	beq.n	80024ae <__aeabi_dsub+0x6c2>
 80024ac:	e6b3      	b.n	8002216 <__aeabi_dsub+0x42a>
 80024ae:	e6c9      	b.n	8002244 <__aeabi_dsub+0x458>
 80024b0:	2480      	movs	r4, #128	@ 0x80
 80024b2:	2600      	movs	r6, #0
 80024b4:	0324      	lsls	r4, r4, #12
 80024b6:	e5ae      	b.n	8002016 <__aeabi_dsub+0x22a>
 80024b8:	2120      	movs	r1, #32
 80024ba:	2500      	movs	r5, #0
 80024bc:	1a09      	subs	r1, r1, r0
 80024be:	e517      	b.n	8001ef0 <__aeabi_dsub+0x104>
 80024c0:	2200      	movs	r2, #0
 80024c2:	2500      	movs	r5, #0
 80024c4:	4c0b      	ldr	r4, [pc, #44]	@ (80024f4 <__aeabi_dsub+0x708>)
 80024c6:	e53a      	b.n	8001f3e <__aeabi_dsub+0x152>
 80024c8:	2d00      	cmp	r5, #0
 80024ca:	d100      	bne.n	80024ce <__aeabi_dsub+0x6e2>
 80024cc:	e5f6      	b.n	80020bc <__aeabi_dsub+0x2d0>
 80024ce:	464b      	mov	r3, r9
 80024d0:	1bda      	subs	r2, r3, r7
 80024d2:	4692      	mov	sl, r2
 80024d4:	2f00      	cmp	r7, #0
 80024d6:	d100      	bne.n	80024da <__aeabi_dsub+0x6ee>
 80024d8:	e66f      	b.n	80021ba <__aeabi_dsub+0x3ce>
 80024da:	2a38      	cmp	r2, #56	@ 0x38
 80024dc:	dc05      	bgt.n	80024ea <__aeabi_dsub+0x6fe>
 80024de:	2680      	movs	r6, #128	@ 0x80
 80024e0:	0436      	lsls	r6, r6, #16
 80024e2:	4334      	orrs	r4, r6
 80024e4:	4688      	mov	r8, r1
 80024e6:	000e      	movs	r6, r1
 80024e8:	e6d1      	b.n	800228e <__aeabi_dsub+0x4a2>
 80024ea:	4688      	mov	r8, r1
 80024ec:	000e      	movs	r6, r1
 80024ee:	2501      	movs	r5, #1
 80024f0:	e6de      	b.n	80022b0 <__aeabi_dsub+0x4c4>
 80024f2:	46c0      	nop			@ (mov r8, r8)
 80024f4:	000007ff 	.word	0x000007ff
 80024f8:	ff7fffff 	.word	0xff7fffff
 80024fc:	000007fe 	.word	0x000007fe
 8002500:	2d00      	cmp	r5, #0
 8002502:	d100      	bne.n	8002506 <__aeabi_dsub+0x71a>
 8002504:	e668      	b.n	80021d8 <__aeabi_dsub+0x3ec>
 8002506:	464b      	mov	r3, r9
 8002508:	1bd9      	subs	r1, r3, r7
 800250a:	2f00      	cmp	r7, #0
 800250c:	d101      	bne.n	8002512 <__aeabi_dsub+0x726>
 800250e:	468a      	mov	sl, r1
 8002510:	e5a7      	b.n	8002062 <__aeabi_dsub+0x276>
 8002512:	2701      	movs	r7, #1
 8002514:	2938      	cmp	r1, #56	@ 0x38
 8002516:	dd00      	ble.n	800251a <__aeabi_dsub+0x72e>
 8002518:	e5c7      	b.n	80020aa <__aeabi_dsub+0x2be>
 800251a:	2280      	movs	r2, #128	@ 0x80
 800251c:	0412      	lsls	r2, r2, #16
 800251e:	4314      	orrs	r4, r2
 8002520:	e5af      	b.n	8002082 <__aeabi_dsub+0x296>
 8002522:	46c0      	nop			@ (mov r8, r8)

08002524 <__aeabi_dcmpun>:
 8002524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002526:	46c6      	mov	lr, r8
 8002528:	031e      	lsls	r6, r3, #12
 800252a:	0b36      	lsrs	r6, r6, #12
 800252c:	46b0      	mov	r8, r6
 800252e:	4e0d      	ldr	r6, [pc, #52]	@ (8002564 <__aeabi_dcmpun+0x40>)
 8002530:	030c      	lsls	r4, r1, #12
 8002532:	004d      	lsls	r5, r1, #1
 8002534:	005f      	lsls	r7, r3, #1
 8002536:	b500      	push	{lr}
 8002538:	0b24      	lsrs	r4, r4, #12
 800253a:	0d6d      	lsrs	r5, r5, #21
 800253c:	0d7f      	lsrs	r7, r7, #21
 800253e:	42b5      	cmp	r5, r6
 8002540:	d00b      	beq.n	800255a <__aeabi_dcmpun+0x36>
 8002542:	4908      	ldr	r1, [pc, #32]	@ (8002564 <__aeabi_dcmpun+0x40>)
 8002544:	2000      	movs	r0, #0
 8002546:	428f      	cmp	r7, r1
 8002548:	d104      	bne.n	8002554 <__aeabi_dcmpun+0x30>
 800254a:	4646      	mov	r6, r8
 800254c:	4316      	orrs	r6, r2
 800254e:	0030      	movs	r0, r6
 8002550:	1e43      	subs	r3, r0, #1
 8002552:	4198      	sbcs	r0, r3
 8002554:	bc80      	pop	{r7}
 8002556:	46b8      	mov	r8, r7
 8002558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800255a:	4304      	orrs	r4, r0
 800255c:	2001      	movs	r0, #1
 800255e:	2c00      	cmp	r4, #0
 8002560:	d1f8      	bne.n	8002554 <__aeabi_dcmpun+0x30>
 8002562:	e7ee      	b.n	8002542 <__aeabi_dcmpun+0x1e>
 8002564:	000007ff 	.word	0x000007ff

08002568 <__aeabi_i2d>:
 8002568:	b570      	push	{r4, r5, r6, lr}
 800256a:	2800      	cmp	r0, #0
 800256c:	d016      	beq.n	800259c <__aeabi_i2d+0x34>
 800256e:	17c3      	asrs	r3, r0, #31
 8002570:	18c5      	adds	r5, r0, r3
 8002572:	405d      	eors	r5, r3
 8002574:	0fc4      	lsrs	r4, r0, #31
 8002576:	0028      	movs	r0, r5
 8002578:	f000 f8f0 	bl	800275c <__clzsi2>
 800257c:	4b10      	ldr	r3, [pc, #64]	@ (80025c0 <__aeabi_i2d+0x58>)
 800257e:	1a1b      	subs	r3, r3, r0
 8002580:	055b      	lsls	r3, r3, #21
 8002582:	0d5b      	lsrs	r3, r3, #21
 8002584:	280a      	cmp	r0, #10
 8002586:	dc14      	bgt.n	80025b2 <__aeabi_i2d+0x4a>
 8002588:	0002      	movs	r2, r0
 800258a:	002e      	movs	r6, r5
 800258c:	3215      	adds	r2, #21
 800258e:	4096      	lsls	r6, r2
 8002590:	220b      	movs	r2, #11
 8002592:	1a12      	subs	r2, r2, r0
 8002594:	40d5      	lsrs	r5, r2
 8002596:	032d      	lsls	r5, r5, #12
 8002598:	0b2d      	lsrs	r5, r5, #12
 800259a:	e003      	b.n	80025a4 <__aeabi_i2d+0x3c>
 800259c:	2400      	movs	r4, #0
 800259e:	2300      	movs	r3, #0
 80025a0:	2500      	movs	r5, #0
 80025a2:	2600      	movs	r6, #0
 80025a4:	051b      	lsls	r3, r3, #20
 80025a6:	432b      	orrs	r3, r5
 80025a8:	07e4      	lsls	r4, r4, #31
 80025aa:	4323      	orrs	r3, r4
 80025ac:	0030      	movs	r0, r6
 80025ae:	0019      	movs	r1, r3
 80025b0:	bd70      	pop	{r4, r5, r6, pc}
 80025b2:	380b      	subs	r0, #11
 80025b4:	4085      	lsls	r5, r0
 80025b6:	032d      	lsls	r5, r5, #12
 80025b8:	2600      	movs	r6, #0
 80025ba:	0b2d      	lsrs	r5, r5, #12
 80025bc:	e7f2      	b.n	80025a4 <__aeabi_i2d+0x3c>
 80025be:	46c0      	nop			@ (mov r8, r8)
 80025c0:	0000041e 	.word	0x0000041e

080025c4 <__aeabi_f2d>:
 80025c4:	b570      	push	{r4, r5, r6, lr}
 80025c6:	0242      	lsls	r2, r0, #9
 80025c8:	0043      	lsls	r3, r0, #1
 80025ca:	0fc4      	lsrs	r4, r0, #31
 80025cc:	20fe      	movs	r0, #254	@ 0xfe
 80025ce:	0e1b      	lsrs	r3, r3, #24
 80025d0:	1c59      	adds	r1, r3, #1
 80025d2:	0a55      	lsrs	r5, r2, #9
 80025d4:	4208      	tst	r0, r1
 80025d6:	d00c      	beq.n	80025f2 <__aeabi_f2d+0x2e>
 80025d8:	21e0      	movs	r1, #224	@ 0xe0
 80025da:	0089      	lsls	r1, r1, #2
 80025dc:	468c      	mov	ip, r1
 80025de:	076d      	lsls	r5, r5, #29
 80025e0:	0b12      	lsrs	r2, r2, #12
 80025e2:	4463      	add	r3, ip
 80025e4:	051b      	lsls	r3, r3, #20
 80025e6:	4313      	orrs	r3, r2
 80025e8:	07e4      	lsls	r4, r4, #31
 80025ea:	4323      	orrs	r3, r4
 80025ec:	0028      	movs	r0, r5
 80025ee:	0019      	movs	r1, r3
 80025f0:	bd70      	pop	{r4, r5, r6, pc}
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d114      	bne.n	8002620 <__aeabi_f2d+0x5c>
 80025f6:	2d00      	cmp	r5, #0
 80025f8:	d01b      	beq.n	8002632 <__aeabi_f2d+0x6e>
 80025fa:	0028      	movs	r0, r5
 80025fc:	f000 f8ae 	bl	800275c <__clzsi2>
 8002600:	280a      	cmp	r0, #10
 8002602:	dc1c      	bgt.n	800263e <__aeabi_f2d+0x7a>
 8002604:	230b      	movs	r3, #11
 8002606:	002a      	movs	r2, r5
 8002608:	1a1b      	subs	r3, r3, r0
 800260a:	40da      	lsrs	r2, r3
 800260c:	0003      	movs	r3, r0
 800260e:	3315      	adds	r3, #21
 8002610:	409d      	lsls	r5, r3
 8002612:	4b0e      	ldr	r3, [pc, #56]	@ (800264c <__aeabi_f2d+0x88>)
 8002614:	0312      	lsls	r2, r2, #12
 8002616:	1a1b      	subs	r3, r3, r0
 8002618:	055b      	lsls	r3, r3, #21
 800261a:	0b12      	lsrs	r2, r2, #12
 800261c:	0d5b      	lsrs	r3, r3, #21
 800261e:	e7e1      	b.n	80025e4 <__aeabi_f2d+0x20>
 8002620:	2d00      	cmp	r5, #0
 8002622:	d009      	beq.n	8002638 <__aeabi_f2d+0x74>
 8002624:	0b13      	lsrs	r3, r2, #12
 8002626:	2280      	movs	r2, #128	@ 0x80
 8002628:	0312      	lsls	r2, r2, #12
 800262a:	431a      	orrs	r2, r3
 800262c:	076d      	lsls	r5, r5, #29
 800262e:	4b08      	ldr	r3, [pc, #32]	@ (8002650 <__aeabi_f2d+0x8c>)
 8002630:	e7d8      	b.n	80025e4 <__aeabi_f2d+0x20>
 8002632:	2300      	movs	r3, #0
 8002634:	2200      	movs	r2, #0
 8002636:	e7d5      	b.n	80025e4 <__aeabi_f2d+0x20>
 8002638:	2200      	movs	r2, #0
 800263a:	4b05      	ldr	r3, [pc, #20]	@ (8002650 <__aeabi_f2d+0x8c>)
 800263c:	e7d2      	b.n	80025e4 <__aeabi_f2d+0x20>
 800263e:	0003      	movs	r3, r0
 8002640:	002a      	movs	r2, r5
 8002642:	3b0b      	subs	r3, #11
 8002644:	409a      	lsls	r2, r3
 8002646:	2500      	movs	r5, #0
 8002648:	e7e3      	b.n	8002612 <__aeabi_f2d+0x4e>
 800264a:	46c0      	nop			@ (mov r8, r8)
 800264c:	00000389 	.word	0x00000389
 8002650:	000007ff 	.word	0x000007ff

08002654 <__aeabi_d2f>:
 8002654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002656:	004b      	lsls	r3, r1, #1
 8002658:	030f      	lsls	r7, r1, #12
 800265a:	0d5b      	lsrs	r3, r3, #21
 800265c:	4c3b      	ldr	r4, [pc, #236]	@ (800274c <__aeabi_d2f+0xf8>)
 800265e:	0f45      	lsrs	r5, r0, #29
 8002660:	b083      	sub	sp, #12
 8002662:	0a7f      	lsrs	r7, r7, #9
 8002664:	1c5e      	adds	r6, r3, #1
 8002666:	432f      	orrs	r7, r5
 8002668:	9000      	str	r0, [sp, #0]
 800266a:	9101      	str	r1, [sp, #4]
 800266c:	0fca      	lsrs	r2, r1, #31
 800266e:	00c5      	lsls	r5, r0, #3
 8002670:	4226      	tst	r6, r4
 8002672:	d00b      	beq.n	800268c <__aeabi_d2f+0x38>
 8002674:	4936      	ldr	r1, [pc, #216]	@ (8002750 <__aeabi_d2f+0xfc>)
 8002676:	185c      	adds	r4, r3, r1
 8002678:	2cfe      	cmp	r4, #254	@ 0xfe
 800267a:	dd13      	ble.n	80026a4 <__aeabi_d2f+0x50>
 800267c:	20ff      	movs	r0, #255	@ 0xff
 800267e:	2300      	movs	r3, #0
 8002680:	05c0      	lsls	r0, r0, #23
 8002682:	4318      	orrs	r0, r3
 8002684:	07d2      	lsls	r2, r2, #31
 8002686:	4310      	orrs	r0, r2
 8002688:	b003      	add	sp, #12
 800268a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800268c:	2b00      	cmp	r3, #0
 800268e:	d102      	bne.n	8002696 <__aeabi_d2f+0x42>
 8002690:	2000      	movs	r0, #0
 8002692:	2300      	movs	r3, #0
 8002694:	e7f4      	b.n	8002680 <__aeabi_d2f+0x2c>
 8002696:	433d      	orrs	r5, r7
 8002698:	d0f0      	beq.n	800267c <__aeabi_d2f+0x28>
 800269a:	2380      	movs	r3, #128	@ 0x80
 800269c:	03db      	lsls	r3, r3, #15
 800269e:	20ff      	movs	r0, #255	@ 0xff
 80026a0:	433b      	orrs	r3, r7
 80026a2:	e7ed      	b.n	8002680 <__aeabi_d2f+0x2c>
 80026a4:	2c00      	cmp	r4, #0
 80026a6:	dd14      	ble.n	80026d2 <__aeabi_d2f+0x7e>
 80026a8:	9b00      	ldr	r3, [sp, #0]
 80026aa:	00ff      	lsls	r7, r7, #3
 80026ac:	019b      	lsls	r3, r3, #6
 80026ae:	1e58      	subs	r0, r3, #1
 80026b0:	4183      	sbcs	r3, r0
 80026b2:	0f69      	lsrs	r1, r5, #29
 80026b4:	433b      	orrs	r3, r7
 80026b6:	430b      	orrs	r3, r1
 80026b8:	0759      	lsls	r1, r3, #29
 80026ba:	d041      	beq.n	8002740 <__aeabi_d2f+0xec>
 80026bc:	210f      	movs	r1, #15
 80026be:	4019      	ands	r1, r3
 80026c0:	2904      	cmp	r1, #4
 80026c2:	d028      	beq.n	8002716 <__aeabi_d2f+0xc2>
 80026c4:	3304      	adds	r3, #4
 80026c6:	0159      	lsls	r1, r3, #5
 80026c8:	d525      	bpl.n	8002716 <__aeabi_d2f+0xc2>
 80026ca:	3401      	adds	r4, #1
 80026cc:	2300      	movs	r3, #0
 80026ce:	b2e0      	uxtb	r0, r4
 80026d0:	e7d6      	b.n	8002680 <__aeabi_d2f+0x2c>
 80026d2:	0021      	movs	r1, r4
 80026d4:	3117      	adds	r1, #23
 80026d6:	dbdb      	blt.n	8002690 <__aeabi_d2f+0x3c>
 80026d8:	2180      	movs	r1, #128	@ 0x80
 80026da:	201e      	movs	r0, #30
 80026dc:	0409      	lsls	r1, r1, #16
 80026de:	4339      	orrs	r1, r7
 80026e0:	1b00      	subs	r0, r0, r4
 80026e2:	281f      	cmp	r0, #31
 80026e4:	dd1b      	ble.n	800271e <__aeabi_d2f+0xca>
 80026e6:	2602      	movs	r6, #2
 80026e8:	4276      	negs	r6, r6
 80026ea:	1b34      	subs	r4, r6, r4
 80026ec:	000e      	movs	r6, r1
 80026ee:	40e6      	lsrs	r6, r4
 80026f0:	0034      	movs	r4, r6
 80026f2:	2820      	cmp	r0, #32
 80026f4:	d004      	beq.n	8002700 <__aeabi_d2f+0xac>
 80026f6:	4817      	ldr	r0, [pc, #92]	@ (8002754 <__aeabi_d2f+0x100>)
 80026f8:	4684      	mov	ip, r0
 80026fa:	4463      	add	r3, ip
 80026fc:	4099      	lsls	r1, r3
 80026fe:	430d      	orrs	r5, r1
 8002700:	002b      	movs	r3, r5
 8002702:	1e59      	subs	r1, r3, #1
 8002704:	418b      	sbcs	r3, r1
 8002706:	4323      	orrs	r3, r4
 8002708:	0759      	lsls	r1, r3, #29
 800270a:	d015      	beq.n	8002738 <__aeabi_d2f+0xe4>
 800270c:	210f      	movs	r1, #15
 800270e:	2400      	movs	r4, #0
 8002710:	4019      	ands	r1, r3
 8002712:	2904      	cmp	r1, #4
 8002714:	d117      	bne.n	8002746 <__aeabi_d2f+0xf2>
 8002716:	019b      	lsls	r3, r3, #6
 8002718:	0a5b      	lsrs	r3, r3, #9
 800271a:	b2e0      	uxtb	r0, r4
 800271c:	e7b0      	b.n	8002680 <__aeabi_d2f+0x2c>
 800271e:	4c0e      	ldr	r4, [pc, #56]	@ (8002758 <__aeabi_d2f+0x104>)
 8002720:	191c      	adds	r4, r3, r4
 8002722:	002b      	movs	r3, r5
 8002724:	40a5      	lsls	r5, r4
 8002726:	40c3      	lsrs	r3, r0
 8002728:	40a1      	lsls	r1, r4
 800272a:	1e68      	subs	r0, r5, #1
 800272c:	4185      	sbcs	r5, r0
 800272e:	4329      	orrs	r1, r5
 8002730:	430b      	orrs	r3, r1
 8002732:	2400      	movs	r4, #0
 8002734:	0759      	lsls	r1, r3, #29
 8002736:	d1c1      	bne.n	80026bc <__aeabi_d2f+0x68>
 8002738:	019b      	lsls	r3, r3, #6
 800273a:	2000      	movs	r0, #0
 800273c:	0a5b      	lsrs	r3, r3, #9
 800273e:	e79f      	b.n	8002680 <__aeabi_d2f+0x2c>
 8002740:	08db      	lsrs	r3, r3, #3
 8002742:	b2e0      	uxtb	r0, r4
 8002744:	e79c      	b.n	8002680 <__aeabi_d2f+0x2c>
 8002746:	3304      	adds	r3, #4
 8002748:	e7e5      	b.n	8002716 <__aeabi_d2f+0xc2>
 800274a:	46c0      	nop			@ (mov r8, r8)
 800274c:	000007fe 	.word	0x000007fe
 8002750:	fffffc80 	.word	0xfffffc80
 8002754:	fffffca2 	.word	0xfffffca2
 8002758:	fffffc82 	.word	0xfffffc82

0800275c <__clzsi2>:
 800275c:	211c      	movs	r1, #28
 800275e:	2301      	movs	r3, #1
 8002760:	041b      	lsls	r3, r3, #16
 8002762:	4298      	cmp	r0, r3
 8002764:	d301      	bcc.n	800276a <__clzsi2+0xe>
 8002766:	0c00      	lsrs	r0, r0, #16
 8002768:	3910      	subs	r1, #16
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	4298      	cmp	r0, r3
 800276e:	d301      	bcc.n	8002774 <__clzsi2+0x18>
 8002770:	0a00      	lsrs	r0, r0, #8
 8002772:	3908      	subs	r1, #8
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	4298      	cmp	r0, r3
 8002778:	d301      	bcc.n	800277e <__clzsi2+0x22>
 800277a:	0900      	lsrs	r0, r0, #4
 800277c:	3904      	subs	r1, #4
 800277e:	a202      	add	r2, pc, #8	@ (adr r2, 8002788 <__clzsi2+0x2c>)
 8002780:	5c10      	ldrb	r0, [r2, r0]
 8002782:	1840      	adds	r0, r0, r1
 8002784:	4770      	bx	lr
 8002786:	46c0      	nop			@ (mov r8, r8)
 8002788:	02020304 	.word	0x02020304
 800278c:	01010101 	.word	0x01010101
	...

08002798 <HAL_ADC_ConvCpltCallback>:
volatile uint16_t adcResultsDMA[2];
const int adcChannelCount = sizeof(adcResultsDMA) / sizeof(adcResultsDMA[0]);		// nice way of writing number of ADC channels
volatile int adcConversionComplete = 0;			// set by callback
static char buffer[200];

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
	adcConversionComplete = 1;
 80027a0:	4b03      	ldr	r3, [pc, #12]	@ (80027b0 <HAL_ADC_ConvCpltCallback+0x18>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	601a      	str	r2, [r3, #0]
}
 80027a6:	46c0      	nop			@ (mov r8, r8)
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b002      	add	sp, #8
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	46c0      	nop			@ (mov r8, r8)
 80027b0:	20000188 	.word	0x20000188

080027b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027b4:	b5b0      	push	{r4, r5, r7, lr}
 80027b6:	b08a      	sub	sp, #40	@ 0x28
 80027b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027ba:	f000 fc11 	bl	8002fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027be:	f000 f905 	bl	80029cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027c2:	f000 f9fb 	bl	8002bbc <MX_GPIO_Init>
  MX_DMA_Init();
 80027c6:	f000 f9db 	bl	8002b80 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80027ca:	f000 f9a9 	bl	8002b20 <MX_USART2_UART_Init>
  MX_ADC_Init();
 80027ce:	f000 f93d 	bl	8002a4c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_RESET);
 80027d2:	4b6e      	ldr	r3, [pc, #440]	@ (800298c <main+0x1d8>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	2110      	movs	r1, #16
 80027d8:	0018      	movs	r0, r3
 80027da:	f001 fe2d 	bl	8004438 <HAL_GPIO_WritePin>
  HAL_ADC_Start_IT (&hadc);
 80027de:	4b6c      	ldr	r3, [pc, #432]	@ (8002990 <main+0x1dc>)
 80027e0:	0018      	movs	r0, r3
 80027e2:	f000 fdc5 	bl	8003370 <HAL_ADC_Start_IT>
//	  HAL_UART_Transmit(&huart2, buffer, 5, HAL_MAX_DELAY);
//	  HAL_Delay(100);
//	  HAL_ADC_Stop(&hadc);


	  HAL_ADC_Start_DMA(&hadc, (uint32_t)adcResultsDMA, adcChannelCount);
 80027e6:	2302      	movs	r3, #2
 80027e8:	001a      	movs	r2, r3
 80027ea:	496a      	ldr	r1, [pc, #424]	@ (8002994 <main+0x1e0>)
 80027ec:	4b68      	ldr	r3, [pc, #416]	@ (8002990 <main+0x1dc>)
 80027ee:	0018      	movs	r0, r3
 80027f0:	f000 fe30 	bl	8003454 <HAL_ADC_Start_DMA>
//	  sprintf((char*)buffer,"Source adr: %d C\n", src);
//	  HAL_UART_Transmit(&huart2, buffer, strlen(buffer), HAL_MAX_DELAY);
//	  sprintf((char*)buffer,"Destination adr: %d C\n", dest);
//	  HAL_UART_Transmit(&huart2, buffer, strlen(buffer), HAL_MAX_DELAY);

	  float raw = (float)adcResultsDMA[0];
 80027f4:	4b67      	ldr	r3, [pc, #412]	@ (8002994 <main+0x1e0>)
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	0018      	movs	r0, r3
 80027fc:	f7fe f844 	bl	8000888 <__aeabi_ui2f>
 8002800:	1c03      	adds	r3, r0, #0
 8002802:	627b      	str	r3, [r7, #36]	@ 0x24
	  raw = (raw / 4096.0) * 3.3;
 8002804:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002806:	f7ff fedd 	bl	80025c4 <__aeabi_f2d>
 800280a:	2200      	movs	r2, #0
 800280c:	4b62      	ldr	r3, [pc, #392]	@ (8002998 <main+0x1e4>)
 800280e:	f7fe fbe1 	bl	8000fd4 <__aeabi_ddiv>
 8002812:	0002      	movs	r2, r0
 8002814:	000b      	movs	r3, r1
 8002816:	0010      	movs	r0, r2
 8002818:	0019      	movs	r1, r3
 800281a:	4a60      	ldr	r2, [pc, #384]	@ (800299c <main+0x1e8>)
 800281c:	4b60      	ldr	r3, [pc, #384]	@ (80029a0 <main+0x1ec>)
 800281e:	f7ff f81d 	bl	800185c <__aeabi_dmul>
 8002822:	0002      	movs	r2, r0
 8002824:	000b      	movs	r3, r1
 8002826:	0010      	movs	r0, r2
 8002828:	0019      	movs	r1, r3
 800282a:	f7ff ff13 	bl	8002654 <__aeabi_d2f>
 800282e:	1c03      	adds	r3, r0, #0
 8002830:	627b      	str	r3, [r7, #36]	@ 0x24
	  float Rt = 10000.0 * raw / (3.3 - raw);
 8002832:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002834:	f7ff fec6 	bl	80025c4 <__aeabi_f2d>
 8002838:	2200      	movs	r2, #0
 800283a:	4b5a      	ldr	r3, [pc, #360]	@ (80029a4 <main+0x1f0>)
 800283c:	f7ff f80e 	bl	800185c <__aeabi_dmul>
 8002840:	0002      	movs	r2, r0
 8002842:	000b      	movs	r3, r1
 8002844:	0014      	movs	r4, r2
 8002846:	001d      	movs	r5, r3
 8002848:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800284a:	f7ff febb 	bl	80025c4 <__aeabi_f2d>
 800284e:	0002      	movs	r2, r0
 8002850:	000b      	movs	r3, r1
 8002852:	4852      	ldr	r0, [pc, #328]	@ (800299c <main+0x1e8>)
 8002854:	4952      	ldr	r1, [pc, #328]	@ (80029a0 <main+0x1ec>)
 8002856:	f7ff fac9 	bl	8001dec <__aeabi_dsub>
 800285a:	0002      	movs	r2, r0
 800285c:	000b      	movs	r3, r1
 800285e:	0020      	movs	r0, r4
 8002860:	0029      	movs	r1, r5
 8002862:	f7fe fbb7 	bl	8000fd4 <__aeabi_ddiv>
 8002866:	0002      	movs	r2, r0
 8002868:	000b      	movs	r3, r1
 800286a:	0010      	movs	r0, r2
 800286c:	0019      	movs	r1, r3
 800286e:	f7ff fef1 	bl	8002654 <__aeabi_d2f>
 8002872:	1c03      	adds	r3, r0, #0
 8002874:	623b      	str	r3, [r7, #32]
	  float beta = 4300.0;
 8002876:	4b4c      	ldr	r3, [pc, #304]	@ (80029a8 <main+0x1f4>)
 8002878:	61fb      	str	r3, [r7, #28]
	  float R0 = 8000.0;
 800287a:	4b4c      	ldr	r3, [pc, #304]	@ (80029ac <main+0x1f8>)
 800287c:	61bb      	str	r3, [r7, #24]
	  float T0 = 300.0;
 800287e:	4b4c      	ldr	r3, [pc, #304]	@ (80029b0 <main+0x1fc>)
 8002880:	617b      	str	r3, [r7, #20]


	  float temp = beta / (log(Rt/R0) + beta/T0);
 8002882:	69f8      	ldr	r0, [r7, #28]
 8002884:	f7ff fe9e 	bl	80025c4 <__aeabi_f2d>
 8002888:	0004      	movs	r4, r0
 800288a:	000d      	movs	r5, r1
 800288c:	69b9      	ldr	r1, [r7, #24]
 800288e:	6a38      	ldr	r0, [r7, #32]
 8002890:	f7fd fd16 	bl	80002c0 <__aeabi_fdiv>
 8002894:	1c03      	adds	r3, r0, #0
 8002896:	1c18      	adds	r0, r3, #0
 8002898:	f7ff fe94 	bl	80025c4 <__aeabi_f2d>
 800289c:	0002      	movs	r2, r0
 800289e:	000b      	movs	r3, r1
 80028a0:	0010      	movs	r0, r2
 80028a2:	0019      	movs	r1, r3
 80028a4:	f003 fbda 	bl	800605c <log>
 80028a8:	6038      	str	r0, [r7, #0]
 80028aa:	6079      	str	r1, [r7, #4]
 80028ac:	6979      	ldr	r1, [r7, #20]
 80028ae:	69f8      	ldr	r0, [r7, #28]
 80028b0:	f7fd fd06 	bl	80002c0 <__aeabi_fdiv>
 80028b4:	1c03      	adds	r3, r0, #0
 80028b6:	1c18      	adds	r0, r3, #0
 80028b8:	f7ff fe84 	bl	80025c4 <__aeabi_f2d>
 80028bc:	0002      	movs	r2, r0
 80028be:	000b      	movs	r3, r1
 80028c0:	6838      	ldr	r0, [r7, #0]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	f7fe f822 	bl	800090c <__aeabi_dadd>
 80028c8:	0002      	movs	r2, r0
 80028ca:	000b      	movs	r3, r1
 80028cc:	0020      	movs	r0, r4
 80028ce:	0029      	movs	r1, r5
 80028d0:	f7fe fb80 	bl	8000fd4 <__aeabi_ddiv>
 80028d4:	0002      	movs	r2, r0
 80028d6:	000b      	movs	r3, r1
 80028d8:	0010      	movs	r0, r2
 80028da:	0019      	movs	r1, r3
 80028dc:	f7ff feba 	bl	8002654 <__aeabi_d2f>
 80028e0:	1c03      	adds	r3, r0, #0
 80028e2:	613b      	str	r3, [r7, #16]
	  int t = (int)(temp - 273);
 80028e4:	4933      	ldr	r1, [pc, #204]	@ (80029b4 <main+0x200>)
 80028e6:	6938      	ldr	r0, [r7, #16]
 80028e8:	f7fd fe0a 	bl	8000500 <__aeabi_fsub>
 80028ec:	1c03      	adds	r3, r0, #0
 80028ee:	1c18      	adds	r0, r3, #0
 80028f0:	f7fd ffaa 	bl	8000848 <__aeabi_f2iz>
 80028f4:	0003      	movs	r3, r0
 80028f6:	60fb      	str	r3, [r7, #12]


	  // Convert to string and print
	  //sprintf((char*)buffer,"%d C\n", t);

	  sprintf((char*)buffer,"Channel_0 : %d \n", t);
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	492f      	ldr	r1, [pc, #188]	@ (80029b8 <main+0x204>)
 80028fc:	4b2f      	ldr	r3, [pc, #188]	@ (80029bc <main+0x208>)
 80028fe:	0018      	movs	r0, r3
 8002900:	f002 ff0e 	bl	8005720 <siprintf>
	  HAL_UART_Transmit(&huart2, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002904:	4b2d      	ldr	r3, [pc, #180]	@ (80029bc <main+0x208>)
 8002906:	0018      	movs	r0, r3
 8002908:	f7fd fbfe 	bl	8000108 <strlen>
 800290c:	0003      	movs	r3, r0
 800290e:	b29a      	uxth	r2, r3
 8002910:	2301      	movs	r3, #1
 8002912:	425b      	negs	r3, r3
 8002914:	4929      	ldr	r1, [pc, #164]	@ (80029bc <main+0x208>)
 8002916:	482a      	ldr	r0, [pc, #168]	@ (80029c0 <main+0x20c>)
 8002918:	f002 faf2 	bl	8004f00 <HAL_UART_Transmit>
	  HAL_Delay(100);
 800291c:	2064      	movs	r0, #100	@ 0x64
 800291e:	f000 fbc3 	bl	80030a8 <HAL_Delay>

      sprintf((char*)buffer,"Channel_3 : %hu \n", adcResultsDMA[1]);
 8002922:	4b1c      	ldr	r3, [pc, #112]	@ (8002994 <main+0x1e0>)
 8002924:	885b      	ldrh	r3, [r3, #2]
 8002926:	b29b      	uxth	r3, r3
 8002928:	001a      	movs	r2, r3
 800292a:	4926      	ldr	r1, [pc, #152]	@ (80029c4 <main+0x210>)
 800292c:	4b23      	ldr	r3, [pc, #140]	@ (80029bc <main+0x208>)
 800292e:	0018      	movs	r0, r3
 8002930:	f002 fef6 	bl	8005720 <siprintf>
      HAL_UART_Transmit(&huart2, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002934:	4b21      	ldr	r3, [pc, #132]	@ (80029bc <main+0x208>)
 8002936:	0018      	movs	r0, r3
 8002938:	f7fd fbe6 	bl	8000108 <strlen>
 800293c:	0003      	movs	r3, r0
 800293e:	b29a      	uxth	r2, r3
 8002940:	2301      	movs	r3, #1
 8002942:	425b      	negs	r3, r3
 8002944:	491d      	ldr	r1, [pc, #116]	@ (80029bc <main+0x208>)
 8002946:	481e      	ldr	r0, [pc, #120]	@ (80029c0 <main+0x20c>)
 8002948:	f002 fada 	bl	8004f00 <HAL_UART_Transmit>


	  sprintf((char*)buffer,"ABBA \n");
 800294c:	4a1e      	ldr	r2, [pc, #120]	@ (80029c8 <main+0x214>)
 800294e:	4b1b      	ldr	r3, [pc, #108]	@ (80029bc <main+0x208>)
 8002950:	0011      	movs	r1, r2
 8002952:	0018      	movs	r0, r3
 8002954:	f002 fee4 	bl	8005720 <siprintf>
	  HAL_UART_Transmit(&huart2, buffer, strlen(buffer), HAL_MAX_DELAY);
 8002958:	4b18      	ldr	r3, [pc, #96]	@ (80029bc <main+0x208>)
 800295a:	0018      	movs	r0, r3
 800295c:	f7fd fbd4 	bl	8000108 <strlen>
 8002960:	0003      	movs	r3, r0
 8002962:	b29a      	uxth	r2, r3
 8002964:	2301      	movs	r3, #1
 8002966:	425b      	negs	r3, r3
 8002968:	4914      	ldr	r1, [pc, #80]	@ (80029bc <main+0x208>)
 800296a:	4815      	ldr	r0, [pc, #84]	@ (80029c0 <main+0x20c>)
 800296c:	f002 fac8 	bl	8004f00 <HAL_UART_Transmit>

	  HAL_Delay(500);
 8002970:	23fa      	movs	r3, #250	@ 0xfa
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	0018      	movs	r0, r3
 8002976:	f000 fb97 	bl	80030a8 <HAL_Delay>


	  HAL_ADC_Stop_DMA(&hadc);
 800297a:	4b05      	ldr	r3, [pc, #20]	@ (8002990 <main+0x1dc>)
 800297c:	0018      	movs	r0, r3
 800297e:	f000 fdeb 	bl	8003558 <HAL_ADC_Stop_DMA>
	  HAL_Delay(100);
 8002982:	2064      	movs	r0, #100	@ 0x64
 8002984:	f000 fb90 	bl	80030a8 <HAL_Delay>
  {
 8002988:	46c0      	nop			@ (mov r8, r8)
 800298a:	e72c      	b.n	80027e6 <main+0x32>
 800298c:	48000400 	.word	0x48000400
 8002990:	20000078 	.word	0x20000078
 8002994:	20000184 	.word	0x20000184
 8002998:	40b00000 	.word	0x40b00000
 800299c:	66666666 	.word	0x66666666
 80029a0:	400a6666 	.word	0x400a6666
 80029a4:	40c38800 	.word	0x40c38800
 80029a8:	45866000 	.word	0x45866000
 80029ac:	45fa0000 	.word	0x45fa0000
 80029b0:	43960000 	.word	0x43960000
 80029b4:	43888000 	.word	0x43888000
 80029b8:	08006450 	.word	0x08006450
 80029bc:	2000018c 	.word	0x2000018c
 80029c0:	200000fc 	.word	0x200000fc
 80029c4:	08006464 	.word	0x08006464
 80029c8:	08006478 	.word	0x08006478

080029cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b093      	sub	sp, #76	@ 0x4c
 80029d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029d2:	2414      	movs	r4, #20
 80029d4:	193b      	adds	r3, r7, r4
 80029d6:	0018      	movs	r0, r3
 80029d8:	2334      	movs	r3, #52	@ 0x34
 80029da:	001a      	movs	r2, r3
 80029dc:	2100      	movs	r1, #0
 80029de:	f002 febf 	bl	8005760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029e2:	1d3b      	adds	r3, r7, #4
 80029e4:	0018      	movs	r0, r3
 80029e6:	2310      	movs	r3, #16
 80029e8:	001a      	movs	r2, r3
 80029ea:	2100      	movs	r1, #0
 80029ec:	f002 feb8 	bl	8005760 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029f0:	0021      	movs	r1, r4
 80029f2:	187b      	adds	r3, r7, r1
 80029f4:	2202      	movs	r2, #2
 80029f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029f8:	187b      	adds	r3, r7, r1
 80029fa:	2201      	movs	r2, #1
 80029fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029fe:	187b      	adds	r3, r7, r1
 8002a00:	2210      	movs	r2, #16
 8002a02:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a04:	187b      	adds	r3, r7, r1
 8002a06:	2200      	movs	r2, #0
 8002a08:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a0a:	187b      	adds	r3, r7, r1
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f001 fd31 	bl	8004474 <HAL_RCC_OscConfig>
 8002a12:	1e03      	subs	r3, r0, #0
 8002a14:	d001      	beq.n	8002a1a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8002a16:	f000 f955 	bl	8002cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	2207      	movs	r2, #7
 8002a1e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	2200      	movs	r2, #0
 8002a24:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a26:	1d3b      	adds	r3, r7, #4
 8002a28:	2200      	movs	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a2c:	1d3b      	adds	r3, r7, #4
 8002a2e:	2200      	movs	r2, #0
 8002a30:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a32:	1d3b      	adds	r3, r7, #4
 8002a34:	2100      	movs	r1, #0
 8002a36:	0018      	movs	r0, r3
 8002a38:	f002 f8a2 	bl	8004b80 <HAL_RCC_ClockConfig>
 8002a3c:	1e03      	subs	r3, r0, #0
 8002a3e:	d001      	beq.n	8002a44 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002a40:	f000 f940 	bl	8002cc4 <Error_Handler>
  }
}
 8002a44:	46c0      	nop			@ (mov r8, r8)
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b013      	add	sp, #76	@ 0x4c
 8002a4a:	bd90      	pop	{r4, r7, pc}

08002a4c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	0018      	movs	r0, r3
 8002a56:	230c      	movs	r3, #12
 8002a58:	001a      	movs	r2, r3
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	f002 fe80 	bl	8005760 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002a60:	4b2d      	ldr	r3, [pc, #180]	@ (8002b18 <MX_ADC_Init+0xcc>)
 8002a62:	4a2e      	ldr	r2, [pc, #184]	@ (8002b1c <MX_ADC_Init+0xd0>)
 8002a64:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002a66:	4b2c      	ldr	r3, [pc, #176]	@ (8002b18 <MX_ADC_Init+0xcc>)
 8002a68:	2280      	movs	r2, #128	@ 0x80
 8002a6a:	05d2      	lsls	r2, r2, #23
 8002a6c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b18 <MX_ADC_Init+0xcc>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a74:	4b28      	ldr	r3, [pc, #160]	@ (8002b18 <MX_ADC_Init+0xcc>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002a7a:	4b27      	ldr	r3, [pc, #156]	@ (8002b18 <MX_ADC_Init+0xcc>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a80:	4b25      	ldr	r3, [pc, #148]	@ (8002b18 <MX_ADC_Init+0xcc>)
 8002a82:	2204      	movs	r2, #4
 8002a84:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002a86:	4b24      	ldr	r3, [pc, #144]	@ (8002b18 <MX_ADC_Init+0xcc>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002a8c:	4b22      	ldr	r3, [pc, #136]	@ (8002b18 <MX_ADC_Init+0xcc>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002a92:	4b21      	ldr	r3, [pc, #132]	@ (8002b18 <MX_ADC_Init+0xcc>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002a98:	4b1f      	ldr	r3, [pc, #124]	@ (8002b18 <MX_ADC_Init+0xcc>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b18 <MX_ADC_Init+0xcc>)
 8002aa0:	22c2      	movs	r2, #194	@ 0xc2
 8002aa2:	32ff      	adds	r2, #255	@ 0xff
 8002aa4:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b18 <MX_ADC_Init+0xcc>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002aac:	4b1a      	ldr	r3, [pc, #104]	@ (8002b18 <MX_ADC_Init+0xcc>)
 8002aae:	2224      	movs	r2, #36	@ 0x24
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002ab4:	4b18      	ldr	r3, [pc, #96]	@ (8002b18 <MX_ADC_Init+0xcc>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002aba:	4b17      	ldr	r3, [pc, #92]	@ (8002b18 <MX_ADC_Init+0xcc>)
 8002abc:	0018      	movs	r0, r3
 8002abe:	f000 fb17 	bl	80030f0 <HAL_ADC_Init>
 8002ac2:	1e03      	subs	r3, r0, #0
 8002ac4:	d001      	beq.n	8002aca <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 8002ac6:	f000 f8fd 	bl	8002cc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	2280      	movs	r2, #128	@ 0x80
 8002ad4:	0152      	lsls	r2, r2, #5
 8002ad6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	2280      	movs	r2, #128	@ 0x80
 8002adc:	0552      	lsls	r2, r2, #21
 8002ade:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002ae0:	1d3a      	adds	r2, r7, #4
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b18 <MX_ADC_Init+0xcc>)
 8002ae4:	0011      	movs	r1, r2
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f000 fdbc 	bl	8003664 <HAL_ADC_ConfigChannel>
 8002aec:	1e03      	subs	r3, r0, #0
 8002aee:	d001      	beq.n	8002af4 <MX_ADC_Init+0xa8>
  {
    Error_Handler();
 8002af0:	f000 f8e8 	bl	8002cc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002af4:	1d3b      	adds	r3, r7, #4
 8002af6:	2203      	movs	r2, #3
 8002af8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002afa:	1d3a      	adds	r2, r7, #4
 8002afc:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <MX_ADC_Init+0xcc>)
 8002afe:	0011      	movs	r1, r2
 8002b00:	0018      	movs	r0, r3
 8002b02:	f000 fdaf 	bl	8003664 <HAL_ADC_ConfigChannel>
 8002b06:	1e03      	subs	r3, r0, #0
 8002b08:	d001      	beq.n	8002b0e <MX_ADC_Init+0xc2>
  {
    Error_Handler();
 8002b0a:	f000 f8db 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002b0e:	46c0      	nop			@ (mov r8, r8)
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b004      	add	sp, #16
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	46c0      	nop			@ (mov r8, r8)
 8002b18:	20000078 	.word	0x20000078
 8002b1c:	40012400 	.word	0x40012400

08002b20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b24:	4b14      	ldr	r3, [pc, #80]	@ (8002b78 <MX_USART2_UART_Init+0x58>)
 8002b26:	4a15      	ldr	r2, [pc, #84]	@ (8002b7c <MX_USART2_UART_Init+0x5c>)
 8002b28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b2a:	4b13      	ldr	r3, [pc, #76]	@ (8002b78 <MX_USART2_UART_Init+0x58>)
 8002b2c:	22e1      	movs	r2, #225	@ 0xe1
 8002b2e:	0252      	lsls	r2, r2, #9
 8002b30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b32:	4b11      	ldr	r3, [pc, #68]	@ (8002b78 <MX_USART2_UART_Init+0x58>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b38:	4b0f      	ldr	r3, [pc, #60]	@ (8002b78 <MX_USART2_UART_Init+0x58>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b78 <MX_USART2_UART_Init+0x58>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b44:	4b0c      	ldr	r3, [pc, #48]	@ (8002b78 <MX_USART2_UART_Init+0x58>)
 8002b46:	220c      	movs	r2, #12
 8002b48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b78 <MX_USART2_UART_Init+0x58>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b50:	4b09      	ldr	r3, [pc, #36]	@ (8002b78 <MX_USART2_UART_Init+0x58>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b56:	4b08      	ldr	r3, [pc, #32]	@ (8002b78 <MX_USART2_UART_Init+0x58>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b5c:	4b06      	ldr	r3, [pc, #24]	@ (8002b78 <MX_USART2_UART_Init+0x58>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b62:	4b05      	ldr	r3, [pc, #20]	@ (8002b78 <MX_USART2_UART_Init+0x58>)
 8002b64:	0018      	movs	r0, r3
 8002b66:	f002 f977 	bl	8004e58 <HAL_UART_Init>
 8002b6a:	1e03      	subs	r3, r0, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002b6e:	f000 f8a9 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b72:	46c0      	nop			@ (mov r8, r8)
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	200000fc 	.word	0x200000fc
 8002b7c:	40004400 	.word	0x40004400

08002b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b86:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb8 <MX_DMA_Init+0x38>)
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb8 <MX_DMA_Init+0x38>)
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	615a      	str	r2, [r3, #20]
 8002b92:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <MX_DMA_Init+0x38>)
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	2201      	movs	r2, #1
 8002b98:	4013      	ands	r3, r2
 8002b9a:	607b      	str	r3, [r7, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	2009      	movs	r0, #9
 8002ba4:	f001 f8de 	bl	8003d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002ba8:	2009      	movs	r0, #9
 8002baa:	f001 f8f0 	bl	8003d8e <HAL_NVIC_EnableIRQ>

}
 8002bae:	46c0      	nop			@ (mov r8, r8)
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b002      	add	sp, #8
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			@ (mov r8, r8)
 8002bb8:	40021000 	.word	0x40021000

08002bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b089      	sub	sp, #36	@ 0x24
 8002bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc2:	240c      	movs	r4, #12
 8002bc4:	193b      	adds	r3, r7, r4
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	2314      	movs	r3, #20
 8002bca:	001a      	movs	r2, r3
 8002bcc:	2100      	movs	r1, #0
 8002bce:	f002 fdc7 	bl	8005760 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bd2:	4b3a      	ldr	r3, [pc, #232]	@ (8002cbc <MX_GPIO_Init+0x100>)
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	4b39      	ldr	r3, [pc, #228]	@ (8002cbc <MX_GPIO_Init+0x100>)
 8002bd8:	2180      	movs	r1, #128	@ 0x80
 8002bda:	03c9      	lsls	r1, r1, #15
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	615a      	str	r2, [r3, #20]
 8002be0:	4b36      	ldr	r3, [pc, #216]	@ (8002cbc <MX_GPIO_Init+0x100>)
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	2380      	movs	r3, #128	@ 0x80
 8002be6:	03db      	lsls	r3, r3, #15
 8002be8:	4013      	ands	r3, r2
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bee:	4b33      	ldr	r3, [pc, #204]	@ (8002cbc <MX_GPIO_Init+0x100>)
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	4b32      	ldr	r3, [pc, #200]	@ (8002cbc <MX_GPIO_Init+0x100>)
 8002bf4:	2180      	movs	r1, #128	@ 0x80
 8002bf6:	0289      	lsls	r1, r1, #10
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	615a      	str	r2, [r3, #20]
 8002bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8002cbc <MX_GPIO_Init+0x100>)
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	2380      	movs	r3, #128	@ 0x80
 8002c02:	029b      	lsls	r3, r3, #10
 8002c04:	4013      	ands	r3, r2
 8002c06:	607b      	str	r3, [r7, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0a:	4b2c      	ldr	r3, [pc, #176]	@ (8002cbc <MX_GPIO_Init+0x100>)
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002cbc <MX_GPIO_Init+0x100>)
 8002c10:	2180      	movs	r1, #128	@ 0x80
 8002c12:	02c9      	lsls	r1, r1, #11
 8002c14:	430a      	orrs	r2, r1
 8002c16:	615a      	str	r2, [r3, #20]
 8002c18:	4b28      	ldr	r3, [pc, #160]	@ (8002cbc <MX_GPIO_Init+0x100>)
 8002c1a:	695a      	ldr	r2, [r3, #20]
 8002c1c:	2380      	movs	r3, #128	@ 0x80
 8002c1e:	02db      	lsls	r3, r3, #11
 8002c20:	4013      	ands	r3, r2
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002c26:	2380      	movs	r3, #128	@ 0x80
 8002c28:	00d9      	lsls	r1, r3, #3
 8002c2a:	2390      	movs	r3, #144	@ 0x90
 8002c2c:	05db      	lsls	r3, r3, #23
 8002c2e:	2200      	movs	r2, #0
 8002c30:	0018      	movs	r0, r3
 8002c32:	f001 fc01 	bl	8004438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8002c36:	4b22      	ldr	r3, [pc, #136]	@ (8002cc0 <MX_GPIO_Init+0x104>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2110      	movs	r1, #16
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f001 fbfb 	bl	8004438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8002c42:	193b      	adds	r3, r7, r4
 8002c44:	2202      	movs	r2, #2
 8002c46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c48:	193b      	adds	r3, r7, r4
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	193b      	adds	r3, r7, r4
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8002c54:	193a      	adds	r2, r7, r4
 8002c56:	2390      	movs	r3, #144	@ 0x90
 8002c58:	05db      	lsls	r3, r3, #23
 8002c5a:	0011      	movs	r1, r2
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f001 fa83 	bl	8004168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c62:	0021      	movs	r1, r4
 8002c64:	187b      	adds	r3, r7, r1
 8002c66:	2280      	movs	r2, #128	@ 0x80
 8002c68:	00d2      	lsls	r2, r2, #3
 8002c6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c6c:	000c      	movs	r4, r1
 8002c6e:	193b      	adds	r3, r7, r4
 8002c70:	2201      	movs	r2, #1
 8002c72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	193b      	adds	r3, r7, r4
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7a:	193b      	adds	r3, r7, r4
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c80:	193a      	adds	r2, r7, r4
 8002c82:	2390      	movs	r3, #144	@ 0x90
 8002c84:	05db      	lsls	r3, r3, #23
 8002c86:	0011      	movs	r1, r2
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f001 fa6d 	bl	8004168 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8002c8e:	0021      	movs	r1, r4
 8002c90:	187b      	adds	r3, r7, r1
 8002c92:	2210      	movs	r2, #16
 8002c94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	2201      	movs	r2, #1
 8002c9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	187b      	adds	r3, r7, r1
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca2:	187b      	adds	r3, r7, r1
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8002ca8:	187b      	adds	r3, r7, r1
 8002caa:	4a05      	ldr	r2, [pc, #20]	@ (8002cc0 <MX_GPIO_Init+0x104>)
 8002cac:	0019      	movs	r1, r3
 8002cae:	0010      	movs	r0, r2
 8002cb0:	f001 fa5a 	bl	8004168 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cb4:	46c0      	nop			@ (mov r8, r8)
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b009      	add	sp, #36	@ 0x24
 8002cba:	bd90      	pop	{r4, r7, pc}
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	48000400 	.word	0x48000400

08002cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cc8:	b672      	cpsid	i
}
 8002cca:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ccc:	46c0      	nop			@ (mov r8, r8)
 8002cce:	e7fd      	b.n	8002ccc <Error_Handler+0x8>

08002cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d14 <HAL_MspInit+0x44>)
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	4b0e      	ldr	r3, [pc, #56]	@ (8002d14 <HAL_MspInit+0x44>)
 8002cdc:	2101      	movs	r1, #1
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	619a      	str	r2, [r3, #24]
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8002d14 <HAL_MspInit+0x44>)
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	4013      	ands	r3, r2
 8002cea:	607b      	str	r3, [r7, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cee:	4b09      	ldr	r3, [pc, #36]	@ (8002d14 <HAL_MspInit+0x44>)
 8002cf0:	69da      	ldr	r2, [r3, #28]
 8002cf2:	4b08      	ldr	r3, [pc, #32]	@ (8002d14 <HAL_MspInit+0x44>)
 8002cf4:	2180      	movs	r1, #128	@ 0x80
 8002cf6:	0549      	lsls	r1, r1, #21
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	61da      	str	r2, [r3, #28]
 8002cfc:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <HAL_MspInit+0x44>)
 8002cfe:	69da      	ldr	r2, [r3, #28]
 8002d00:	2380      	movs	r3, #128	@ 0x80
 8002d02:	055b      	lsls	r3, r3, #21
 8002d04:	4013      	ands	r3, r2
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b002      	add	sp, #8
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			@ (mov r8, r8)
 8002d14:	40021000 	.word	0x40021000

08002d18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b08b      	sub	sp, #44	@ 0x2c
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d20:	2414      	movs	r4, #20
 8002d22:	193b      	adds	r3, r7, r4
 8002d24:	0018      	movs	r0, r3
 8002d26:	2314      	movs	r3, #20
 8002d28:	001a      	movs	r2, r3
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	f002 fd18 	bl	8005760 <memset>
  if(hadc->Instance==ADC1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a2d      	ldr	r2, [pc, #180]	@ (8002dec <HAL_ADC_MspInit+0xd4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d153      	bne.n	8002de2 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8002df0 <HAL_ADC_MspInit+0xd8>)
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8002df0 <HAL_ADC_MspInit+0xd8>)
 8002d40:	2180      	movs	r1, #128	@ 0x80
 8002d42:	0089      	lsls	r1, r1, #2
 8002d44:	430a      	orrs	r2, r1
 8002d46:	619a      	str	r2, [r3, #24]
 8002d48:	4b29      	ldr	r3, [pc, #164]	@ (8002df0 <HAL_ADC_MspInit+0xd8>)
 8002d4a:	699a      	ldr	r2, [r3, #24]
 8002d4c:	2380      	movs	r3, #128	@ 0x80
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4013      	ands	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
 8002d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d56:	4b26      	ldr	r3, [pc, #152]	@ (8002df0 <HAL_ADC_MspInit+0xd8>)
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	4b25      	ldr	r3, [pc, #148]	@ (8002df0 <HAL_ADC_MspInit+0xd8>)
 8002d5c:	2180      	movs	r1, #128	@ 0x80
 8002d5e:	0289      	lsls	r1, r1, #10
 8002d60:	430a      	orrs	r2, r1
 8002d62:	615a      	str	r2, [r3, #20]
 8002d64:	4b22      	ldr	r3, [pc, #136]	@ (8002df0 <HAL_ADC_MspInit+0xd8>)
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	2380      	movs	r3, #128	@ 0x80
 8002d6a:	029b      	lsls	r3, r3, #10
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002d72:	193b      	adds	r3, r7, r4
 8002d74:	2209      	movs	r2, #9
 8002d76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d78:	193b      	adds	r3, r7, r4
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	193b      	adds	r3, r7, r4
 8002d80:	2200      	movs	r2, #0
 8002d82:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d84:	193a      	adds	r2, r7, r4
 8002d86:	2390      	movs	r3, #144	@ 0x90
 8002d88:	05db      	lsls	r3, r3, #23
 8002d8a:	0011      	movs	r1, r2
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f001 f9eb 	bl	8004168 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002d92:	4b18      	ldr	r3, [pc, #96]	@ (8002df4 <HAL_ADC_MspInit+0xdc>)
 8002d94:	4a18      	ldr	r2, [pc, #96]	@ (8002df8 <HAL_ADC_MspInit+0xe0>)
 8002d96:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d98:	4b16      	ldr	r3, [pc, #88]	@ (8002df4 <HAL_ADC_MspInit+0xdc>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d9e:	4b15      	ldr	r3, [pc, #84]	@ (8002df4 <HAL_ADC_MspInit+0xdc>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002da4:	4b13      	ldr	r3, [pc, #76]	@ (8002df4 <HAL_ADC_MspInit+0xdc>)
 8002da6:	2280      	movs	r2, #128	@ 0x80
 8002da8:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002daa:	4b12      	ldr	r3, [pc, #72]	@ (8002df4 <HAL_ADC_MspInit+0xdc>)
 8002dac:	2280      	movs	r2, #128	@ 0x80
 8002dae:	0052      	lsls	r2, r2, #1
 8002db0:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002db2:	4b10      	ldr	r3, [pc, #64]	@ (8002df4 <HAL_ADC_MspInit+0xdc>)
 8002db4:	2280      	movs	r2, #128	@ 0x80
 8002db6:	00d2      	lsls	r2, r2, #3
 8002db8:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8002dba:	4b0e      	ldr	r3, [pc, #56]	@ (8002df4 <HAL_ADC_MspInit+0xdc>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002df4 <HAL_ADC_MspInit+0xdc>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <HAL_ADC_MspInit+0xdc>)
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f000 fffd 	bl	8003dc8 <HAL_DMA_Init>
 8002dce:	1e03      	subs	r3, r0, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8002dd2:	f7ff ff77 	bl	8002cc4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a06      	ldr	r2, [pc, #24]	@ (8002df4 <HAL_ADC_MspInit+0xdc>)
 8002dda:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ddc:	4b05      	ldr	r3, [pc, #20]	@ (8002df4 <HAL_ADC_MspInit+0xdc>)
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002de2:	46c0      	nop			@ (mov r8, r8)
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b00b      	add	sp, #44	@ 0x2c
 8002de8:	bd90      	pop	{r4, r7, pc}
 8002dea:	46c0      	nop			@ (mov r8, r8)
 8002dec:	40012400 	.word	0x40012400
 8002df0:	40021000 	.word	0x40021000
 8002df4:	200000b8 	.word	0x200000b8
 8002df8:	40020008 	.word	0x40020008

08002dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b08b      	sub	sp, #44	@ 0x2c
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	2414      	movs	r4, #20
 8002e06:	193b      	adds	r3, r7, r4
 8002e08:	0018      	movs	r0, r3
 8002e0a:	2314      	movs	r3, #20
 8002e0c:	001a      	movs	r2, r3
 8002e0e:	2100      	movs	r1, #0
 8002e10:	f002 fca6 	bl	8005760 <memset>
  if(huart->Instance==USART2)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a1c      	ldr	r2, [pc, #112]	@ (8002e8c <HAL_UART_MspInit+0x90>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d132      	bne.n	8002e84 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8002e90 <HAL_UART_MspInit+0x94>)
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	4b1b      	ldr	r3, [pc, #108]	@ (8002e90 <HAL_UART_MspInit+0x94>)
 8002e24:	2180      	movs	r1, #128	@ 0x80
 8002e26:	0289      	lsls	r1, r1, #10
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	61da      	str	r2, [r3, #28]
 8002e2c:	4b18      	ldr	r3, [pc, #96]	@ (8002e90 <HAL_UART_MspInit+0x94>)
 8002e2e:	69da      	ldr	r2, [r3, #28]
 8002e30:	2380      	movs	r3, #128	@ 0x80
 8002e32:	029b      	lsls	r3, r3, #10
 8002e34:	4013      	ands	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3a:	4b15      	ldr	r3, [pc, #84]	@ (8002e90 <HAL_UART_MspInit+0x94>)
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	4b14      	ldr	r3, [pc, #80]	@ (8002e90 <HAL_UART_MspInit+0x94>)
 8002e40:	2180      	movs	r1, #128	@ 0x80
 8002e42:	0289      	lsls	r1, r1, #10
 8002e44:	430a      	orrs	r2, r1
 8002e46:	615a      	str	r2, [r3, #20]
 8002e48:	4b11      	ldr	r3, [pc, #68]	@ (8002e90 <HAL_UART_MspInit+0x94>)
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	2380      	movs	r3, #128	@ 0x80
 8002e4e:	029b      	lsls	r3, r3, #10
 8002e50:	4013      	ands	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8002e56:	0021      	movs	r1, r4
 8002e58:	187b      	adds	r3, r7, r1
 8002e5a:	4a0e      	ldr	r2, [pc, #56]	@ (8002e94 <HAL_UART_MspInit+0x98>)
 8002e5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5e:	187b      	adds	r3, r7, r1
 8002e60:	2202      	movs	r2, #2
 8002e62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e64:	187b      	adds	r3, r7, r1
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e6a:	187b      	adds	r3, r7, r1
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002e70:	187b      	adds	r3, r7, r1
 8002e72:	2201      	movs	r2, #1
 8002e74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e76:	187a      	adds	r2, r7, r1
 8002e78:	2390      	movs	r3, #144	@ 0x90
 8002e7a:	05db      	lsls	r3, r3, #23
 8002e7c:	0011      	movs	r1, r2
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f001 f972 	bl	8004168 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002e84:	46c0      	nop			@ (mov r8, r8)
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b00b      	add	sp, #44	@ 0x2c
 8002e8a:	bd90      	pop	{r4, r7, pc}
 8002e8c:	40004400 	.word	0x40004400
 8002e90:	40021000 	.word	0x40021000
 8002e94:	00008004 	.word	0x00008004

08002e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e9c:	46c0      	nop			@ (mov r8, r8)
 8002e9e:	e7fd      	b.n	8002e9c <NMI_Handler+0x4>

08002ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ea4:	46c0      	nop			@ (mov r8, r8)
 8002ea6:	e7fd      	b.n	8002ea4 <HardFault_Handler+0x4>

08002ea8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002eac:	46c0      	nop			@ (mov r8, r8)
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eb6:	46c0      	nop			@ (mov r8, r8)
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ec0:	f000 f8d6 	bl	8003070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ec4:	46c0      	nop			@ (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002ed0:	4b03      	ldr	r3, [pc, #12]	@ (8002ee0 <DMA1_Channel1_IRQHandler+0x14>)
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f001 f85e 	bl	8003f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ed8:	46c0      	nop			@ (mov r8, r8)
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			@ (mov r8, r8)
 8002ee0:	200000b8 	.word	0x200000b8

08002ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002eec:	4a14      	ldr	r2, [pc, #80]	@ (8002f40 <_sbrk+0x5c>)
 8002eee:	4b15      	ldr	r3, [pc, #84]	@ (8002f44 <_sbrk+0x60>)
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ef8:	4b13      	ldr	r3, [pc, #76]	@ (8002f48 <_sbrk+0x64>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d102      	bne.n	8002f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f00:	4b11      	ldr	r3, [pc, #68]	@ (8002f48 <_sbrk+0x64>)
 8002f02:	4a12      	ldr	r2, [pc, #72]	@ (8002f4c <_sbrk+0x68>)
 8002f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f06:	4b10      	ldr	r3, [pc, #64]	@ (8002f48 <_sbrk+0x64>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	18d3      	adds	r3, r2, r3
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d207      	bcs.n	8002f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f14:	f002 fc2c 	bl	8005770 <__errno>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	220c      	movs	r2, #12
 8002f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	425b      	negs	r3, r3
 8002f22:	e009      	b.n	8002f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f24:	4b08      	ldr	r3, [pc, #32]	@ (8002f48 <_sbrk+0x64>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f2a:	4b07      	ldr	r3, [pc, #28]	@ (8002f48 <_sbrk+0x64>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	18d2      	adds	r2, r2, r3
 8002f32:	4b05      	ldr	r3, [pc, #20]	@ (8002f48 <_sbrk+0x64>)
 8002f34:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002f36:	68fb      	ldr	r3, [r7, #12]
}
 8002f38:	0018      	movs	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b006      	add	sp, #24
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20001800 	.word	0x20001800
 8002f44:	00000400 	.word	0x00000400
 8002f48:	20000254 	.word	0x20000254
 8002f4c:	200003a8 	.word	0x200003a8

08002f50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002f54:	46c0      	nop			@ (mov r8, r8)
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f5c:	4813      	ldr	r0, [pc, #76]	@ (8002fac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f5e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f60:	f7ff fff6 	bl	8002f50 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8002f64:	4812      	ldr	r0, [pc, #72]	@ (8002fb0 <LoopForever+0x6>)
    LDR R1, [R0]
 8002f66:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002f68:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002f6a:	4a12      	ldr	r2, [pc, #72]	@ (8002fb4 <LoopForever+0xa>)
    CMP R1, R2
 8002f6c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002f6e:	d105      	bne.n	8002f7c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8002f70:	4811      	ldr	r0, [pc, #68]	@ (8002fb8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002f72:	4912      	ldr	r1, [pc, #72]	@ (8002fbc <LoopForever+0x12>)
    STR R1, [R0]
 8002f74:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002f76:	4812      	ldr	r0, [pc, #72]	@ (8002fc0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002f78:	4912      	ldr	r1, [pc, #72]	@ (8002fc4 <LoopForever+0x1a>)
    STR R1, [R0]
 8002f7a:	6001      	str	r1, [r0, #0]

08002f7c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f7c:	4812      	ldr	r0, [pc, #72]	@ (8002fc8 <LoopForever+0x1e>)
  ldr r1, =_edata
 8002f7e:	4913      	ldr	r1, [pc, #76]	@ (8002fcc <LoopForever+0x22>)
  ldr r2, =_sidata
 8002f80:	4a13      	ldr	r2, [pc, #76]	@ (8002fd0 <LoopForever+0x26>)
  movs r3, #0
 8002f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f84:	e002      	b.n	8002f8c <LoopCopyDataInit>

08002f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f8a:	3304      	adds	r3, #4

08002f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f90:	d3f9      	bcc.n	8002f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f92:	4a10      	ldr	r2, [pc, #64]	@ (8002fd4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002f94:	4c10      	ldr	r4, [pc, #64]	@ (8002fd8 <LoopForever+0x2e>)
  movs r3, #0
 8002f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f98:	e001      	b.n	8002f9e <LoopFillZerobss>

08002f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f9c:	3204      	adds	r2, #4

08002f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fa0:	d3fb      	bcc.n	8002f9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002fa2:	f002 fbeb 	bl	800577c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fa6:	f7ff fc05 	bl	80027b4 <main>

08002faa <LoopForever>:

LoopForever:
    b LoopForever
 8002faa:	e7fe      	b.n	8002faa <LoopForever>
  ldr   r0, =_estack
 8002fac:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8002fb0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002fb4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8002fb8:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8002fbc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002fc0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002fc4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fcc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002fd0:	080065b0 	.word	0x080065b0
  ldr r2, =_sbss
 8002fd4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002fd8:	200003a4 	.word	0x200003a4

08002fdc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fdc:	e7fe      	b.n	8002fdc <ADC1_IRQHandler>
	...

08002fe0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fe4:	4b07      	ldr	r3, [pc, #28]	@ (8003004 <HAL_Init+0x24>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <HAL_Init+0x24>)
 8002fea:	2110      	movs	r1, #16
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f000 f809 	bl	8003008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ff6:	f7ff fe6b 	bl	8002cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	46c0      	nop			@ (mov r8, r8)
 8003004:	40022000 	.word	0x40022000

08003008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003010:	4b14      	ldr	r3, [pc, #80]	@ (8003064 <HAL_InitTick+0x5c>)
 8003012:	681c      	ldr	r4, [r3, #0]
 8003014:	4b14      	ldr	r3, [pc, #80]	@ (8003068 <HAL_InitTick+0x60>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	0019      	movs	r1, r3
 800301a:	23fa      	movs	r3, #250	@ 0xfa
 800301c:	0098      	lsls	r0, r3, #2
 800301e:	f7fd f885 	bl	800012c <__udivsi3>
 8003022:	0003      	movs	r3, r0
 8003024:	0019      	movs	r1, r3
 8003026:	0020      	movs	r0, r4
 8003028:	f7fd f880 	bl	800012c <__udivsi3>
 800302c:	0003      	movs	r3, r0
 800302e:	0018      	movs	r0, r3
 8003030:	f000 febd 	bl	8003dae <HAL_SYSTICK_Config>
 8003034:	1e03      	subs	r3, r0, #0
 8003036:	d001      	beq.n	800303c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e00f      	b.n	800305c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b03      	cmp	r3, #3
 8003040:	d80b      	bhi.n	800305a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	2301      	movs	r3, #1
 8003046:	425b      	negs	r3, r3
 8003048:	2200      	movs	r2, #0
 800304a:	0018      	movs	r0, r3
 800304c:	f000 fe8a 	bl	8003d64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003050:	4b06      	ldr	r3, [pc, #24]	@ (800306c <HAL_InitTick+0x64>)
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	e000      	b.n	800305c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	b003      	add	sp, #12
 8003062:	bd90      	pop	{r4, r7, pc}
 8003064:	20000000 	.word	0x20000000
 8003068:	20000008 	.word	0x20000008
 800306c:	20000004 	.word	0x20000004

08003070 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003074:	4b05      	ldr	r3, [pc, #20]	@ (800308c <HAL_IncTick+0x1c>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	001a      	movs	r2, r3
 800307a:	4b05      	ldr	r3, [pc, #20]	@ (8003090 <HAL_IncTick+0x20>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	18d2      	adds	r2, r2, r3
 8003080:	4b03      	ldr	r3, [pc, #12]	@ (8003090 <HAL_IncTick+0x20>)
 8003082:	601a      	str	r2, [r3, #0]
}
 8003084:	46c0      	nop			@ (mov r8, r8)
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	46c0      	nop			@ (mov r8, r8)
 800308c:	20000008 	.word	0x20000008
 8003090:	20000258 	.word	0x20000258

08003094 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  return uwTick;
 8003098:	4b02      	ldr	r3, [pc, #8]	@ (80030a4 <HAL_GetTick+0x10>)
 800309a:	681b      	ldr	r3, [r3, #0]
}
 800309c:	0018      	movs	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	46c0      	nop			@ (mov r8, r8)
 80030a4:	20000258 	.word	0x20000258

080030a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030b0:	f7ff fff0 	bl	8003094 <HAL_GetTick>
 80030b4:	0003      	movs	r3, r0
 80030b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	3301      	adds	r3, #1
 80030c0:	d005      	beq.n	80030ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030c2:	4b0a      	ldr	r3, [pc, #40]	@ (80030ec <HAL_Delay+0x44>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	001a      	movs	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	189b      	adds	r3, r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80030ce:	46c0      	nop			@ (mov r8, r8)
 80030d0:	f7ff ffe0 	bl	8003094 <HAL_GetTick>
 80030d4:	0002      	movs	r2, r0
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d8f7      	bhi.n	80030d0 <HAL_Delay+0x28>
  {
  }
}
 80030e0:	46c0      	nop			@ (mov r8, r8)
 80030e2:	46c0      	nop			@ (mov r8, r8)
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b004      	add	sp, #16
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	46c0      	nop			@ (mov r8, r8)
 80030ec:	20000008 	.word	0x20000008

080030f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030f8:	230f      	movs	r3, #15
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e125      	b.n	800335a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10a      	bne.n	800312c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2234      	movs	r2, #52	@ 0x34
 8003120:	2100      	movs	r1, #0
 8003122:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	0018      	movs	r0, r3
 8003128:	f7ff fdf6 	bl	8002d18 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003130:	2210      	movs	r2, #16
 8003132:	4013      	ands	r3, r2
 8003134:	d000      	beq.n	8003138 <HAL_ADC_Init+0x48>
 8003136:	e103      	b.n	8003340 <HAL_ADC_Init+0x250>
 8003138:	230f      	movs	r3, #15
 800313a:	18fb      	adds	r3, r7, r3
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d000      	beq.n	8003144 <HAL_ADC_Init+0x54>
 8003142:	e0fd      	b.n	8003340 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2204      	movs	r2, #4
 800314c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800314e:	d000      	beq.n	8003152 <HAL_ADC_Init+0x62>
 8003150:	e0f6      	b.n	8003340 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003156:	4a83      	ldr	r2, [pc, #524]	@ (8003364 <HAL_ADC_Init+0x274>)
 8003158:	4013      	ands	r3, r2
 800315a:	2202      	movs	r2, #2
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2203      	movs	r2, #3
 800316a:	4013      	ands	r3, r2
 800316c:	2b01      	cmp	r3, #1
 800316e:	d112      	bne.n	8003196 <HAL_ADC_Init+0xa6>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2201      	movs	r2, #1
 8003178:	4013      	ands	r3, r2
 800317a:	2b01      	cmp	r3, #1
 800317c:	d009      	beq.n	8003192 <HAL_ADC_Init+0xa2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	2380      	movs	r3, #128	@ 0x80
 8003186:	021b      	lsls	r3, r3, #8
 8003188:	401a      	ands	r2, r3
 800318a:	2380      	movs	r3, #128	@ 0x80
 800318c:	021b      	lsls	r3, r3, #8
 800318e:	429a      	cmp	r2, r3
 8003190:	d101      	bne.n	8003196 <HAL_ADC_Init+0xa6>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <HAL_ADC_Init+0xa8>
 8003196:	2300      	movs	r3, #0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d116      	bne.n	80031ca <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	2218      	movs	r2, #24
 80031a4:	4393      	bics	r3, r2
 80031a6:	0019      	movs	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	0899      	lsrs	r1, r3, #2
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4964      	ldr	r1, [pc, #400]	@ (8003368 <HAL_ADC_Init+0x278>)
 80031d6:	400a      	ands	r2, r1
 80031d8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	7e1b      	ldrb	r3, [r3, #24]
 80031de:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	7e5b      	ldrb	r3, [r3, #25]
 80031e4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031e6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	7e9b      	ldrb	r3, [r3, #26]
 80031ec:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80031ee:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d002      	beq.n	80031fe <HAL_ADC_Init+0x10e>
 80031f8:	2380      	movs	r3, #128	@ 0x80
 80031fa:	015b      	lsls	r3, r3, #5
 80031fc:	e000      	b.n	8003200 <HAL_ADC_Init+0x110>
 80031fe:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003200:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003206:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d101      	bne.n	8003214 <HAL_ADC_Init+0x124>
 8003210:	2304      	movs	r3, #4
 8003212:	e000      	b.n	8003216 <HAL_ADC_Init+0x126>
 8003214:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003216:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2124      	movs	r1, #36	@ 0x24
 800321c:	5c5b      	ldrb	r3, [r3, r1]
 800321e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003220:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	4313      	orrs	r3, r2
 8003226:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	7edb      	ldrb	r3, [r3, #27]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d115      	bne.n	800325c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	7e9b      	ldrb	r3, [r3, #26]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d105      	bne.n	8003244 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2280      	movs	r2, #128	@ 0x80
 800323c:	0252      	lsls	r2, r2, #9
 800323e:	4313      	orrs	r3, r2
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	e00b      	b.n	800325c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003248:	2220      	movs	r2, #32
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003254:	2201      	movs	r2, #1
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	23c2      	movs	r3, #194	@ 0xc2
 8003262:	33ff      	adds	r3, #255	@ 0xff
 8003264:	429a      	cmp	r2, r3
 8003266:	d007      	beq.n	8003278 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003270:	4313      	orrs	r3, r2
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	4313      	orrs	r3, r2
 8003276:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68d9      	ldr	r1, [r3, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	430a      	orrs	r2, r1
 8003286:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800328c:	2380      	movs	r3, #128	@ 0x80
 800328e:	055b      	lsls	r3, r3, #21
 8003290:	429a      	cmp	r2, r3
 8003292:	d01b      	beq.n	80032cc <HAL_ADC_Init+0x1dc>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003298:	2b01      	cmp	r3, #1
 800329a:	d017      	beq.n	80032cc <HAL_ADC_Init+0x1dc>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d013      	beq.n	80032cc <HAL_ADC_Init+0x1dc>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d00f      	beq.n	80032cc <HAL_ADC_Init+0x1dc>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d00b      	beq.n	80032cc <HAL_ADC_Init+0x1dc>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b8:	2b05      	cmp	r3, #5
 80032ba:	d007      	beq.n	80032cc <HAL_ADC_Init+0x1dc>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c0:	2b06      	cmp	r3, #6
 80032c2:	d003      	beq.n	80032cc <HAL_ADC_Init+0x1dc>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c8:	2b07      	cmp	r3, #7
 80032ca:	d112      	bne.n	80032f2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2107      	movs	r1, #7
 80032d8:	438a      	bics	r2, r1
 80032da:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6959      	ldr	r1, [r3, #20]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e6:	2207      	movs	r2, #7
 80032e8:	401a      	ands	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4a1c      	ldr	r2, [pc, #112]	@ (800336c <HAL_ADC_Init+0x27c>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d10b      	bne.n	800331a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330c:	2203      	movs	r2, #3
 800330e:	4393      	bics	r3, r2
 8003310:	2201      	movs	r2, #1
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003318:	e01c      	b.n	8003354 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800331e:	2212      	movs	r2, #18
 8003320:	4393      	bics	r3, r2
 8003322:	2210      	movs	r2, #16
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800332e:	2201      	movs	r2, #1
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003336:	230f      	movs	r3, #15
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	2201      	movs	r2, #1
 800333c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800333e:	e009      	b.n	8003354 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003344:	2210      	movs	r2, #16
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 800334c:	230f      	movs	r3, #15
 800334e:	18fb      	adds	r3, r7, r3
 8003350:	2201      	movs	r2, #1
 8003352:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003354:	230f      	movs	r3, #15
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	781b      	ldrb	r3, [r3, #0]
}
 800335a:	0018      	movs	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	b004      	add	sp, #16
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			@ (mov r8, r8)
 8003364:	fffffefd 	.word	0xfffffefd
 8003368:	fffe0219 	.word	0xfffe0219
 800336c:	833fffe7 	.word	0x833fffe7

08003370 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003378:	230f      	movs	r3, #15
 800337a:	18fb      	adds	r3, r7, r3
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2204      	movs	r2, #4
 8003388:	4013      	ands	r3, r2
 800338a:	d156      	bne.n	800343a <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2234      	movs	r2, #52	@ 0x34
 8003390:	5c9b      	ldrb	r3, [r3, r2]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <HAL_ADC_Start_IT+0x2a>
 8003396:	2302      	movs	r3, #2
 8003398:	e056      	b.n	8003448 <HAL_ADC_Start_IT+0xd8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2234      	movs	r2, #52	@ 0x34
 800339e:	2101      	movs	r1, #1
 80033a0:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	7e5b      	ldrb	r3, [r3, #25]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d007      	beq.n	80033ba <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80033aa:	230f      	movs	r3, #15
 80033ac:	18fc      	adds	r4, r7, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	0018      	movs	r0, r3
 80033b2:	f000 fa65 	bl	8003880 <ADC_Enable>
 80033b6:	0003      	movs	r3, r0
 80033b8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80033ba:	230f      	movs	r3, #15
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d13e      	bne.n	8003442 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c8:	4a21      	ldr	r2, [pc, #132]	@ (8003450 <HAL_ADC_Start_IT+0xe0>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	2280      	movs	r2, #128	@ 0x80
 80033ce:	0052      	lsls	r2, r2, #1
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2234      	movs	r2, #52	@ 0x34
 80033e0:	2100      	movs	r1, #0
 80033e2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	221c      	movs	r2, #28
 80033ea:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d110      	bne.n	8003416 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2104      	movs	r1, #4
 8003400:	438a      	bics	r2, r1
 8003402:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2118      	movs	r1, #24
 8003410:	430a      	orrs	r2, r1
 8003412:	605a      	str	r2, [r3, #4]
          break;
 8003414:	e008      	b.n	8003428 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	211c      	movs	r1, #28
 8003422:	430a      	orrs	r2, r1
 8003424:	605a      	str	r2, [r3, #4]
          break;
 8003426:	46c0      	nop			@ (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2104      	movs	r1, #4
 8003434:	430a      	orrs	r2, r1
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	e003      	b.n	8003442 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800343a:	230f      	movs	r3, #15
 800343c:	18fb      	adds	r3, r7, r3
 800343e:	2202      	movs	r2, #2
 8003440:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 8003442:	230f      	movs	r3, #15
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	781b      	ldrb	r3, [r3, #0]
}
 8003448:	0018      	movs	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	b005      	add	sp, #20
 800344e:	bd90      	pop	{r4, r7, pc}
 8003450:	fffff0fe 	.word	0xfffff0fe

08003454 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003454:	b590      	push	{r4, r7, lr}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003460:	2317      	movs	r3, #23
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2204      	movs	r2, #4
 8003470:	4013      	ands	r3, r2
 8003472:	d15e      	bne.n	8003532 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2234      	movs	r2, #52	@ 0x34
 8003478:	5c9b      	ldrb	r3, [r3, r2]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_ADC_Start_DMA+0x2e>
 800347e:	2302      	movs	r3, #2
 8003480:	e05e      	b.n	8003540 <HAL_ADC_Start_DMA+0xec>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2234      	movs	r2, #52	@ 0x34
 8003486:	2101      	movs	r1, #1
 8003488:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	7e5b      	ldrb	r3, [r3, #25]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d007      	beq.n	80034a2 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003492:	2317      	movs	r3, #23
 8003494:	18fc      	adds	r4, r7, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	0018      	movs	r0, r3
 800349a:	f000 f9f1 	bl	8003880 <ADC_Enable>
 800349e:	0003      	movs	r3, r0
 80034a0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80034a2:	2317      	movs	r3, #23
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d146      	bne.n	800353a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b0:	4a25      	ldr	r2, [pc, #148]	@ (8003548 <HAL_ADC_Start_DMA+0xf4>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	2280      	movs	r2, #128	@ 0x80
 80034b6:	0052      	lsls	r2, r2, #1
 80034b8:	431a      	orrs	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2234      	movs	r2, #52	@ 0x34
 80034c8:	2100      	movs	r1, #0
 80034ca:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d0:	4a1e      	ldr	r2, [pc, #120]	@ (800354c <HAL_ADC_Start_DMA+0xf8>)
 80034d2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003550 <HAL_ADC_Start_DMA+0xfc>)
 80034da:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003554 <HAL_ADC_Start_DMA+0x100>)
 80034e2:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	221c      	movs	r2, #28
 80034ea:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2110      	movs	r1, #16
 80034f8:	430a      	orrs	r2, r1
 80034fa:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2101      	movs	r1, #1
 8003508:	430a      	orrs	r2, r1
 800350a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3340      	adds	r3, #64	@ 0x40
 8003516:	0019      	movs	r1, r3
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f000 fc9c 	bl	8003e58 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2104      	movs	r1, #4
 800352c:	430a      	orrs	r2, r1
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	e003      	b.n	800353a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003532:	2317      	movs	r3, #23
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	2202      	movs	r2, #2
 8003538:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800353a:	2317      	movs	r3, #23
 800353c:	18fb      	adds	r3, r7, r3
 800353e:	781b      	ldrb	r3, [r3, #0]
}
 8003540:	0018      	movs	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	b007      	add	sp, #28
 8003546:	bd90      	pop	{r4, r7, pc}
 8003548:	fffff0fe 	.word	0xfffff0fe
 800354c:	08003b05 	.word	0x08003b05
 8003550:	08003bb9 	.word	0x08003bb9
 8003554:	08003bd7 	.word	0x08003bd7

08003558 <HAL_ADC_Stop_DMA>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8003558:	b5b0      	push	{r4, r5, r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003560:	230f      	movs	r3, #15
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	2200      	movs	r2, #0
 8003566:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2234      	movs	r2, #52	@ 0x34
 800356c:	5c9b      	ldrb	r3, [r3, r2]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_ADC_Stop_DMA+0x1e>
 8003572:	2302      	movs	r3, #2
 8003574:	e05f      	b.n	8003636 <HAL_ADC_Stop_DMA+0xde>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2234      	movs	r2, #52	@ 0x34
 800357a:	2101      	movs	r1, #1
 800357c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800357e:	250f      	movs	r5, #15
 8003580:	197c      	adds	r4, r7, r5
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	0018      	movs	r0, r3
 8003586:	f000 fa70 	bl	8003a6a <ADC_ConversionStop>
 800358a:	0003      	movs	r3, r0
 800358c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800358e:	0028      	movs	r0, r5
 8003590:	183b      	adds	r3, r7, r0
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d147      	bne.n	8003628 <HAL_ADC_Stop_DMA+0xd0>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2101      	movs	r1, #1
 80035a4:	438a      	bics	r2, r1
 80035a6:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ac:	2221      	movs	r2, #33	@ 0x21
 80035ae:	5c9b      	ldrb	r3, [r3, r2]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d112      	bne.n	80035dc <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ba:	0005      	movs	r5, r0
 80035bc:	183c      	adds	r4, r7, r0
 80035be:	0018      	movs	r0, r3
 80035c0:	f000 fcb0 	bl	8003f24 <HAL_DMA_Abort>
 80035c4:	0003      	movs	r3, r0
 80035c6:	7023      	strb	r3, [r4, #0]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80035c8:	197b      	adds	r3, r7, r5
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <HAL_ADC_Stop_DMA+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d4:	2240      	movs	r2, #64	@ 0x40
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2110      	movs	r1, #16
 80035e8:	438a      	bics	r2, r1
 80035ea:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 80035ec:	220f      	movs	r2, #15
 80035ee:	18bb      	adds	r3, r7, r2
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d107      	bne.n	8003606 <HAL_ADC_Stop_DMA+0xae>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80035f6:	18bc      	adds	r4, r7, r2
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	0018      	movs	r0, r3
 80035fc:	f000 f9c4 	bl	8003988 <ADC_Disable>
 8003600:	0003      	movs	r3, r0
 8003602:	7023      	strb	r3, [r4, #0]
 8003604:	e003      	b.n	800360e <HAL_ADC_Stop_DMA+0xb6>
    }
    else
    {
      ADC_Disable(hadc);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	0018      	movs	r0, r3
 800360a:	f000 f9bd 	bl	8003988 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800360e:	230f      	movs	r3, #15
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d107      	bne.n	8003628 <HAL_ADC_Stop_DMA+0xd0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361c:	4a08      	ldr	r2, [pc, #32]	@ (8003640 <HAL_ADC_Stop_DMA+0xe8>)
 800361e:	4013      	ands	r3, r2
 8003620:	2201      	movs	r2, #1
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	639a      	str	r2, [r3, #56]	@ 0x38
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2234      	movs	r2, #52	@ 0x34
 800362c:	2100      	movs	r1, #0
 800362e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003630:	230f      	movs	r3, #15
 8003632:	18fb      	adds	r3, r7, r3
 8003634:	781b      	ldrb	r3, [r3, #0]
}
 8003636:	0018      	movs	r0, r3
 8003638:	46bd      	mov	sp, r7
 800363a:	b004      	add	sp, #16
 800363c:	bdb0      	pop	{r4, r5, r7, pc}
 800363e:	46c0      	nop			@ (mov r8, r8)
 8003640:	fffffefe 	.word	0xfffffefe

08003644 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800364c:	46c0      	nop			@ (mov r8, r8)
 800364e:	46bd      	mov	sp, r7
 8003650:	b002      	add	sp, #8
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800365c:	46c0      	nop			@ (mov r8, r8)
 800365e:	46bd      	mov	sp, r7
 8003660:	b002      	add	sp, #8
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800366e:	230f      	movs	r3, #15
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	2200      	movs	r2, #0
 8003674:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800367e:	2380      	movs	r3, #128	@ 0x80
 8003680:	055b      	lsls	r3, r3, #21
 8003682:	429a      	cmp	r2, r3
 8003684:	d011      	beq.n	80036aa <HAL_ADC_ConfigChannel+0x46>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368a:	2b01      	cmp	r3, #1
 800368c:	d00d      	beq.n	80036aa <HAL_ADC_ConfigChannel+0x46>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003692:	2b02      	cmp	r3, #2
 8003694:	d009      	beq.n	80036aa <HAL_ADC_ConfigChannel+0x46>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369a:	2b03      	cmp	r3, #3
 800369c:	d005      	beq.n	80036aa <HAL_ADC_ConfigChannel+0x46>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d001      	beq.n	80036aa <HAL_ADC_ConfigChannel+0x46>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2234      	movs	r2, #52	@ 0x34
 80036ae:	5c9b      	ldrb	r3, [r3, r2]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x54>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e0d0      	b.n	800385a <HAL_ADC_ConfigChannel+0x1f6>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2234      	movs	r2, #52	@ 0x34
 80036bc:	2101      	movs	r1, #1
 80036be:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2204      	movs	r2, #4
 80036c8:	4013      	ands	r3, r2
 80036ca:	d000      	beq.n	80036ce <HAL_ADC_ConfigChannel+0x6a>
 80036cc:	e0b4      	b.n	8003838 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	4a64      	ldr	r2, [pc, #400]	@ (8003864 <HAL_ADC_ConfigChannel+0x200>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d100      	bne.n	80036da <HAL_ADC_ConfigChannel+0x76>
 80036d8:	e082      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2201      	movs	r2, #1
 80036e6:	409a      	lsls	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036f4:	2380      	movs	r3, #128	@ 0x80
 80036f6:	055b      	lsls	r3, r3, #21
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d037      	beq.n	800376c <HAL_ADC_ConfigChannel+0x108>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003700:	2b01      	cmp	r3, #1
 8003702:	d033      	beq.n	800376c <HAL_ADC_ConfigChannel+0x108>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003708:	2b02      	cmp	r3, #2
 800370a:	d02f      	beq.n	800376c <HAL_ADC_ConfigChannel+0x108>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003710:	2b03      	cmp	r3, #3
 8003712:	d02b      	beq.n	800376c <HAL_ADC_ConfigChannel+0x108>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003718:	2b04      	cmp	r3, #4
 800371a:	d027      	beq.n	800376c <HAL_ADC_ConfigChannel+0x108>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003720:	2b05      	cmp	r3, #5
 8003722:	d023      	beq.n	800376c <HAL_ADC_ConfigChannel+0x108>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003728:	2b06      	cmp	r3, #6
 800372a:	d01f      	beq.n	800376c <HAL_ADC_ConfigChannel+0x108>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003730:	2b07      	cmp	r3, #7
 8003732:	d01b      	beq.n	800376c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	2107      	movs	r1, #7
 8003740:	400b      	ands	r3, r1
 8003742:	429a      	cmp	r2, r3
 8003744:	d012      	beq.n	800376c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2107      	movs	r1, #7
 8003752:	438a      	bics	r2, r1
 8003754:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6959      	ldr	r1, [r3, #20]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2207      	movs	r2, #7
 8003762:	401a      	ands	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b10      	cmp	r3, #16
 8003772:	d007      	beq.n	8003784 <HAL_ADC_ConfigChannel+0x120>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b11      	cmp	r3, #17
 800377a:	d003      	beq.n	8003784 <HAL_ADC_ConfigChannel+0x120>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b12      	cmp	r3, #18
 8003782:	d163      	bne.n	800384c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003784:	4b38      	ldr	r3, [pc, #224]	@ (8003868 <HAL_ADC_ConfigChannel+0x204>)
 8003786:	6819      	ldr	r1, [r3, #0]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b10      	cmp	r3, #16
 800378e:	d009      	beq.n	80037a4 <HAL_ADC_ConfigChannel+0x140>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b11      	cmp	r3, #17
 8003796:	d102      	bne.n	800379e <HAL_ADC_ConfigChannel+0x13a>
 8003798:	2380      	movs	r3, #128	@ 0x80
 800379a:	03db      	lsls	r3, r3, #15
 800379c:	e004      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x144>
 800379e:	2380      	movs	r3, #128	@ 0x80
 80037a0:	045b      	lsls	r3, r3, #17
 80037a2:	e001      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x144>
 80037a4:	2380      	movs	r3, #128	@ 0x80
 80037a6:	041b      	lsls	r3, r3, #16
 80037a8:	4a2f      	ldr	r2, [pc, #188]	@ (8003868 <HAL_ADC_ConfigChannel+0x204>)
 80037aa:	430b      	orrs	r3, r1
 80037ac:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b10      	cmp	r3, #16
 80037b4:	d14a      	bne.n	800384c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037b6:	4b2d      	ldr	r3, [pc, #180]	@ (800386c <HAL_ADC_ConfigChannel+0x208>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	492d      	ldr	r1, [pc, #180]	@ (8003870 <HAL_ADC_ConfigChannel+0x20c>)
 80037bc:	0018      	movs	r0, r3
 80037be:	f7fc fcb5 	bl	800012c <__udivsi3>
 80037c2:	0003      	movs	r3, r0
 80037c4:	001a      	movs	r2, r3
 80037c6:	0013      	movs	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	189b      	adds	r3, r3, r2
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037d0:	e002      	b.n	80037d8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f9      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x16e>
 80037de:	e035      	b.n	800384c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2101      	movs	r1, #1
 80037ec:	4099      	lsls	r1, r3
 80037ee:	000b      	movs	r3, r1
 80037f0:	43d9      	mvns	r1, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	400a      	ands	r2, r1
 80037f8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b10      	cmp	r3, #16
 8003800:	d007      	beq.n	8003812 <HAL_ADC_ConfigChannel+0x1ae>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b11      	cmp	r3, #17
 8003808:	d003      	beq.n	8003812 <HAL_ADC_ConfigChannel+0x1ae>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b12      	cmp	r3, #18
 8003810:	d11c      	bne.n	800384c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003812:	4b15      	ldr	r3, [pc, #84]	@ (8003868 <HAL_ADC_ConfigChannel+0x204>)
 8003814:	6819      	ldr	r1, [r3, #0]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b10      	cmp	r3, #16
 800381c:	d007      	beq.n	800382e <HAL_ADC_ConfigChannel+0x1ca>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b11      	cmp	r3, #17
 8003824:	d101      	bne.n	800382a <HAL_ADC_ConfigChannel+0x1c6>
 8003826:	4b13      	ldr	r3, [pc, #76]	@ (8003874 <HAL_ADC_ConfigChannel+0x210>)
 8003828:	e002      	b.n	8003830 <HAL_ADC_ConfigChannel+0x1cc>
 800382a:	4b13      	ldr	r3, [pc, #76]	@ (8003878 <HAL_ADC_ConfigChannel+0x214>)
 800382c:	e000      	b.n	8003830 <HAL_ADC_ConfigChannel+0x1cc>
 800382e:	4b13      	ldr	r3, [pc, #76]	@ (800387c <HAL_ADC_ConfigChannel+0x218>)
 8003830:	4a0d      	ldr	r2, [pc, #52]	@ (8003868 <HAL_ADC_ConfigChannel+0x204>)
 8003832:	400b      	ands	r3, r1
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e009      	b.n	800384c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383c:	2220      	movs	r2, #32
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003844:	230f      	movs	r3, #15
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	2201      	movs	r2, #1
 800384a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2234      	movs	r2, #52	@ 0x34
 8003850:	2100      	movs	r1, #0
 8003852:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003854:	230f      	movs	r3, #15
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	781b      	ldrb	r3, [r3, #0]
}
 800385a:	0018      	movs	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	b004      	add	sp, #16
 8003860:	bd80      	pop	{r7, pc}
 8003862:	46c0      	nop			@ (mov r8, r8)
 8003864:	00001001 	.word	0x00001001
 8003868:	40012708 	.word	0x40012708
 800386c:	20000000 	.word	0x20000000
 8003870:	000f4240 	.word	0x000f4240
 8003874:	ffbfffff 	.word	0xffbfffff
 8003878:	feffffff 	.word	0xfeffffff
 800387c:	ff7fffff 	.word	0xff7fffff

08003880 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2203      	movs	r2, #3
 8003898:	4013      	ands	r3, r2
 800389a:	2b01      	cmp	r3, #1
 800389c:	d112      	bne.n	80038c4 <ADC_Enable+0x44>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2201      	movs	r2, #1
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d009      	beq.n	80038c0 <ADC_Enable+0x40>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	2380      	movs	r3, #128	@ 0x80
 80038b4:	021b      	lsls	r3, r3, #8
 80038b6:	401a      	ands	r2, r3
 80038b8:	2380      	movs	r3, #128	@ 0x80
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	429a      	cmp	r2, r3
 80038be:	d101      	bne.n	80038c4 <ADC_Enable+0x44>
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <ADC_Enable+0x46>
 80038c4:	2300      	movs	r3, #0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d152      	bne.n	8003970 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	4a2a      	ldr	r2, [pc, #168]	@ (800397c <ADC_Enable+0xfc>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	d00d      	beq.n	80038f2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038da:	2210      	movs	r2, #16
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e6:	2201      	movs	r2, #1
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e03f      	b.n	8003972 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2101      	movs	r1, #1
 80038fe:	430a      	orrs	r2, r1
 8003900:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003902:	4b1f      	ldr	r3, [pc, #124]	@ (8003980 <ADC_Enable+0x100>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	491f      	ldr	r1, [pc, #124]	@ (8003984 <ADC_Enable+0x104>)
 8003908:	0018      	movs	r0, r3
 800390a:	f7fc fc0f 	bl	800012c <__udivsi3>
 800390e:	0003      	movs	r3, r0
 8003910:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003912:	e002      	b.n	800391a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	3b01      	subs	r3, #1
 8003918:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f9      	bne.n	8003914 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003920:	f7ff fbb8 	bl	8003094 <HAL_GetTick>
 8003924:	0003      	movs	r3, r0
 8003926:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003928:	e01b      	b.n	8003962 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800392a:	f7ff fbb3 	bl	8003094 <HAL_GetTick>
 800392e:	0002      	movs	r2, r0
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d914      	bls.n	8003962 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2201      	movs	r2, #1
 8003940:	4013      	ands	r3, r2
 8003942:	2b01      	cmp	r3, #1
 8003944:	d00d      	beq.n	8003962 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394a:	2210      	movs	r2, #16
 800394c:	431a      	orrs	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003956:	2201      	movs	r2, #1
 8003958:	431a      	orrs	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e007      	b.n	8003972 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2201      	movs	r2, #1
 800396a:	4013      	ands	r3, r2
 800396c:	2b01      	cmp	r3, #1
 800396e:	d1dc      	bne.n	800392a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	0018      	movs	r0, r3
 8003974:	46bd      	mov	sp, r7
 8003976:	b004      	add	sp, #16
 8003978:	bd80      	pop	{r7, pc}
 800397a:	46c0      	nop			@ (mov r8, r8)
 800397c:	80000017 	.word	0x80000017
 8003980:	20000000 	.word	0x20000000
 8003984:	000f4240 	.word	0x000f4240

08003988 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2203      	movs	r2, #3
 800399c:	4013      	ands	r3, r2
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d112      	bne.n	80039c8 <ADC_Disable+0x40>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2201      	movs	r2, #1
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d009      	beq.n	80039c4 <ADC_Disable+0x3c>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	2380      	movs	r3, #128	@ 0x80
 80039b8:	021b      	lsls	r3, r3, #8
 80039ba:	401a      	ands	r2, r3
 80039bc:	2380      	movs	r3, #128	@ 0x80
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d101      	bne.n	80039c8 <ADC_Disable+0x40>
 80039c4:	2301      	movs	r3, #1
 80039c6:	e000      	b.n	80039ca <ADC_Disable+0x42>
 80039c8:	2300      	movs	r3, #0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d048      	beq.n	8003a60 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2205      	movs	r2, #5
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d110      	bne.n	80039fe <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2102      	movs	r1, #2
 80039e8:	430a      	orrs	r2, r1
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2203      	movs	r2, #3
 80039f2:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039f4:	f7ff fb4e 	bl	8003094 <HAL_GetTick>
 80039f8:	0003      	movs	r3, r0
 80039fa:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80039fc:	e029      	b.n	8003a52 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a02:	2210      	movs	r2, #16
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	639a      	str	r2, [r3, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a0e:	2201      	movs	r2, #1
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	63da      	str	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e023      	b.n	8003a62 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a1a:	f7ff fb3b 	bl	8003094 <HAL_GetTick>
 8003a1e:	0002      	movs	r2, r0
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d914      	bls.n	8003a52 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d10d      	bne.n	8003a52 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3a:	2210      	movs	r2, #16
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a46:	2201      	movs	r2, #1
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e007      	b.n	8003a62 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d0dc      	beq.n	8003a1a <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	0018      	movs	r0, r3
 8003a64:	46bd      	mov	sp, r7
 8003a66:	b004      	add	sp, #16
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d03a      	beq.n	8003af8 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2204      	movs	r2, #4
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d10d      	bne.n	8003aac <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2202      	movs	r2, #2
 8003a98:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003a9a:	d107      	bne.n	8003aac <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2110      	movs	r1, #16
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003aac:	f7ff faf2 	bl	8003094 <HAL_GetTick>
 8003ab0:	0003      	movs	r3, r0
 8003ab2:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003ab4:	e01a      	b.n	8003aec <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003ab6:	f7ff faed 	bl	8003094 <HAL_GetTick>
 8003aba:	0002      	movs	r2, r0
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d913      	bls.n	8003aec <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2204      	movs	r2, #4
 8003acc:	4013      	ands	r3, r2
 8003ace:	d00d      	beq.n	8003aec <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad4:	2210      	movs	r2, #16
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e006      	b.n	8003afa <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2204      	movs	r2, #4
 8003af4:	4013      	ands	r3, r2
 8003af6:	d1de      	bne.n	8003ab6 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	0018      	movs	r0, r3
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b004      	add	sp, #16
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b16:	2250      	movs	r2, #80	@ 0x50
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d140      	bne.n	8003b9e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b20:	2280      	movs	r2, #128	@ 0x80
 8003b22:	0092      	lsls	r2, r2, #2
 8003b24:	431a      	orrs	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	23c0      	movs	r3, #192	@ 0xc0
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	4013      	ands	r3, r2
 8003b36:	d12d      	bne.n	8003b94 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d129      	bne.n	8003b94 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2208      	movs	r2, #8
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d122      	bne.n	8003b94 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	2204      	movs	r2, #4
 8003b56:	4013      	ands	r3, r2
 8003b58:	d110      	bne.n	8003b7c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	210c      	movs	r1, #12
 8003b66:	438a      	bics	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b6e:	4a11      	ldr	r2, [pc, #68]	@ (8003bb4 <ADC_DMAConvCplt+0xb0>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	2201      	movs	r2, #1
 8003b74:	431a      	orrs	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	639a      	str	r2, [r3, #56]	@ 0x38
 8003b7a:	e00b      	b.n	8003b94 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b80:	2220      	movs	r2, #32
 8003b82:	431a      	orrs	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	0018      	movs	r0, r3
 8003b98:	f7fe fdfe 	bl	8002798 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003b9c:	e005      	b.n	8003baa <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	0010      	movs	r0, r2
 8003ba8:	4798      	blx	r3
}
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b004      	add	sp, #16
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	46c0      	nop			@ (mov r8, r8)
 8003bb4:	fffffefe 	.word	0xfffffefe

08003bb8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f7ff fd3b 	bl	8003644 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bce:	46c0      	nop			@ (mov r8, r8)
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b004      	add	sp, #16
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b084      	sub	sp, #16
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be8:	2240      	movs	r2, #64	@ 0x40
 8003bea:	431a      	orrs	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f7ff fd28 	bl	8003654 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c04:	46c0      	nop			@ (mov r8, r8)
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b004      	add	sp, #16
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	0002      	movs	r2, r0
 8003c14:	1dfb      	adds	r3, r7, #7
 8003c16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c18:	1dfb      	adds	r3, r7, #7
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c1e:	d809      	bhi.n	8003c34 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c20:	1dfb      	adds	r3, r7, #7
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	001a      	movs	r2, r3
 8003c26:	231f      	movs	r3, #31
 8003c28:	401a      	ands	r2, r3
 8003c2a:	4b04      	ldr	r3, [pc, #16]	@ (8003c3c <__NVIC_EnableIRQ+0x30>)
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	4091      	lsls	r1, r2
 8003c30:	000a      	movs	r2, r1
 8003c32:	601a      	str	r2, [r3, #0]
  }
}
 8003c34:	46c0      	nop			@ (mov r8, r8)
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b002      	add	sp, #8
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	e000e100 	.word	0xe000e100

08003c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c40:	b590      	push	{r4, r7, lr}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	0002      	movs	r2, r0
 8003c48:	6039      	str	r1, [r7, #0]
 8003c4a:	1dfb      	adds	r3, r7, #7
 8003c4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c4e:	1dfb      	adds	r3, r7, #7
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c54:	d828      	bhi.n	8003ca8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c56:	4a2f      	ldr	r2, [pc, #188]	@ (8003d14 <__NVIC_SetPriority+0xd4>)
 8003c58:	1dfb      	adds	r3, r7, #7
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	b25b      	sxtb	r3, r3
 8003c5e:	089b      	lsrs	r3, r3, #2
 8003c60:	33c0      	adds	r3, #192	@ 0xc0
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	589b      	ldr	r3, [r3, r2]
 8003c66:	1dfa      	adds	r2, r7, #7
 8003c68:	7812      	ldrb	r2, [r2, #0]
 8003c6a:	0011      	movs	r1, r2
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	400a      	ands	r2, r1
 8003c70:	00d2      	lsls	r2, r2, #3
 8003c72:	21ff      	movs	r1, #255	@ 0xff
 8003c74:	4091      	lsls	r1, r2
 8003c76:	000a      	movs	r2, r1
 8003c78:	43d2      	mvns	r2, r2
 8003c7a:	401a      	ands	r2, r3
 8003c7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	019b      	lsls	r3, r3, #6
 8003c82:	22ff      	movs	r2, #255	@ 0xff
 8003c84:	401a      	ands	r2, r3
 8003c86:	1dfb      	adds	r3, r7, #7
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	4003      	ands	r3, r0
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c94:	481f      	ldr	r0, [pc, #124]	@ (8003d14 <__NVIC_SetPriority+0xd4>)
 8003c96:	1dfb      	adds	r3, r7, #7
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	b25b      	sxtb	r3, r3
 8003c9c:	089b      	lsrs	r3, r3, #2
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	33c0      	adds	r3, #192	@ 0xc0
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003ca6:	e031      	b.n	8003d0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8003d18 <__NVIC_SetPriority+0xd8>)
 8003caa:	1dfb      	adds	r3, r7, #7
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	0019      	movs	r1, r3
 8003cb0:	230f      	movs	r3, #15
 8003cb2:	400b      	ands	r3, r1
 8003cb4:	3b08      	subs	r3, #8
 8003cb6:	089b      	lsrs	r3, r3, #2
 8003cb8:	3306      	adds	r3, #6
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	18d3      	adds	r3, r2, r3
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	1dfa      	adds	r2, r7, #7
 8003cc4:	7812      	ldrb	r2, [r2, #0]
 8003cc6:	0011      	movs	r1, r2
 8003cc8:	2203      	movs	r2, #3
 8003cca:	400a      	ands	r2, r1
 8003ccc:	00d2      	lsls	r2, r2, #3
 8003cce:	21ff      	movs	r1, #255	@ 0xff
 8003cd0:	4091      	lsls	r1, r2
 8003cd2:	000a      	movs	r2, r1
 8003cd4:	43d2      	mvns	r2, r2
 8003cd6:	401a      	ands	r2, r3
 8003cd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	019b      	lsls	r3, r3, #6
 8003cde:	22ff      	movs	r2, #255	@ 0xff
 8003ce0:	401a      	ands	r2, r3
 8003ce2:	1dfb      	adds	r3, r7, #7
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	2303      	movs	r3, #3
 8003cea:	4003      	ands	r3, r0
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cf0:	4809      	ldr	r0, [pc, #36]	@ (8003d18 <__NVIC_SetPriority+0xd8>)
 8003cf2:	1dfb      	adds	r3, r7, #7
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	001c      	movs	r4, r3
 8003cf8:	230f      	movs	r3, #15
 8003cfa:	4023      	ands	r3, r4
 8003cfc:	3b08      	subs	r3, #8
 8003cfe:	089b      	lsrs	r3, r3, #2
 8003d00:	430a      	orrs	r2, r1
 8003d02:	3306      	adds	r3, #6
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	18c3      	adds	r3, r0, r3
 8003d08:	3304      	adds	r3, #4
 8003d0a:	601a      	str	r2, [r3, #0]
}
 8003d0c:	46c0      	nop			@ (mov r8, r8)
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b003      	add	sp, #12
 8003d12:	bd90      	pop	{r4, r7, pc}
 8003d14:	e000e100 	.word	0xe000e100
 8003d18:	e000ed00 	.word	0xe000ed00

08003d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	1e5a      	subs	r2, r3, #1
 8003d28:	2380      	movs	r3, #128	@ 0x80
 8003d2a:	045b      	lsls	r3, r3, #17
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d301      	bcc.n	8003d34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d30:	2301      	movs	r3, #1
 8003d32:	e010      	b.n	8003d56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d34:	4b0a      	ldr	r3, [pc, #40]	@ (8003d60 <SysTick_Config+0x44>)
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	3a01      	subs	r2, #1
 8003d3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	425b      	negs	r3, r3
 8003d40:	2103      	movs	r1, #3
 8003d42:	0018      	movs	r0, r3
 8003d44:	f7ff ff7c 	bl	8003c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d48:	4b05      	ldr	r3, [pc, #20]	@ (8003d60 <SysTick_Config+0x44>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d4e:	4b04      	ldr	r3, [pc, #16]	@ (8003d60 <SysTick_Config+0x44>)
 8003d50:	2207      	movs	r2, #7
 8003d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	0018      	movs	r0, r3
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b002      	add	sp, #8
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	46c0      	nop			@ (mov r8, r8)
 8003d60:	e000e010 	.word	0xe000e010

08003d64 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	607a      	str	r2, [r7, #4]
 8003d6e:	210f      	movs	r1, #15
 8003d70:	187b      	adds	r3, r7, r1
 8003d72:	1c02      	adds	r2, r0, #0
 8003d74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	187b      	adds	r3, r7, r1
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	b25b      	sxtb	r3, r3
 8003d7e:	0011      	movs	r1, r2
 8003d80:	0018      	movs	r0, r3
 8003d82:	f7ff ff5d 	bl	8003c40 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003d86:	46c0      	nop			@ (mov r8, r8)
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b004      	add	sp, #16
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	0002      	movs	r2, r0
 8003d96:	1dfb      	adds	r3, r7, #7
 8003d98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d9a:	1dfb      	adds	r3, r7, #7
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	b25b      	sxtb	r3, r3
 8003da0:	0018      	movs	r0, r3
 8003da2:	f7ff ff33 	bl	8003c0c <__NVIC_EnableIRQ>
}
 8003da6:	46c0      	nop			@ (mov r8, r8)
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b002      	add	sp, #8
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	0018      	movs	r0, r3
 8003dba:	f7ff ffaf 	bl	8003d1c <SysTick_Config>
 8003dbe:	0003      	movs	r3, r0
}
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b002      	add	sp, #8
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e036      	b.n	8003e4c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2221      	movs	r2, #33	@ 0x21
 8003de2:	2102      	movs	r1, #2
 8003de4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4a18      	ldr	r2, [pc, #96]	@ (8003e54 <HAL_DMA_Init+0x8c>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f000 f97e 	bl	8004130 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2221      	movs	r2, #33	@ 0x21
 8003e3e:	2101      	movs	r1, #1
 8003e40:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2220      	movs	r2, #32
 8003e46:	2100      	movs	r1, #0
 8003e48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	b004      	add	sp, #16
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	ffffc00f 	.word	0xffffc00f

08003e58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e66:	2317      	movs	r3, #23
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2220      	movs	r2, #32
 8003e72:	5c9b      	ldrb	r3, [r3, r2]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_DMA_Start_IT+0x24>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e04f      	b.n	8003f1c <HAL_DMA_Start_IT+0xc4>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	2101      	movs	r1, #1
 8003e82:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2221      	movs	r2, #33	@ 0x21
 8003e88:	5c9b      	ldrb	r3, [r3, r2]
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d13a      	bne.n	8003f06 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2221      	movs	r2, #33	@ 0x21
 8003e94:	2102      	movs	r1, #2
 8003e96:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	438a      	bics	r2, r1
 8003eac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	68b9      	ldr	r1, [r7, #8]
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f90f 	bl	80040d8 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d008      	beq.n	8003ed4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	210e      	movs	r1, #14
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	e00f      	b.n	8003ef4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	210a      	movs	r1, #10
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2104      	movs	r1, #4
 8003ef0:	438a      	bics	r2, r1
 8003ef2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2101      	movs	r1, #1
 8003f00:	430a      	orrs	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e007      	b.n	8003f16 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f0e:	2317      	movs	r3, #23
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	2202      	movs	r2, #2
 8003f14:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003f16:	2317      	movs	r3, #23
 8003f18:	18fb      	adds	r3, r7, r3
 8003f1a:	781b      	ldrb	r3, [r3, #0]
}
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	b006      	add	sp, #24
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2221      	movs	r2, #33	@ 0x21
 8003f30:	5c9b      	ldrb	r3, [r3, r2]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d008      	beq.n	8003f4a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	2100      	movs	r1, #0
 8003f44:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e020      	b.n	8003f8c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	210e      	movs	r1, #14
 8003f56:	438a      	bics	r2, r1
 8003f58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2101      	movs	r1, #1
 8003f66:	438a      	bics	r2, r1
 8003f68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f72:	2101      	movs	r1, #1
 8003f74:	4091      	lsls	r1, r2
 8003f76:	000a      	movs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2221      	movs	r2, #33	@ 0x21
 8003f7e:	2101      	movs	r1, #1
 8003f80:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2220      	movs	r2, #32
 8003f86:	2100      	movs	r1, #0
 8003f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b002      	add	sp, #8
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb0:	2204      	movs	r2, #4
 8003fb2:	409a      	lsls	r2, r3
 8003fb4:	0013      	movs	r3, r2
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	d024      	beq.n	8004006 <HAL_DMA_IRQHandler+0x72>
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2204      	movs	r2, #4
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d020      	beq.n	8004006 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d107      	bne.n	8003fe0 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2104      	movs	r1, #4
 8003fdc:	438a      	bics	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe8:	2104      	movs	r1, #4
 8003fea:	4091      	lsls	r1, r2
 8003fec:	000a      	movs	r2, r1
 8003fee:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d100      	bne.n	8003ffa <HAL_DMA_IRQHandler+0x66>
 8003ff8:	e06a      	b.n	80040d0 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	0010      	movs	r0, r2
 8004002:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004004:	e064      	b.n	80040d0 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400a:	2202      	movs	r2, #2
 800400c:	409a      	lsls	r2, r3
 800400e:	0013      	movs	r3, r2
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4013      	ands	r3, r2
 8004014:	d02b      	beq.n	800406e <HAL_DMA_IRQHandler+0xda>
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2202      	movs	r2, #2
 800401a:	4013      	ands	r3, r2
 800401c:	d027      	beq.n	800406e <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2220      	movs	r2, #32
 8004026:	4013      	ands	r3, r2
 8004028:	d10b      	bne.n	8004042 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	210a      	movs	r1, #10
 8004036:	438a      	bics	r2, r1
 8004038:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2221      	movs	r2, #33	@ 0x21
 800403e:	2101      	movs	r1, #1
 8004040:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404a:	2102      	movs	r1, #2
 800404c:	4091      	lsls	r1, r2
 800404e:	000a      	movs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2220      	movs	r2, #32
 8004056:	2100      	movs	r1, #0
 8004058:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405e:	2b00      	cmp	r3, #0
 8004060:	d036      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	0010      	movs	r0, r2
 800406a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800406c:	e030      	b.n	80040d0 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004072:	2208      	movs	r2, #8
 8004074:	409a      	lsls	r2, r3
 8004076:	0013      	movs	r3, r2
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4013      	ands	r3, r2
 800407c:	d028      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x13c>
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2208      	movs	r2, #8
 8004082:	4013      	ands	r3, r2
 8004084:	d024      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	210e      	movs	r1, #14
 8004092:	438a      	bics	r2, r1
 8004094:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800409e:	2101      	movs	r1, #1
 80040a0:	4091      	lsls	r1, r2
 80040a2:	000a      	movs	r2, r1
 80040a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2221      	movs	r2, #33	@ 0x21
 80040b0:	2101      	movs	r1, #1
 80040b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	2100      	movs	r1, #0
 80040ba:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	0010      	movs	r0, r2
 80040cc:	4798      	blx	r3
    }
  }
}
 80040ce:	e7ff      	b.n	80040d0 <HAL_DMA_IRQHandler+0x13c>
 80040d0:	46c0      	nop			@ (mov r8, r8)
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b004      	add	sp, #16
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ee:	2101      	movs	r1, #1
 80040f0:	4091      	lsls	r1, r2
 80040f2:	000a      	movs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b10      	cmp	r3, #16
 8004104:	d108      	bne.n	8004118 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004116:	e007      	b.n	8004128 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	60da      	str	r2, [r3, #12]
}
 8004128:	46c0      	nop			@ (mov r8, r8)
 800412a:	46bd      	mov	sp, r7
 800412c:	b004      	add	sp, #16
 800412e:	bd80      	pop	{r7, pc}

08004130 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a08      	ldr	r2, [pc, #32]	@ (8004160 <DMA_CalcBaseAndBitshift+0x30>)
 800413e:	4694      	mov	ip, r2
 8004140:	4463      	add	r3, ip
 8004142:	2114      	movs	r1, #20
 8004144:	0018      	movs	r0, r3
 8004146:	f7fb fff1 	bl	800012c <__udivsi3>
 800414a:	0003      	movs	r3, r0
 800414c:	009a      	lsls	r2, r3, #2
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a03      	ldr	r2, [pc, #12]	@ (8004164 <DMA_CalcBaseAndBitshift+0x34>)
 8004156:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8004158:	46c0      	nop			@ (mov r8, r8)
 800415a:	46bd      	mov	sp, r7
 800415c:	b002      	add	sp, #8
 800415e:	bd80      	pop	{r7, pc}
 8004160:	bffdfff8 	.word	0xbffdfff8
 8004164:	40020000 	.word	0x40020000

08004168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004172:	2300      	movs	r3, #0
 8004174:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004176:	e149      	b.n	800440c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2101      	movs	r1, #1
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4091      	lsls	r1, r2
 8004182:	000a      	movs	r2, r1
 8004184:	4013      	ands	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d100      	bne.n	8004190 <HAL_GPIO_Init+0x28>
 800418e:	e13a      	b.n	8004406 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2203      	movs	r2, #3
 8004196:	4013      	ands	r3, r2
 8004198:	2b01      	cmp	r3, #1
 800419a:	d005      	beq.n	80041a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2203      	movs	r2, #3
 80041a2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d130      	bne.n	800420a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	2203      	movs	r2, #3
 80041b4:	409a      	lsls	r2, r3
 80041b6:	0013      	movs	r3, r2
 80041b8:	43da      	mvns	r2, r3
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4013      	ands	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	409a      	lsls	r2, r3
 80041ca:	0013      	movs	r3, r2
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041de:	2201      	movs	r2, #1
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	409a      	lsls	r2, r3
 80041e4:	0013      	movs	r3, r2
 80041e6:	43da      	mvns	r2, r3
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	4013      	ands	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	091b      	lsrs	r3, r3, #4
 80041f4:	2201      	movs	r2, #1
 80041f6:	401a      	ands	r2, r3
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	409a      	lsls	r2, r3
 80041fc:	0013      	movs	r3, r2
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2203      	movs	r2, #3
 8004210:	4013      	ands	r3, r2
 8004212:	2b03      	cmp	r3, #3
 8004214:	d017      	beq.n	8004246 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	2203      	movs	r2, #3
 8004222:	409a      	lsls	r2, r3
 8004224:	0013      	movs	r3, r2
 8004226:	43da      	mvns	r2, r3
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4013      	ands	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	409a      	lsls	r2, r3
 8004238:	0013      	movs	r3, r2
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2203      	movs	r2, #3
 800424c:	4013      	ands	r3, r2
 800424e:	2b02      	cmp	r3, #2
 8004250:	d123      	bne.n	800429a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	08da      	lsrs	r2, r3, #3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3208      	adds	r2, #8
 800425a:	0092      	lsls	r2, r2, #2
 800425c:	58d3      	ldr	r3, [r2, r3]
 800425e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	2207      	movs	r2, #7
 8004264:	4013      	ands	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	220f      	movs	r2, #15
 800426a:	409a      	lsls	r2, r3
 800426c:	0013      	movs	r3, r2
 800426e:	43da      	mvns	r2, r3
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	4013      	ands	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2107      	movs	r1, #7
 800427e:	400b      	ands	r3, r1
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	409a      	lsls	r2, r3
 8004284:	0013      	movs	r3, r2
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	08da      	lsrs	r2, r3, #3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3208      	adds	r2, #8
 8004294:	0092      	lsls	r2, r2, #2
 8004296:	6939      	ldr	r1, [r7, #16]
 8004298:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	2203      	movs	r2, #3
 80042a6:	409a      	lsls	r2, r3
 80042a8:	0013      	movs	r3, r2
 80042aa:	43da      	mvns	r2, r3
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4013      	ands	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2203      	movs	r2, #3
 80042b8:	401a      	ands	r2, r3
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	409a      	lsls	r2, r3
 80042c0:	0013      	movs	r3, r2
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	23c0      	movs	r3, #192	@ 0xc0
 80042d4:	029b      	lsls	r3, r3, #10
 80042d6:	4013      	ands	r3, r2
 80042d8:	d100      	bne.n	80042dc <HAL_GPIO_Init+0x174>
 80042da:	e094      	b.n	8004406 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042dc:	4b51      	ldr	r3, [pc, #324]	@ (8004424 <HAL_GPIO_Init+0x2bc>)
 80042de:	699a      	ldr	r2, [r3, #24]
 80042e0:	4b50      	ldr	r3, [pc, #320]	@ (8004424 <HAL_GPIO_Init+0x2bc>)
 80042e2:	2101      	movs	r1, #1
 80042e4:	430a      	orrs	r2, r1
 80042e6:	619a      	str	r2, [r3, #24]
 80042e8:	4b4e      	ldr	r3, [pc, #312]	@ (8004424 <HAL_GPIO_Init+0x2bc>)
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	2201      	movs	r2, #1
 80042ee:	4013      	ands	r3, r2
 80042f0:	60bb      	str	r3, [r7, #8]
 80042f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80042f4:	4a4c      	ldr	r2, [pc, #304]	@ (8004428 <HAL_GPIO_Init+0x2c0>)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	089b      	lsrs	r3, r3, #2
 80042fa:	3302      	adds	r3, #2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	589b      	ldr	r3, [r3, r2]
 8004300:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2203      	movs	r2, #3
 8004306:	4013      	ands	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	220f      	movs	r2, #15
 800430c:	409a      	lsls	r2, r3
 800430e:	0013      	movs	r3, r2
 8004310:	43da      	mvns	r2, r3
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	4013      	ands	r3, r2
 8004316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	2390      	movs	r3, #144	@ 0x90
 800431c:	05db      	lsls	r3, r3, #23
 800431e:	429a      	cmp	r2, r3
 8004320:	d00d      	beq.n	800433e <HAL_GPIO_Init+0x1d6>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a41      	ldr	r2, [pc, #260]	@ (800442c <HAL_GPIO_Init+0x2c4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d007      	beq.n	800433a <HAL_GPIO_Init+0x1d2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a40      	ldr	r2, [pc, #256]	@ (8004430 <HAL_GPIO_Init+0x2c8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d101      	bne.n	8004336 <HAL_GPIO_Init+0x1ce>
 8004332:	2302      	movs	r3, #2
 8004334:	e004      	b.n	8004340 <HAL_GPIO_Init+0x1d8>
 8004336:	2305      	movs	r3, #5
 8004338:	e002      	b.n	8004340 <HAL_GPIO_Init+0x1d8>
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <HAL_GPIO_Init+0x1d8>
 800433e:	2300      	movs	r3, #0
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	2103      	movs	r1, #3
 8004344:	400a      	ands	r2, r1
 8004346:	0092      	lsls	r2, r2, #2
 8004348:	4093      	lsls	r3, r2
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004350:	4935      	ldr	r1, [pc, #212]	@ (8004428 <HAL_GPIO_Init+0x2c0>)
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	089b      	lsrs	r3, r3, #2
 8004356:	3302      	adds	r3, #2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800435e:	4b35      	ldr	r3, [pc, #212]	@ (8004434 <HAL_GPIO_Init+0x2cc>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	43da      	mvns	r2, r3
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	4013      	ands	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	2380      	movs	r3, #128	@ 0x80
 8004374:	035b      	lsls	r3, r3, #13
 8004376:	4013      	ands	r3, r2
 8004378:	d003      	beq.n	8004382 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004382:	4b2c      	ldr	r3, [pc, #176]	@ (8004434 <HAL_GPIO_Init+0x2cc>)
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004388:	4b2a      	ldr	r3, [pc, #168]	@ (8004434 <HAL_GPIO_Init+0x2cc>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	43da      	mvns	r2, r3
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4013      	ands	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	2380      	movs	r3, #128	@ 0x80
 800439e:	039b      	lsls	r3, r3, #14
 80043a0:	4013      	ands	r3, r2
 80043a2:	d003      	beq.n	80043ac <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80043ac:	4b21      	ldr	r3, [pc, #132]	@ (8004434 <HAL_GPIO_Init+0x2cc>)
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80043b2:	4b20      	ldr	r3, [pc, #128]	@ (8004434 <HAL_GPIO_Init+0x2cc>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	43da      	mvns	r2, r3
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	4013      	ands	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	2380      	movs	r3, #128	@ 0x80
 80043c8:	029b      	lsls	r3, r3, #10
 80043ca:	4013      	ands	r3, r2
 80043cc:	d003      	beq.n	80043d6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80043d6:	4b17      	ldr	r3, [pc, #92]	@ (8004434 <HAL_GPIO_Init+0x2cc>)
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80043dc:	4b15      	ldr	r3, [pc, #84]	@ (8004434 <HAL_GPIO_Init+0x2cc>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	43da      	mvns	r2, r3
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	4013      	ands	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	2380      	movs	r3, #128	@ 0x80
 80043f2:	025b      	lsls	r3, r3, #9
 80043f4:	4013      	ands	r3, r2
 80043f6:	d003      	beq.n	8004400 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004400:	4b0c      	ldr	r3, [pc, #48]	@ (8004434 <HAL_GPIO_Init+0x2cc>)
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	3301      	adds	r3, #1
 800440a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	40da      	lsrs	r2, r3
 8004414:	1e13      	subs	r3, r2, #0
 8004416:	d000      	beq.n	800441a <HAL_GPIO_Init+0x2b2>
 8004418:	e6ae      	b.n	8004178 <HAL_GPIO_Init+0x10>
  } 
}
 800441a:	46c0      	nop			@ (mov r8, r8)
 800441c:	46c0      	nop			@ (mov r8, r8)
 800441e:	46bd      	mov	sp, r7
 8004420:	b006      	add	sp, #24
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40021000 	.word	0x40021000
 8004428:	40010000 	.word	0x40010000
 800442c:	48000400 	.word	0x48000400
 8004430:	48000800 	.word	0x48000800
 8004434:	40010400 	.word	0x40010400

08004438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	0008      	movs	r0, r1
 8004442:	0011      	movs	r1, r2
 8004444:	1cbb      	adds	r3, r7, #2
 8004446:	1c02      	adds	r2, r0, #0
 8004448:	801a      	strh	r2, [r3, #0]
 800444a:	1c7b      	adds	r3, r7, #1
 800444c:	1c0a      	adds	r2, r1, #0
 800444e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004450:	1c7b      	adds	r3, r7, #1
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d004      	beq.n	8004462 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004458:	1cbb      	adds	r3, r7, #2
 800445a:	881a      	ldrh	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004460:	e003      	b.n	800446a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004462:	1cbb      	adds	r3, r7, #2
 8004464:	881a      	ldrh	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800446a:	46c0      	nop			@ (mov r8, r8)
 800446c:	46bd      	mov	sp, r7
 800446e:	b002      	add	sp, #8
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d102      	bne.n	8004488 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	f000 fb76 	bl	8004b74 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2201      	movs	r2, #1
 800448e:	4013      	ands	r3, r2
 8004490:	d100      	bne.n	8004494 <HAL_RCC_OscConfig+0x20>
 8004492:	e08e      	b.n	80045b2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004494:	4bc5      	ldr	r3, [pc, #788]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	220c      	movs	r2, #12
 800449a:	4013      	ands	r3, r2
 800449c:	2b04      	cmp	r3, #4
 800449e:	d00e      	beq.n	80044be <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044a0:	4bc2      	ldr	r3, [pc, #776]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	220c      	movs	r2, #12
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d117      	bne.n	80044dc <HAL_RCC_OscConfig+0x68>
 80044ac:	4bbf      	ldr	r3, [pc, #764]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	23c0      	movs	r3, #192	@ 0xc0
 80044b2:	025b      	lsls	r3, r3, #9
 80044b4:	401a      	ands	r2, r3
 80044b6:	2380      	movs	r3, #128	@ 0x80
 80044b8:	025b      	lsls	r3, r3, #9
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d10e      	bne.n	80044dc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044be:	4bbb      	ldr	r3, [pc, #748]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	2380      	movs	r3, #128	@ 0x80
 80044c4:	029b      	lsls	r3, r3, #10
 80044c6:	4013      	ands	r3, r2
 80044c8:	d100      	bne.n	80044cc <HAL_RCC_OscConfig+0x58>
 80044ca:	e071      	b.n	80045b0 <HAL_RCC_OscConfig+0x13c>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d000      	beq.n	80044d6 <HAL_RCC_OscConfig+0x62>
 80044d4:	e06c      	b.n	80045b0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	f000 fb4c 	bl	8004b74 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d107      	bne.n	80044f4 <HAL_RCC_OscConfig+0x80>
 80044e4:	4bb1      	ldr	r3, [pc, #708]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	4bb0      	ldr	r3, [pc, #704]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 80044ea:	2180      	movs	r1, #128	@ 0x80
 80044ec:	0249      	lsls	r1, r1, #9
 80044ee:	430a      	orrs	r2, r1
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	e02f      	b.n	8004554 <HAL_RCC_OscConfig+0xe0>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10c      	bne.n	8004516 <HAL_RCC_OscConfig+0xa2>
 80044fc:	4bab      	ldr	r3, [pc, #684]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	4baa      	ldr	r3, [pc, #680]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 8004502:	49ab      	ldr	r1, [pc, #684]	@ (80047b0 <HAL_RCC_OscConfig+0x33c>)
 8004504:	400a      	ands	r2, r1
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	4ba8      	ldr	r3, [pc, #672]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	4ba7      	ldr	r3, [pc, #668]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 800450e:	49a9      	ldr	r1, [pc, #676]	@ (80047b4 <HAL_RCC_OscConfig+0x340>)
 8004510:	400a      	ands	r2, r1
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	e01e      	b.n	8004554 <HAL_RCC_OscConfig+0xe0>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b05      	cmp	r3, #5
 800451c:	d10e      	bne.n	800453c <HAL_RCC_OscConfig+0xc8>
 800451e:	4ba3      	ldr	r3, [pc, #652]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	4ba2      	ldr	r3, [pc, #648]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 8004524:	2180      	movs	r1, #128	@ 0x80
 8004526:	02c9      	lsls	r1, r1, #11
 8004528:	430a      	orrs	r2, r1
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	4b9f      	ldr	r3, [pc, #636]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	4b9e      	ldr	r3, [pc, #632]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 8004532:	2180      	movs	r1, #128	@ 0x80
 8004534:	0249      	lsls	r1, r1, #9
 8004536:	430a      	orrs	r2, r1
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	e00b      	b.n	8004554 <HAL_RCC_OscConfig+0xe0>
 800453c:	4b9b      	ldr	r3, [pc, #620]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	4b9a      	ldr	r3, [pc, #616]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 8004542:	499b      	ldr	r1, [pc, #620]	@ (80047b0 <HAL_RCC_OscConfig+0x33c>)
 8004544:	400a      	ands	r2, r1
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	4b98      	ldr	r3, [pc, #608]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4b97      	ldr	r3, [pc, #604]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 800454e:	4999      	ldr	r1, [pc, #612]	@ (80047b4 <HAL_RCC_OscConfig+0x340>)
 8004550:	400a      	ands	r2, r1
 8004552:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d014      	beq.n	8004586 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455c:	f7fe fd9a 	bl	8003094 <HAL_GetTick>
 8004560:	0003      	movs	r3, r0
 8004562:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004566:	f7fe fd95 	bl	8003094 <HAL_GetTick>
 800456a:	0002      	movs	r2, r0
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b64      	cmp	r3, #100	@ 0x64
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e2fd      	b.n	8004b74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004578:	4b8c      	ldr	r3, [pc, #560]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	2380      	movs	r3, #128	@ 0x80
 800457e:	029b      	lsls	r3, r3, #10
 8004580:	4013      	ands	r3, r2
 8004582:	d0f0      	beq.n	8004566 <HAL_RCC_OscConfig+0xf2>
 8004584:	e015      	b.n	80045b2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004586:	f7fe fd85 	bl	8003094 <HAL_GetTick>
 800458a:	0003      	movs	r3, r0
 800458c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004590:	f7fe fd80 	bl	8003094 <HAL_GetTick>
 8004594:	0002      	movs	r2, r0
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b64      	cmp	r3, #100	@ 0x64
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e2e8      	b.n	8004b74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a2:	4b82      	ldr	r3, [pc, #520]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	2380      	movs	r3, #128	@ 0x80
 80045a8:	029b      	lsls	r3, r3, #10
 80045aa:	4013      	ands	r3, r2
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0x11c>
 80045ae:	e000      	b.n	80045b2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2202      	movs	r2, #2
 80045b8:	4013      	ands	r3, r2
 80045ba:	d100      	bne.n	80045be <HAL_RCC_OscConfig+0x14a>
 80045bc:	e06c      	b.n	8004698 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80045be:	4b7b      	ldr	r3, [pc, #492]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	220c      	movs	r2, #12
 80045c4:	4013      	ands	r3, r2
 80045c6:	d00e      	beq.n	80045e6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80045c8:	4b78      	ldr	r3, [pc, #480]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	220c      	movs	r2, #12
 80045ce:	4013      	ands	r3, r2
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d11f      	bne.n	8004614 <HAL_RCC_OscConfig+0x1a0>
 80045d4:	4b75      	ldr	r3, [pc, #468]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	23c0      	movs	r3, #192	@ 0xc0
 80045da:	025b      	lsls	r3, r3, #9
 80045dc:	401a      	ands	r2, r3
 80045de:	2380      	movs	r3, #128	@ 0x80
 80045e0:	021b      	lsls	r3, r3, #8
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d116      	bne.n	8004614 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045e6:	4b71      	ldr	r3, [pc, #452]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2202      	movs	r2, #2
 80045ec:	4013      	ands	r3, r2
 80045ee:	d005      	beq.n	80045fc <HAL_RCC_OscConfig+0x188>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e2bb      	b.n	8004b74 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fc:	4b6b      	ldr	r3, [pc, #428]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	22f8      	movs	r2, #248	@ 0xf8
 8004602:	4393      	bics	r3, r2
 8004604:	0019      	movs	r1, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	00da      	lsls	r2, r3, #3
 800460c:	4b67      	ldr	r3, [pc, #412]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 800460e:	430a      	orrs	r2, r1
 8004610:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004612:	e041      	b.n	8004698 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d024      	beq.n	8004666 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800461c:	4b63      	ldr	r3, [pc, #396]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	4b62      	ldr	r3, [pc, #392]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 8004622:	2101      	movs	r1, #1
 8004624:	430a      	orrs	r2, r1
 8004626:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004628:	f7fe fd34 	bl	8003094 <HAL_GetTick>
 800462c:	0003      	movs	r3, r0
 800462e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004632:	f7fe fd2f 	bl	8003094 <HAL_GetTick>
 8004636:	0002      	movs	r2, r0
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e297      	b.n	8004b74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004644:	4b59      	ldr	r3, [pc, #356]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2202      	movs	r2, #2
 800464a:	4013      	ands	r3, r2
 800464c:	d0f1      	beq.n	8004632 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464e:	4b57      	ldr	r3, [pc, #348]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	22f8      	movs	r2, #248	@ 0xf8
 8004654:	4393      	bics	r3, r2
 8004656:	0019      	movs	r1, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	00da      	lsls	r2, r3, #3
 800465e:	4b53      	ldr	r3, [pc, #332]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 8004660:	430a      	orrs	r2, r1
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	e018      	b.n	8004698 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004666:	4b51      	ldr	r3, [pc, #324]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	4b50      	ldr	r3, [pc, #320]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 800466c:	2101      	movs	r1, #1
 800466e:	438a      	bics	r2, r1
 8004670:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004672:	f7fe fd0f 	bl	8003094 <HAL_GetTick>
 8004676:	0003      	movs	r3, r0
 8004678:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800467c:	f7fe fd0a 	bl	8003094 <HAL_GetTick>
 8004680:	0002      	movs	r2, r0
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e272      	b.n	8004b74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800468e:	4b47      	ldr	r3, [pc, #284]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2202      	movs	r2, #2
 8004694:	4013      	ands	r3, r2
 8004696:	d1f1      	bne.n	800467c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2208      	movs	r2, #8
 800469e:	4013      	ands	r3, r2
 80046a0:	d036      	beq.n	8004710 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d019      	beq.n	80046de <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046aa:	4b40      	ldr	r3, [pc, #256]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 80046ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046ae:	4b3f      	ldr	r3, [pc, #252]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 80046b0:	2101      	movs	r1, #1
 80046b2:	430a      	orrs	r2, r1
 80046b4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b6:	f7fe fced 	bl	8003094 <HAL_GetTick>
 80046ba:	0003      	movs	r3, r0
 80046bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046c0:	f7fe fce8 	bl	8003094 <HAL_GetTick>
 80046c4:	0002      	movs	r2, r0
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e250      	b.n	8004b74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d2:	4b36      	ldr	r3, [pc, #216]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 80046d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d6:	2202      	movs	r2, #2
 80046d8:	4013      	ands	r3, r2
 80046da:	d0f1      	beq.n	80046c0 <HAL_RCC_OscConfig+0x24c>
 80046dc:	e018      	b.n	8004710 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046de:	4b33      	ldr	r3, [pc, #204]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 80046e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046e2:	4b32      	ldr	r3, [pc, #200]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 80046e4:	2101      	movs	r1, #1
 80046e6:	438a      	bics	r2, r1
 80046e8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ea:	f7fe fcd3 	bl	8003094 <HAL_GetTick>
 80046ee:	0003      	movs	r3, r0
 80046f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046f4:	f7fe fcce 	bl	8003094 <HAL_GetTick>
 80046f8:	0002      	movs	r2, r0
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e236      	b.n	8004b74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004706:	4b29      	ldr	r3, [pc, #164]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 8004708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470a:	2202      	movs	r2, #2
 800470c:	4013      	ands	r3, r2
 800470e:	d1f1      	bne.n	80046f4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2204      	movs	r2, #4
 8004716:	4013      	ands	r3, r2
 8004718:	d100      	bne.n	800471c <HAL_RCC_OscConfig+0x2a8>
 800471a:	e0b5      	b.n	8004888 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800471c:	201f      	movs	r0, #31
 800471e:	183b      	adds	r3, r7, r0
 8004720:	2200      	movs	r2, #0
 8004722:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004724:	4b21      	ldr	r3, [pc, #132]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 8004726:	69da      	ldr	r2, [r3, #28]
 8004728:	2380      	movs	r3, #128	@ 0x80
 800472a:	055b      	lsls	r3, r3, #21
 800472c:	4013      	ands	r3, r2
 800472e:	d110      	bne.n	8004752 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004730:	4b1e      	ldr	r3, [pc, #120]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 8004732:	69da      	ldr	r2, [r3, #28]
 8004734:	4b1d      	ldr	r3, [pc, #116]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 8004736:	2180      	movs	r1, #128	@ 0x80
 8004738:	0549      	lsls	r1, r1, #21
 800473a:	430a      	orrs	r2, r1
 800473c:	61da      	str	r2, [r3, #28]
 800473e:	4b1b      	ldr	r3, [pc, #108]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 8004740:	69da      	ldr	r2, [r3, #28]
 8004742:	2380      	movs	r3, #128	@ 0x80
 8004744:	055b      	lsls	r3, r3, #21
 8004746:	4013      	ands	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800474c:	183b      	adds	r3, r7, r0
 800474e:	2201      	movs	r2, #1
 8004750:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004752:	4b19      	ldr	r3, [pc, #100]	@ (80047b8 <HAL_RCC_OscConfig+0x344>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	2380      	movs	r3, #128	@ 0x80
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	4013      	ands	r3, r2
 800475c:	d11a      	bne.n	8004794 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800475e:	4b16      	ldr	r3, [pc, #88]	@ (80047b8 <HAL_RCC_OscConfig+0x344>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	4b15      	ldr	r3, [pc, #84]	@ (80047b8 <HAL_RCC_OscConfig+0x344>)
 8004764:	2180      	movs	r1, #128	@ 0x80
 8004766:	0049      	lsls	r1, r1, #1
 8004768:	430a      	orrs	r2, r1
 800476a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800476c:	f7fe fc92 	bl	8003094 <HAL_GetTick>
 8004770:	0003      	movs	r3, r0
 8004772:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004776:	f7fe fc8d 	bl	8003094 <HAL_GetTick>
 800477a:	0002      	movs	r2, r0
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b64      	cmp	r3, #100	@ 0x64
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e1f5      	b.n	8004b74 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004788:	4b0b      	ldr	r3, [pc, #44]	@ (80047b8 <HAL_RCC_OscConfig+0x344>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	2380      	movs	r3, #128	@ 0x80
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	4013      	ands	r3, r2
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d10f      	bne.n	80047bc <HAL_RCC_OscConfig+0x348>
 800479c:	4b03      	ldr	r3, [pc, #12]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 800479e:	6a1a      	ldr	r2, [r3, #32]
 80047a0:	4b02      	ldr	r3, [pc, #8]	@ (80047ac <HAL_RCC_OscConfig+0x338>)
 80047a2:	2101      	movs	r1, #1
 80047a4:	430a      	orrs	r2, r1
 80047a6:	621a      	str	r2, [r3, #32]
 80047a8:	e036      	b.n	8004818 <HAL_RCC_OscConfig+0x3a4>
 80047aa:	46c0      	nop			@ (mov r8, r8)
 80047ac:	40021000 	.word	0x40021000
 80047b0:	fffeffff 	.word	0xfffeffff
 80047b4:	fffbffff 	.word	0xfffbffff
 80047b8:	40007000 	.word	0x40007000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10c      	bne.n	80047de <HAL_RCC_OscConfig+0x36a>
 80047c4:	4bca      	ldr	r3, [pc, #808]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 80047c6:	6a1a      	ldr	r2, [r3, #32]
 80047c8:	4bc9      	ldr	r3, [pc, #804]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 80047ca:	2101      	movs	r1, #1
 80047cc:	438a      	bics	r2, r1
 80047ce:	621a      	str	r2, [r3, #32]
 80047d0:	4bc7      	ldr	r3, [pc, #796]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 80047d2:	6a1a      	ldr	r2, [r3, #32]
 80047d4:	4bc6      	ldr	r3, [pc, #792]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 80047d6:	2104      	movs	r1, #4
 80047d8:	438a      	bics	r2, r1
 80047da:	621a      	str	r2, [r3, #32]
 80047dc:	e01c      	b.n	8004818 <HAL_RCC_OscConfig+0x3a4>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	2b05      	cmp	r3, #5
 80047e4:	d10c      	bne.n	8004800 <HAL_RCC_OscConfig+0x38c>
 80047e6:	4bc2      	ldr	r3, [pc, #776]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 80047e8:	6a1a      	ldr	r2, [r3, #32]
 80047ea:	4bc1      	ldr	r3, [pc, #772]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 80047ec:	2104      	movs	r1, #4
 80047ee:	430a      	orrs	r2, r1
 80047f0:	621a      	str	r2, [r3, #32]
 80047f2:	4bbf      	ldr	r3, [pc, #764]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 80047f4:	6a1a      	ldr	r2, [r3, #32]
 80047f6:	4bbe      	ldr	r3, [pc, #760]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 80047f8:	2101      	movs	r1, #1
 80047fa:	430a      	orrs	r2, r1
 80047fc:	621a      	str	r2, [r3, #32]
 80047fe:	e00b      	b.n	8004818 <HAL_RCC_OscConfig+0x3a4>
 8004800:	4bbb      	ldr	r3, [pc, #748]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004802:	6a1a      	ldr	r2, [r3, #32]
 8004804:	4bba      	ldr	r3, [pc, #744]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004806:	2101      	movs	r1, #1
 8004808:	438a      	bics	r2, r1
 800480a:	621a      	str	r2, [r3, #32]
 800480c:	4bb8      	ldr	r3, [pc, #736]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 800480e:	6a1a      	ldr	r2, [r3, #32]
 8004810:	4bb7      	ldr	r3, [pc, #732]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004812:	2104      	movs	r1, #4
 8004814:	438a      	bics	r2, r1
 8004816:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d014      	beq.n	800484a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004820:	f7fe fc38 	bl	8003094 <HAL_GetTick>
 8004824:	0003      	movs	r3, r0
 8004826:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004828:	e009      	b.n	800483e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800482a:	f7fe fc33 	bl	8003094 <HAL_GetTick>
 800482e:	0002      	movs	r2, r0
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	4aaf      	ldr	r2, [pc, #700]	@ (8004af4 <HAL_RCC_OscConfig+0x680>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e19a      	b.n	8004b74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483e:	4bac      	ldr	r3, [pc, #688]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	2202      	movs	r2, #2
 8004844:	4013      	ands	r3, r2
 8004846:	d0f0      	beq.n	800482a <HAL_RCC_OscConfig+0x3b6>
 8004848:	e013      	b.n	8004872 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800484a:	f7fe fc23 	bl	8003094 <HAL_GetTick>
 800484e:	0003      	movs	r3, r0
 8004850:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004852:	e009      	b.n	8004868 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004854:	f7fe fc1e 	bl	8003094 <HAL_GetTick>
 8004858:	0002      	movs	r2, r0
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	4aa5      	ldr	r2, [pc, #660]	@ (8004af4 <HAL_RCC_OscConfig+0x680>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e185      	b.n	8004b74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004868:	4ba1      	ldr	r3, [pc, #644]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	2202      	movs	r2, #2
 800486e:	4013      	ands	r3, r2
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004872:	231f      	movs	r3, #31
 8004874:	18fb      	adds	r3, r7, r3
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d105      	bne.n	8004888 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800487c:	4b9c      	ldr	r3, [pc, #624]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 800487e:	69da      	ldr	r2, [r3, #28]
 8004880:	4b9b      	ldr	r3, [pc, #620]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004882:	499d      	ldr	r1, [pc, #628]	@ (8004af8 <HAL_RCC_OscConfig+0x684>)
 8004884:	400a      	ands	r2, r1
 8004886:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2210      	movs	r2, #16
 800488e:	4013      	ands	r3, r2
 8004890:	d063      	beq.n	800495a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d12a      	bne.n	80048f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800489a:	4b95      	ldr	r3, [pc, #596]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 800489c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800489e:	4b94      	ldr	r3, [pc, #592]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 80048a0:	2104      	movs	r1, #4
 80048a2:	430a      	orrs	r2, r1
 80048a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80048a6:	4b92      	ldr	r3, [pc, #584]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 80048a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048aa:	4b91      	ldr	r3, [pc, #580]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 80048ac:	2101      	movs	r1, #1
 80048ae:	430a      	orrs	r2, r1
 80048b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048b2:	f7fe fbef 	bl	8003094 <HAL_GetTick>
 80048b6:	0003      	movs	r3, r0
 80048b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80048bc:	f7fe fbea 	bl	8003094 <HAL_GetTick>
 80048c0:	0002      	movs	r2, r0
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e152      	b.n	8004b74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80048ce:	4b88      	ldr	r3, [pc, #544]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 80048d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048d2:	2202      	movs	r2, #2
 80048d4:	4013      	ands	r3, r2
 80048d6:	d0f1      	beq.n	80048bc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80048d8:	4b85      	ldr	r3, [pc, #532]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 80048da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048dc:	22f8      	movs	r2, #248	@ 0xf8
 80048de:	4393      	bics	r3, r2
 80048e0:	0019      	movs	r1, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	00da      	lsls	r2, r3, #3
 80048e8:	4b81      	ldr	r3, [pc, #516]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 80048ea:	430a      	orrs	r2, r1
 80048ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80048ee:	e034      	b.n	800495a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	3305      	adds	r3, #5
 80048f6:	d111      	bne.n	800491c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80048f8:	4b7d      	ldr	r3, [pc, #500]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 80048fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048fc:	4b7c      	ldr	r3, [pc, #496]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 80048fe:	2104      	movs	r1, #4
 8004900:	438a      	bics	r2, r1
 8004902:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004904:	4b7a      	ldr	r3, [pc, #488]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004908:	22f8      	movs	r2, #248	@ 0xf8
 800490a:	4393      	bics	r3, r2
 800490c:	0019      	movs	r1, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	00da      	lsls	r2, r3, #3
 8004914:	4b76      	ldr	r3, [pc, #472]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004916:	430a      	orrs	r2, r1
 8004918:	635a      	str	r2, [r3, #52]	@ 0x34
 800491a:	e01e      	b.n	800495a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800491c:	4b74      	ldr	r3, [pc, #464]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 800491e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004920:	4b73      	ldr	r3, [pc, #460]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004922:	2104      	movs	r1, #4
 8004924:	430a      	orrs	r2, r1
 8004926:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004928:	4b71      	ldr	r3, [pc, #452]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 800492a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800492c:	4b70      	ldr	r3, [pc, #448]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 800492e:	2101      	movs	r1, #1
 8004930:	438a      	bics	r2, r1
 8004932:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004934:	f7fe fbae 	bl	8003094 <HAL_GetTick>
 8004938:	0003      	movs	r3, r0
 800493a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800493e:	f7fe fba9 	bl	8003094 <HAL_GetTick>
 8004942:	0002      	movs	r2, r0
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e111      	b.n	8004b74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004950:	4b67      	ldr	r3, [pc, #412]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004954:	2202      	movs	r2, #2
 8004956:	4013      	ands	r3, r2
 8004958:	d1f1      	bne.n	800493e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2220      	movs	r2, #32
 8004960:	4013      	ands	r3, r2
 8004962:	d05c      	beq.n	8004a1e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004964:	4b62      	ldr	r3, [pc, #392]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	220c      	movs	r2, #12
 800496a:	4013      	ands	r3, r2
 800496c:	2b0c      	cmp	r3, #12
 800496e:	d00e      	beq.n	800498e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004970:	4b5f      	ldr	r3, [pc, #380]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	220c      	movs	r2, #12
 8004976:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004978:	2b08      	cmp	r3, #8
 800497a:	d114      	bne.n	80049a6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800497c:	4b5c      	ldr	r3, [pc, #368]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	23c0      	movs	r3, #192	@ 0xc0
 8004982:	025b      	lsls	r3, r3, #9
 8004984:	401a      	ands	r2, r3
 8004986:	23c0      	movs	r3, #192	@ 0xc0
 8004988:	025b      	lsls	r3, r3, #9
 800498a:	429a      	cmp	r2, r3
 800498c:	d10b      	bne.n	80049a6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800498e:	4b58      	ldr	r3, [pc, #352]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004990:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004992:	2380      	movs	r3, #128	@ 0x80
 8004994:	029b      	lsls	r3, r3, #10
 8004996:	4013      	ands	r3, r2
 8004998:	d040      	beq.n	8004a1c <HAL_RCC_OscConfig+0x5a8>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d03c      	beq.n	8004a1c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e0e6      	b.n	8004b74 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d01b      	beq.n	80049e6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80049ae:	4b50      	ldr	r3, [pc, #320]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 80049b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049b2:	4b4f      	ldr	r3, [pc, #316]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 80049b4:	2180      	movs	r1, #128	@ 0x80
 80049b6:	0249      	lsls	r1, r1, #9
 80049b8:	430a      	orrs	r2, r1
 80049ba:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049bc:	f7fe fb6a 	bl	8003094 <HAL_GetTick>
 80049c0:	0003      	movs	r3, r0
 80049c2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80049c4:	e008      	b.n	80049d8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049c6:	f7fe fb65 	bl	8003094 <HAL_GetTick>
 80049ca:	0002      	movs	r2, r0
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e0cd      	b.n	8004b74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80049d8:	4b45      	ldr	r3, [pc, #276]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 80049da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049dc:	2380      	movs	r3, #128	@ 0x80
 80049de:	029b      	lsls	r3, r3, #10
 80049e0:	4013      	ands	r3, r2
 80049e2:	d0f0      	beq.n	80049c6 <HAL_RCC_OscConfig+0x552>
 80049e4:	e01b      	b.n	8004a1e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80049e6:	4b42      	ldr	r3, [pc, #264]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 80049e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049ea:	4b41      	ldr	r3, [pc, #260]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 80049ec:	4943      	ldr	r1, [pc, #268]	@ (8004afc <HAL_RCC_OscConfig+0x688>)
 80049ee:	400a      	ands	r2, r1
 80049f0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f2:	f7fe fb4f 	bl	8003094 <HAL_GetTick>
 80049f6:	0003      	movs	r3, r0
 80049f8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049fc:	f7fe fb4a 	bl	8003094 <HAL_GetTick>
 8004a00:	0002      	movs	r2, r0
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e0b2      	b.n	8004b74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004a0e:	4b38      	ldr	r3, [pc, #224]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004a10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a12:	2380      	movs	r3, #128	@ 0x80
 8004a14:	029b      	lsls	r3, r3, #10
 8004a16:	4013      	ands	r3, r2
 8004a18:	d1f0      	bne.n	80049fc <HAL_RCC_OscConfig+0x588>
 8004a1a:	e000      	b.n	8004a1e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004a1c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d100      	bne.n	8004a28 <HAL_RCC_OscConfig+0x5b4>
 8004a26:	e0a4      	b.n	8004b72 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a28:	4b31      	ldr	r3, [pc, #196]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	220c      	movs	r2, #12
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d100      	bne.n	8004a36 <HAL_RCC_OscConfig+0x5c2>
 8004a34:	e078      	b.n	8004b28 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d14c      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a3e:	4b2c      	ldr	r3, [pc, #176]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	4b2b      	ldr	r3, [pc, #172]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004a44:	492e      	ldr	r1, [pc, #184]	@ (8004b00 <HAL_RCC_OscConfig+0x68c>)
 8004a46:	400a      	ands	r2, r1
 8004a48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4a:	f7fe fb23 	bl	8003094 <HAL_GetTick>
 8004a4e:	0003      	movs	r3, r0
 8004a50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a54:	f7fe fb1e 	bl	8003094 <HAL_GetTick>
 8004a58:	0002      	movs	r2, r0
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e086      	b.n	8004b74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a66:	4b22      	ldr	r3, [pc, #136]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	2380      	movs	r3, #128	@ 0x80
 8004a6c:	049b      	lsls	r3, r3, #18
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d1f0      	bne.n	8004a54 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a72:	4b1f      	ldr	r3, [pc, #124]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a76:	220f      	movs	r2, #15
 8004a78:	4393      	bics	r3, r2
 8004a7a:	0019      	movs	r1, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a80:	4b1b      	ldr	r3, [pc, #108]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004a82:	430a      	orrs	r2, r1
 8004a84:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004a86:	4b1a      	ldr	r3, [pc, #104]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004b04 <HAL_RCC_OscConfig+0x690>)
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	0019      	movs	r1, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	4b15      	ldr	r3, [pc, #84]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aa0:	4b13      	ldr	r3, [pc, #76]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	4b12      	ldr	r3, [pc, #72]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004aa6:	2180      	movs	r1, #128	@ 0x80
 8004aa8:	0449      	lsls	r1, r1, #17
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aae:	f7fe faf1 	bl	8003094 <HAL_GetTick>
 8004ab2:	0003      	movs	r3, r0
 8004ab4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab8:	f7fe faec 	bl	8003094 <HAL_GetTick>
 8004abc:	0002      	movs	r2, r0
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e054      	b.n	8004b74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004aca:	4b09      	ldr	r3, [pc, #36]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	2380      	movs	r3, #128	@ 0x80
 8004ad0:	049b      	lsls	r3, r3, #18
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	d0f0      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x644>
 8004ad6:	e04c      	b.n	8004b72 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad8:	4b05      	ldr	r3, [pc, #20]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	4b04      	ldr	r3, [pc, #16]	@ (8004af0 <HAL_RCC_OscConfig+0x67c>)
 8004ade:	4908      	ldr	r1, [pc, #32]	@ (8004b00 <HAL_RCC_OscConfig+0x68c>)
 8004ae0:	400a      	ands	r2, r1
 8004ae2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae4:	f7fe fad6 	bl	8003094 <HAL_GetTick>
 8004ae8:	0003      	movs	r3, r0
 8004aea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aec:	e015      	b.n	8004b1a <HAL_RCC_OscConfig+0x6a6>
 8004aee:	46c0      	nop			@ (mov r8, r8)
 8004af0:	40021000 	.word	0x40021000
 8004af4:	00001388 	.word	0x00001388
 8004af8:	efffffff 	.word	0xefffffff
 8004afc:	fffeffff 	.word	0xfffeffff
 8004b00:	feffffff 	.word	0xfeffffff
 8004b04:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b08:	f7fe fac4 	bl	8003094 <HAL_GetTick>
 8004b0c:	0002      	movs	r2, r0
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e02c      	b.n	8004b74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b1a:	4b18      	ldr	r3, [pc, #96]	@ (8004b7c <HAL_RCC_OscConfig+0x708>)
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	2380      	movs	r3, #128	@ 0x80
 8004b20:	049b      	lsls	r3, r3, #18
 8004b22:	4013      	ands	r3, r2
 8004b24:	d1f0      	bne.n	8004b08 <HAL_RCC_OscConfig+0x694>
 8004b26:	e024      	b.n	8004b72 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e01f      	b.n	8004b74 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004b34:	4b11      	ldr	r3, [pc, #68]	@ (8004b7c <HAL_RCC_OscConfig+0x708>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004b3a:	4b10      	ldr	r3, [pc, #64]	@ (8004b7c <HAL_RCC_OscConfig+0x708>)
 8004b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	23c0      	movs	r3, #192	@ 0xc0
 8004b44:	025b      	lsls	r3, r3, #9
 8004b46:	401a      	ands	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d10e      	bne.n	8004b6e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	220f      	movs	r2, #15
 8004b54:	401a      	ands	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d107      	bne.n	8004b6e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	23f0      	movs	r3, #240	@ 0xf0
 8004b62:	039b      	lsls	r3, r3, #14
 8004b64:	401a      	ands	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d001      	beq.n	8004b72 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	0018      	movs	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	b008      	add	sp, #32
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40021000 	.word	0x40021000

08004b80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e0bf      	b.n	8004d14 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b94:	4b61      	ldr	r3, [pc, #388]	@ (8004d1c <HAL_RCC_ClockConfig+0x19c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d911      	bls.n	8004bc6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba2:	4b5e      	ldr	r3, [pc, #376]	@ (8004d1c <HAL_RCC_ClockConfig+0x19c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	4393      	bics	r3, r2
 8004baa:	0019      	movs	r1, r3
 8004bac:	4b5b      	ldr	r3, [pc, #364]	@ (8004d1c <HAL_RCC_ClockConfig+0x19c>)
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb4:	4b59      	ldr	r3, [pc, #356]	@ (8004d1c <HAL_RCC_ClockConfig+0x19c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	4013      	ands	r3, r2
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d001      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e0a6      	b.n	8004d14 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	4013      	ands	r3, r2
 8004bce:	d015      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2204      	movs	r2, #4
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	d006      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004bda:	4b51      	ldr	r3, [pc, #324]	@ (8004d20 <HAL_RCC_ClockConfig+0x1a0>)
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	4b50      	ldr	r3, [pc, #320]	@ (8004d20 <HAL_RCC_ClockConfig+0x1a0>)
 8004be0:	21e0      	movs	r1, #224	@ 0xe0
 8004be2:	00c9      	lsls	r1, r1, #3
 8004be4:	430a      	orrs	r2, r1
 8004be6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004be8:	4b4d      	ldr	r3, [pc, #308]	@ (8004d20 <HAL_RCC_ClockConfig+0x1a0>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	22f0      	movs	r2, #240	@ 0xf0
 8004bee:	4393      	bics	r3, r2
 8004bf0:	0019      	movs	r1, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8004d20 <HAL_RCC_ClockConfig+0x1a0>)
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2201      	movs	r2, #1
 8004c02:	4013      	ands	r3, r2
 8004c04:	d04c      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d107      	bne.n	8004c1e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c0e:	4b44      	ldr	r3, [pc, #272]	@ (8004d20 <HAL_RCC_ClockConfig+0x1a0>)
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	2380      	movs	r3, #128	@ 0x80
 8004c14:	029b      	lsls	r3, r3, #10
 8004c16:	4013      	ands	r3, r2
 8004c18:	d120      	bne.n	8004c5c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e07a      	b.n	8004d14 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d107      	bne.n	8004c36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c26:	4b3e      	ldr	r3, [pc, #248]	@ (8004d20 <HAL_RCC_ClockConfig+0x1a0>)
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	2380      	movs	r3, #128	@ 0x80
 8004c2c:	049b      	lsls	r3, r3, #18
 8004c2e:	4013      	ands	r3, r2
 8004c30:	d114      	bne.n	8004c5c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e06e      	b.n	8004d14 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d107      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004c3e:	4b38      	ldr	r3, [pc, #224]	@ (8004d20 <HAL_RCC_ClockConfig+0x1a0>)
 8004c40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c42:	2380      	movs	r3, #128	@ 0x80
 8004c44:	029b      	lsls	r3, r3, #10
 8004c46:	4013      	ands	r3, r2
 8004c48:	d108      	bne.n	8004c5c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e062      	b.n	8004d14 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4e:	4b34      	ldr	r3, [pc, #208]	@ (8004d20 <HAL_RCC_ClockConfig+0x1a0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2202      	movs	r2, #2
 8004c54:	4013      	ands	r3, r2
 8004c56:	d101      	bne.n	8004c5c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e05b      	b.n	8004d14 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c5c:	4b30      	ldr	r3, [pc, #192]	@ (8004d20 <HAL_RCC_ClockConfig+0x1a0>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2203      	movs	r2, #3
 8004c62:	4393      	bics	r3, r2
 8004c64:	0019      	movs	r1, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8004d20 <HAL_RCC_ClockConfig+0x1a0>)
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c70:	f7fe fa10 	bl	8003094 <HAL_GetTick>
 8004c74:	0003      	movs	r3, r0
 8004c76:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c78:	e009      	b.n	8004c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c7a:	f7fe fa0b 	bl	8003094 <HAL_GetTick>
 8004c7e:	0002      	movs	r2, r0
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	4a27      	ldr	r2, [pc, #156]	@ (8004d24 <HAL_RCC_ClockConfig+0x1a4>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e042      	b.n	8004d14 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8e:	4b24      	ldr	r3, [pc, #144]	@ (8004d20 <HAL_RCC_ClockConfig+0x1a0>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	220c      	movs	r2, #12
 8004c94:	401a      	ands	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d1ec      	bne.n	8004c7a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8004d1c <HAL_RCC_ClockConfig+0x19c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d211      	bcs.n	8004cd2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cae:	4b1b      	ldr	r3, [pc, #108]	@ (8004d1c <HAL_RCC_ClockConfig+0x19c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	4393      	bics	r3, r2
 8004cb6:	0019      	movs	r1, r3
 8004cb8:	4b18      	ldr	r3, [pc, #96]	@ (8004d1c <HAL_RCC_ClockConfig+0x19c>)
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc0:	4b16      	ldr	r3, [pc, #88]	@ (8004d1c <HAL_RCC_ClockConfig+0x19c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d001      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e020      	b.n	8004d14 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2204      	movs	r2, #4
 8004cd8:	4013      	ands	r3, r2
 8004cda:	d009      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004cdc:	4b10      	ldr	r3, [pc, #64]	@ (8004d20 <HAL_RCC_ClockConfig+0x1a0>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	4a11      	ldr	r2, [pc, #68]	@ (8004d28 <HAL_RCC_ClockConfig+0x1a8>)
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	0019      	movs	r1, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	4b0d      	ldr	r3, [pc, #52]	@ (8004d20 <HAL_RCC_ClockConfig+0x1a0>)
 8004cec:	430a      	orrs	r2, r1
 8004cee:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004cf0:	f000 f820 	bl	8004d34 <HAL_RCC_GetSysClockFreq>
 8004cf4:	0001      	movs	r1, r0
 8004cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8004d20 <HAL_RCC_ClockConfig+0x1a0>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	091b      	lsrs	r3, r3, #4
 8004cfc:	220f      	movs	r2, #15
 8004cfe:	4013      	ands	r3, r2
 8004d00:	4a0a      	ldr	r2, [pc, #40]	@ (8004d2c <HAL_RCC_ClockConfig+0x1ac>)
 8004d02:	5cd3      	ldrb	r3, [r2, r3]
 8004d04:	000a      	movs	r2, r1
 8004d06:	40da      	lsrs	r2, r3
 8004d08:	4b09      	ldr	r3, [pc, #36]	@ (8004d30 <HAL_RCC_ClockConfig+0x1b0>)
 8004d0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	f7fe f97b 	bl	8003008 <HAL_InitTick>
  
  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	0018      	movs	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	b004      	add	sp, #16
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40022000 	.word	0x40022000
 8004d20:	40021000 	.word	0x40021000
 8004d24:	00001388 	.word	0x00001388
 8004d28:	fffff8ff 	.word	0xfffff8ff
 8004d2c:	0800653c 	.word	0x0800653c
 8004d30:	20000000 	.word	0x20000000

08004d34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	2300      	movs	r3, #0
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	2300      	movs	r3, #0
 8004d48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004d4e:	4b2d      	ldr	r3, [pc, #180]	@ (8004e04 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	220c      	movs	r2, #12
 8004d58:	4013      	ands	r3, r2
 8004d5a:	2b0c      	cmp	r3, #12
 8004d5c:	d046      	beq.n	8004dec <HAL_RCC_GetSysClockFreq+0xb8>
 8004d5e:	d848      	bhi.n	8004df2 <HAL_RCC_GetSysClockFreq+0xbe>
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d002      	beq.n	8004d6a <HAL_RCC_GetSysClockFreq+0x36>
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d003      	beq.n	8004d70 <HAL_RCC_GetSysClockFreq+0x3c>
 8004d68:	e043      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d6a:	4b27      	ldr	r3, [pc, #156]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004d6c:	613b      	str	r3, [r7, #16]
      break;
 8004d6e:	e043      	b.n	8004df8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	0c9b      	lsrs	r3, r3, #18
 8004d74:	220f      	movs	r2, #15
 8004d76:	4013      	ands	r3, r2
 8004d78:	4a24      	ldr	r2, [pc, #144]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0xd8>)
 8004d7a:	5cd3      	ldrb	r3, [r2, r3]
 8004d7c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004d7e:	4b21      	ldr	r3, [pc, #132]	@ (8004e04 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d82:	220f      	movs	r2, #15
 8004d84:	4013      	ands	r3, r2
 8004d86:	4a22      	ldr	r2, [pc, #136]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0xdc>)
 8004d88:	5cd3      	ldrb	r3, [r2, r3]
 8004d8a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	23c0      	movs	r3, #192	@ 0xc0
 8004d90:	025b      	lsls	r3, r3, #9
 8004d92:	401a      	ands	r2, r3
 8004d94:	2380      	movs	r3, #128	@ 0x80
 8004d96:	025b      	lsls	r3, r3, #9
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d109      	bne.n	8004db0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d9c:	68b9      	ldr	r1, [r7, #8]
 8004d9e:	481a      	ldr	r0, [pc, #104]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004da0:	f7fb f9c4 	bl	800012c <__udivsi3>
 8004da4:	0003      	movs	r3, r0
 8004da6:	001a      	movs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4353      	muls	r3, r2
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	e01a      	b.n	8004de6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	23c0      	movs	r3, #192	@ 0xc0
 8004db4:	025b      	lsls	r3, r3, #9
 8004db6:	401a      	ands	r2, r3
 8004db8:	23c0      	movs	r3, #192	@ 0xc0
 8004dba:	025b      	lsls	r3, r3, #9
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d109      	bne.n	8004dd4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004dc0:	68b9      	ldr	r1, [r7, #8]
 8004dc2:	4814      	ldr	r0, [pc, #80]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004dc4:	f7fb f9b2 	bl	800012c <__udivsi3>
 8004dc8:	0003      	movs	r3, r0
 8004dca:	001a      	movs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4353      	muls	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004dd4:	68b9      	ldr	r1, [r7, #8]
 8004dd6:	480c      	ldr	r0, [pc, #48]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004dd8:	f7fb f9a8 	bl	800012c <__udivsi3>
 8004ddc:	0003      	movs	r3, r0
 8004dde:	001a      	movs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4353      	muls	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	613b      	str	r3, [r7, #16]
      break;
 8004dea:	e005      	b.n	8004df8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004dec:	4b09      	ldr	r3, [pc, #36]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004dee:	613b      	str	r3, [r7, #16]
      break;
 8004df0:	e002      	b.n	8004df8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004df2:	4b05      	ldr	r3, [pc, #20]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004df4:	613b      	str	r3, [r7, #16]
      break;
 8004df6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004df8:	693b      	ldr	r3, [r7, #16]
}
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	b006      	add	sp, #24
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	46c0      	nop			@ (mov r8, r8)
 8004e04:	40021000 	.word	0x40021000
 8004e08:	007a1200 	.word	0x007a1200
 8004e0c:	08006554 	.word	0x08006554
 8004e10:	08006564 	.word	0x08006564
 8004e14:	02dc6c00 	.word	0x02dc6c00

08004e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e1c:	4b02      	ldr	r3, [pc, #8]	@ (8004e28 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
}
 8004e20:	0018      	movs	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	46c0      	nop			@ (mov r8, r8)
 8004e28:	20000000 	.word	0x20000000

08004e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004e30:	f7ff fff2 	bl	8004e18 <HAL_RCC_GetHCLKFreq>
 8004e34:	0001      	movs	r1, r0
 8004e36:	4b06      	ldr	r3, [pc, #24]	@ (8004e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	0a1b      	lsrs	r3, r3, #8
 8004e3c:	2207      	movs	r2, #7
 8004e3e:	4013      	ands	r3, r2
 8004e40:	4a04      	ldr	r2, [pc, #16]	@ (8004e54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e42:	5cd3      	ldrb	r3, [r2, r3]
 8004e44:	40d9      	lsrs	r1, r3
 8004e46:	000b      	movs	r3, r1
}    
 8004e48:	0018      	movs	r0, r3
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	46c0      	nop			@ (mov r8, r8)
 8004e50:	40021000 	.word	0x40021000
 8004e54:	0800654c 	.word	0x0800654c

08004e58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e044      	b.n	8004ef4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d107      	bne.n	8004e82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2278      	movs	r2, #120	@ 0x78
 8004e76:	2100      	movs	r1, #0
 8004e78:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f7fd ffbd 	bl	8002dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2224      	movs	r2, #36	@ 0x24
 8004e86:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2101      	movs	r1, #1
 8004e94:	438a      	bics	r2, r1
 8004e96:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	f000 fa0c 	bl	80052c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f000 f8c8 	bl	8005040 <UART_SetConfig>
 8004eb0:	0003      	movs	r3, r0
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d101      	bne.n	8004eba <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e01c      	b.n	8004ef4 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	490d      	ldr	r1, [pc, #52]	@ (8004efc <HAL_UART_Init+0xa4>)
 8004ec6:	400a      	ands	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	212a      	movs	r1, #42	@ 0x2a
 8004ed6:	438a      	bics	r2, r1
 8004ed8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	0018      	movs	r0, r3
 8004eee:	f000 fa9b 	bl	8005428 <UART_CheckIdleState>
 8004ef2:	0003      	movs	r3, r0
}
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	b002      	add	sp, #8
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	ffffb7ff 	.word	0xffffb7ff

08004f00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b08a      	sub	sp, #40	@ 0x28
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	1dbb      	adds	r3, r7, #6
 8004f0e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	d000      	beq.n	8004f1a <HAL_UART_Transmit+0x1a>
 8004f18:	e08c      	b.n	8005034 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_UART_Transmit+0x28>
 8004f20:	1dbb      	adds	r3, r7, #6
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e084      	b.n	8005036 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	2380      	movs	r3, #128	@ 0x80
 8004f32:	015b      	lsls	r3, r3, #5
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d109      	bne.n	8004f4c <HAL_UART_Transmit+0x4c>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d105      	bne.n	8004f4c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2201      	movs	r2, #1
 8004f44:	4013      	ands	r3, r2
 8004f46:	d001      	beq.n	8004f4c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e074      	b.n	8005036 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2284      	movs	r2, #132	@ 0x84
 8004f50:	2100      	movs	r1, #0
 8004f52:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2221      	movs	r2, #33	@ 0x21
 8004f58:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f5a:	f7fe f89b 	bl	8003094 <HAL_GetTick>
 8004f5e:	0003      	movs	r3, r0
 8004f60:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	1dba      	adds	r2, r7, #6
 8004f66:	2150      	movs	r1, #80	@ 0x50
 8004f68:	8812      	ldrh	r2, [r2, #0]
 8004f6a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	1dba      	adds	r2, r7, #6
 8004f70:	2152      	movs	r1, #82	@ 0x52
 8004f72:	8812      	ldrh	r2, [r2, #0]
 8004f74:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	2380      	movs	r3, #128	@ 0x80
 8004f7c:	015b      	lsls	r3, r3, #5
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d108      	bne.n	8004f94 <HAL_UART_Transmit+0x94>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d104      	bne.n	8004f94 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	61bb      	str	r3, [r7, #24]
 8004f92:	e003      	b.n	8004f9c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f9c:	e02f      	b.n	8004ffe <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	0013      	movs	r3, r2
 8004fa8:	2200      	movs	r2, #0
 8004faa:	2180      	movs	r1, #128	@ 0x80
 8004fac:	f000 fae4 	bl	8005578 <UART_WaitOnFlagUntilTimeout>
 8004fb0:	1e03      	subs	r3, r0, #0
 8004fb2:	d004      	beq.n	8004fbe <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e03b      	b.n	8005036 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10b      	bne.n	8004fdc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	881a      	ldrh	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	05d2      	lsls	r2, r2, #23
 8004fce:	0dd2      	lsrs	r2, r2, #23
 8004fd0:	b292      	uxth	r2, r2
 8004fd2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	3302      	adds	r3, #2
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	e007      	b.n	8004fec <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	781a      	ldrb	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2252      	movs	r2, #82	@ 0x52
 8004ff0:	5a9b      	ldrh	r3, [r3, r2]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b299      	uxth	r1, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2252      	movs	r2, #82	@ 0x52
 8004ffc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2252      	movs	r2, #82	@ 0x52
 8005002:	5a9b      	ldrh	r3, [r3, r2]
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1c9      	bne.n	8004f9e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	0013      	movs	r3, r2
 8005014:	2200      	movs	r2, #0
 8005016:	2140      	movs	r1, #64	@ 0x40
 8005018:	f000 faae 	bl	8005578 <UART_WaitOnFlagUntilTimeout>
 800501c:	1e03      	subs	r3, r0, #0
 800501e:	d004      	beq.n	800502a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2220      	movs	r2, #32
 8005024:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e005      	b.n	8005036 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2220      	movs	r2, #32
 800502e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	e000      	b.n	8005036 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005034:	2302      	movs	r3, #2
  }
}
 8005036:	0018      	movs	r0, r3
 8005038:	46bd      	mov	sp, r7
 800503a:	b008      	add	sp, #32
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005048:	231e      	movs	r3, #30
 800504a:	18fb      	adds	r3, r7, r3
 800504c:	2200      	movs	r2, #0
 800504e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a8d      	ldr	r2, [pc, #564]	@ (80052a4 <UART_SetConfig+0x264>)
 8005070:	4013      	ands	r3, r2
 8005072:	0019      	movs	r1, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	430a      	orrs	r2, r1
 800507c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	4a88      	ldr	r2, [pc, #544]	@ (80052a8 <UART_SetConfig+0x268>)
 8005086:	4013      	ands	r3, r2
 8005088:	0019      	movs	r1, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	4a7f      	ldr	r2, [pc, #508]	@ (80052ac <UART_SetConfig+0x26c>)
 80050ae:	4013      	ands	r3, r2
 80050b0:	0019      	movs	r1, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a7b      	ldr	r2, [pc, #492]	@ (80052b0 <UART_SetConfig+0x270>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d127      	bne.n	8005116 <UART_SetConfig+0xd6>
 80050c6:	4b7b      	ldr	r3, [pc, #492]	@ (80052b4 <UART_SetConfig+0x274>)
 80050c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ca:	2203      	movs	r2, #3
 80050cc:	4013      	ands	r3, r2
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	d00d      	beq.n	80050ee <UART_SetConfig+0xae>
 80050d2:	d81b      	bhi.n	800510c <UART_SetConfig+0xcc>
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d014      	beq.n	8005102 <UART_SetConfig+0xc2>
 80050d8:	d818      	bhi.n	800510c <UART_SetConfig+0xcc>
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <UART_SetConfig+0xa4>
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d00a      	beq.n	80050f8 <UART_SetConfig+0xb8>
 80050e2:	e013      	b.n	800510c <UART_SetConfig+0xcc>
 80050e4:	231f      	movs	r3, #31
 80050e6:	18fb      	adds	r3, r7, r3
 80050e8:	2200      	movs	r2, #0
 80050ea:	701a      	strb	r2, [r3, #0]
 80050ec:	e021      	b.n	8005132 <UART_SetConfig+0xf2>
 80050ee:	231f      	movs	r3, #31
 80050f0:	18fb      	adds	r3, r7, r3
 80050f2:	2202      	movs	r2, #2
 80050f4:	701a      	strb	r2, [r3, #0]
 80050f6:	e01c      	b.n	8005132 <UART_SetConfig+0xf2>
 80050f8:	231f      	movs	r3, #31
 80050fa:	18fb      	adds	r3, r7, r3
 80050fc:	2204      	movs	r2, #4
 80050fe:	701a      	strb	r2, [r3, #0]
 8005100:	e017      	b.n	8005132 <UART_SetConfig+0xf2>
 8005102:	231f      	movs	r3, #31
 8005104:	18fb      	adds	r3, r7, r3
 8005106:	2208      	movs	r2, #8
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	e012      	b.n	8005132 <UART_SetConfig+0xf2>
 800510c:	231f      	movs	r3, #31
 800510e:	18fb      	adds	r3, r7, r3
 8005110:	2210      	movs	r2, #16
 8005112:	701a      	strb	r2, [r3, #0]
 8005114:	e00d      	b.n	8005132 <UART_SetConfig+0xf2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a67      	ldr	r2, [pc, #412]	@ (80052b8 <UART_SetConfig+0x278>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d104      	bne.n	800512a <UART_SetConfig+0xea>
 8005120:	231f      	movs	r3, #31
 8005122:	18fb      	adds	r3, r7, r3
 8005124:	2200      	movs	r2, #0
 8005126:	701a      	strb	r2, [r3, #0]
 8005128:	e003      	b.n	8005132 <UART_SetConfig+0xf2>
 800512a:	231f      	movs	r3, #31
 800512c:	18fb      	adds	r3, r7, r3
 800512e:	2210      	movs	r2, #16
 8005130:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	69da      	ldr	r2, [r3, #28]
 8005136:	2380      	movs	r3, #128	@ 0x80
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	429a      	cmp	r2, r3
 800513c:	d15c      	bne.n	80051f8 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800513e:	231f      	movs	r3, #31
 8005140:	18fb      	adds	r3, r7, r3
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b08      	cmp	r3, #8
 8005146:	d015      	beq.n	8005174 <UART_SetConfig+0x134>
 8005148:	dc18      	bgt.n	800517c <UART_SetConfig+0x13c>
 800514a:	2b04      	cmp	r3, #4
 800514c:	d00d      	beq.n	800516a <UART_SetConfig+0x12a>
 800514e:	dc15      	bgt.n	800517c <UART_SetConfig+0x13c>
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <UART_SetConfig+0x11a>
 8005154:	2b02      	cmp	r3, #2
 8005156:	d005      	beq.n	8005164 <UART_SetConfig+0x124>
 8005158:	e010      	b.n	800517c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800515a:	f7ff fe67 	bl	8004e2c <HAL_RCC_GetPCLK1Freq>
 800515e:	0003      	movs	r3, r0
 8005160:	61bb      	str	r3, [r7, #24]
        break;
 8005162:	e012      	b.n	800518a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005164:	4b55      	ldr	r3, [pc, #340]	@ (80052bc <UART_SetConfig+0x27c>)
 8005166:	61bb      	str	r3, [r7, #24]
        break;
 8005168:	e00f      	b.n	800518a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800516a:	f7ff fde3 	bl	8004d34 <HAL_RCC_GetSysClockFreq>
 800516e:	0003      	movs	r3, r0
 8005170:	61bb      	str	r3, [r7, #24]
        break;
 8005172:	e00a      	b.n	800518a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005174:	2380      	movs	r3, #128	@ 0x80
 8005176:	021b      	lsls	r3, r3, #8
 8005178:	61bb      	str	r3, [r7, #24]
        break;
 800517a:	e006      	b.n	800518a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005180:	231e      	movs	r3, #30
 8005182:	18fb      	adds	r3, r7, r3
 8005184:	2201      	movs	r2, #1
 8005186:	701a      	strb	r2, [r3, #0]
        break;
 8005188:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d100      	bne.n	8005192 <UART_SetConfig+0x152>
 8005190:	e07a      	b.n	8005288 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	005a      	lsls	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	085b      	lsrs	r3, r3, #1
 800519c:	18d2      	adds	r2, r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	0019      	movs	r1, r3
 80051a4:	0010      	movs	r0, r2
 80051a6:	f7fa ffc1 	bl	800012c <__udivsi3>
 80051aa:	0003      	movs	r3, r0
 80051ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	2b0f      	cmp	r3, #15
 80051b2:	d91c      	bls.n	80051ee <UART_SetConfig+0x1ae>
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	2380      	movs	r3, #128	@ 0x80
 80051b8:	025b      	lsls	r3, r3, #9
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d217      	bcs.n	80051ee <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	200e      	movs	r0, #14
 80051c4:	183b      	adds	r3, r7, r0
 80051c6:	210f      	movs	r1, #15
 80051c8:	438a      	bics	r2, r1
 80051ca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	085b      	lsrs	r3, r3, #1
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2207      	movs	r2, #7
 80051d4:	4013      	ands	r3, r2
 80051d6:	b299      	uxth	r1, r3
 80051d8:	183b      	adds	r3, r7, r0
 80051da:	183a      	adds	r2, r7, r0
 80051dc:	8812      	ldrh	r2, [r2, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	183a      	adds	r2, r7, r0
 80051e8:	8812      	ldrh	r2, [r2, #0]
 80051ea:	60da      	str	r2, [r3, #12]
 80051ec:	e04c      	b.n	8005288 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80051ee:	231e      	movs	r3, #30
 80051f0:	18fb      	adds	r3, r7, r3
 80051f2:	2201      	movs	r2, #1
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	e047      	b.n	8005288 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051f8:	231f      	movs	r3, #31
 80051fa:	18fb      	adds	r3, r7, r3
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b08      	cmp	r3, #8
 8005200:	d015      	beq.n	800522e <UART_SetConfig+0x1ee>
 8005202:	dc18      	bgt.n	8005236 <UART_SetConfig+0x1f6>
 8005204:	2b04      	cmp	r3, #4
 8005206:	d00d      	beq.n	8005224 <UART_SetConfig+0x1e4>
 8005208:	dc15      	bgt.n	8005236 <UART_SetConfig+0x1f6>
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <UART_SetConfig+0x1d4>
 800520e:	2b02      	cmp	r3, #2
 8005210:	d005      	beq.n	800521e <UART_SetConfig+0x1de>
 8005212:	e010      	b.n	8005236 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005214:	f7ff fe0a 	bl	8004e2c <HAL_RCC_GetPCLK1Freq>
 8005218:	0003      	movs	r3, r0
 800521a:	61bb      	str	r3, [r7, #24]
        break;
 800521c:	e012      	b.n	8005244 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800521e:	4b27      	ldr	r3, [pc, #156]	@ (80052bc <UART_SetConfig+0x27c>)
 8005220:	61bb      	str	r3, [r7, #24]
        break;
 8005222:	e00f      	b.n	8005244 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005224:	f7ff fd86 	bl	8004d34 <HAL_RCC_GetSysClockFreq>
 8005228:	0003      	movs	r3, r0
 800522a:	61bb      	str	r3, [r7, #24]
        break;
 800522c:	e00a      	b.n	8005244 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800522e:	2380      	movs	r3, #128	@ 0x80
 8005230:	021b      	lsls	r3, r3, #8
 8005232:	61bb      	str	r3, [r7, #24]
        break;
 8005234:	e006      	b.n	8005244 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800523a:	231e      	movs	r3, #30
 800523c:	18fb      	adds	r3, r7, r3
 800523e:	2201      	movs	r2, #1
 8005240:	701a      	strb	r2, [r3, #0]
        break;
 8005242:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d01e      	beq.n	8005288 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	085a      	lsrs	r2, r3, #1
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	18d2      	adds	r2, r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	0019      	movs	r1, r3
 800525a:	0010      	movs	r0, r2
 800525c:	f7fa ff66 	bl	800012c <__udivsi3>
 8005260:	0003      	movs	r3, r0
 8005262:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	2b0f      	cmp	r3, #15
 8005268:	d90a      	bls.n	8005280 <UART_SetConfig+0x240>
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	2380      	movs	r3, #128	@ 0x80
 800526e:	025b      	lsls	r3, r3, #9
 8005270:	429a      	cmp	r2, r3
 8005272:	d205      	bcs.n	8005280 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	b29a      	uxth	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	60da      	str	r2, [r3, #12]
 800527e:	e003      	b.n	8005288 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005280:	231e      	movs	r3, #30
 8005282:	18fb      	adds	r3, r7, r3
 8005284:	2201      	movs	r2, #1
 8005286:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005294:	231e      	movs	r3, #30
 8005296:	18fb      	adds	r3, r7, r3
 8005298:	781b      	ldrb	r3, [r3, #0]
}
 800529a:	0018      	movs	r0, r3
 800529c:	46bd      	mov	sp, r7
 800529e:	b008      	add	sp, #32
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	46c0      	nop			@ (mov r8, r8)
 80052a4:	efff69f3 	.word	0xefff69f3
 80052a8:	ffffcfff 	.word	0xffffcfff
 80052ac:	fffff4ff 	.word	0xfffff4ff
 80052b0:	40013800 	.word	0x40013800
 80052b4:	40021000 	.word	0x40021000
 80052b8:	40004400 	.word	0x40004400
 80052bc:	007a1200 	.word	0x007a1200

080052c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052cc:	2208      	movs	r2, #8
 80052ce:	4013      	ands	r3, r2
 80052d0:	d00b      	beq.n	80052ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	4a4a      	ldr	r2, [pc, #296]	@ (8005404 <UART_AdvFeatureConfig+0x144>)
 80052da:	4013      	ands	r3, r2
 80052dc:	0019      	movs	r1, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ee:	2201      	movs	r2, #1
 80052f0:	4013      	ands	r3, r2
 80052f2:	d00b      	beq.n	800530c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	4a43      	ldr	r2, [pc, #268]	@ (8005408 <UART_AdvFeatureConfig+0x148>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	0019      	movs	r1, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005310:	2202      	movs	r2, #2
 8005312:	4013      	ands	r3, r2
 8005314:	d00b      	beq.n	800532e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	4a3b      	ldr	r2, [pc, #236]	@ (800540c <UART_AdvFeatureConfig+0x14c>)
 800531e:	4013      	ands	r3, r2
 8005320:	0019      	movs	r1, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005332:	2204      	movs	r2, #4
 8005334:	4013      	ands	r3, r2
 8005336:	d00b      	beq.n	8005350 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	4a34      	ldr	r2, [pc, #208]	@ (8005410 <UART_AdvFeatureConfig+0x150>)
 8005340:	4013      	ands	r3, r2
 8005342:	0019      	movs	r1, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005354:	2210      	movs	r2, #16
 8005356:	4013      	ands	r3, r2
 8005358:	d00b      	beq.n	8005372 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	4a2c      	ldr	r2, [pc, #176]	@ (8005414 <UART_AdvFeatureConfig+0x154>)
 8005362:	4013      	ands	r3, r2
 8005364:	0019      	movs	r1, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005376:	2220      	movs	r2, #32
 8005378:	4013      	ands	r3, r2
 800537a:	d00b      	beq.n	8005394 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	4a25      	ldr	r2, [pc, #148]	@ (8005418 <UART_AdvFeatureConfig+0x158>)
 8005384:	4013      	ands	r3, r2
 8005386:	0019      	movs	r1, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005398:	2240      	movs	r2, #64	@ 0x40
 800539a:	4013      	ands	r3, r2
 800539c:	d01d      	beq.n	80053da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	4a1d      	ldr	r2, [pc, #116]	@ (800541c <UART_AdvFeatureConfig+0x15c>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	0019      	movs	r1, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053ba:	2380      	movs	r3, #128	@ 0x80
 80053bc:	035b      	lsls	r3, r3, #13
 80053be:	429a      	cmp	r2, r3
 80053c0:	d10b      	bne.n	80053da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	4a15      	ldr	r2, [pc, #84]	@ (8005420 <UART_AdvFeatureConfig+0x160>)
 80053ca:	4013      	ands	r3, r2
 80053cc:	0019      	movs	r1, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053de:	2280      	movs	r2, #128	@ 0x80
 80053e0:	4013      	ands	r3, r2
 80053e2:	d00b      	beq.n	80053fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	4a0e      	ldr	r2, [pc, #56]	@ (8005424 <UART_AdvFeatureConfig+0x164>)
 80053ec:	4013      	ands	r3, r2
 80053ee:	0019      	movs	r1, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	605a      	str	r2, [r3, #4]
  }
}
 80053fc:	46c0      	nop			@ (mov r8, r8)
 80053fe:	46bd      	mov	sp, r7
 8005400:	b002      	add	sp, #8
 8005402:	bd80      	pop	{r7, pc}
 8005404:	ffff7fff 	.word	0xffff7fff
 8005408:	fffdffff 	.word	0xfffdffff
 800540c:	fffeffff 	.word	0xfffeffff
 8005410:	fffbffff 	.word	0xfffbffff
 8005414:	ffffefff 	.word	0xffffefff
 8005418:	ffffdfff 	.word	0xffffdfff
 800541c:	ffefffff 	.word	0xffefffff
 8005420:	ff9fffff 	.word	0xff9fffff
 8005424:	fff7ffff 	.word	0xfff7ffff

08005428 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b092      	sub	sp, #72	@ 0x48
 800542c:	af02      	add	r7, sp, #8
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2284      	movs	r2, #132	@ 0x84
 8005434:	2100      	movs	r1, #0
 8005436:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005438:	f7fd fe2c 	bl	8003094 <HAL_GetTick>
 800543c:	0003      	movs	r3, r0
 800543e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2208      	movs	r2, #8
 8005448:	4013      	ands	r3, r2
 800544a:	2b08      	cmp	r3, #8
 800544c:	d12c      	bne.n	80054a8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800544e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005450:	2280      	movs	r2, #128	@ 0x80
 8005452:	0391      	lsls	r1, r2, #14
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	4a46      	ldr	r2, [pc, #280]	@ (8005570 <UART_CheckIdleState+0x148>)
 8005458:	9200      	str	r2, [sp, #0]
 800545a:	2200      	movs	r2, #0
 800545c:	f000 f88c 	bl	8005578 <UART_WaitOnFlagUntilTimeout>
 8005460:	1e03      	subs	r3, r0, #0
 8005462:	d021      	beq.n	80054a8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005464:	f3ef 8310 	mrs	r3, PRIMASK
 8005468:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800546a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800546c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800546e:	2301      	movs	r3, #1
 8005470:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005474:	f383 8810 	msr	PRIMASK, r3
}
 8005478:	46c0      	nop			@ (mov r8, r8)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2180      	movs	r1, #128	@ 0x80
 8005486:	438a      	bics	r2, r1
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800548e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005490:	f383 8810 	msr	PRIMASK, r3
}
 8005494:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2220      	movs	r2, #32
 800549a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2278      	movs	r2, #120	@ 0x78
 80054a0:	2100      	movs	r1, #0
 80054a2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e05f      	b.n	8005568 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2204      	movs	r2, #4
 80054b0:	4013      	ands	r3, r2
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d146      	bne.n	8005544 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054b8:	2280      	movs	r2, #128	@ 0x80
 80054ba:	03d1      	lsls	r1, r2, #15
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	4a2c      	ldr	r2, [pc, #176]	@ (8005570 <UART_CheckIdleState+0x148>)
 80054c0:	9200      	str	r2, [sp, #0]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f000 f858 	bl	8005578 <UART_WaitOnFlagUntilTimeout>
 80054c8:	1e03      	subs	r3, r0, #0
 80054ca:	d03b      	beq.n	8005544 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054cc:	f3ef 8310 	mrs	r3, PRIMASK
 80054d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80054d2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80054d6:	2301      	movs	r3, #1
 80054d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f383 8810 	msr	PRIMASK, r3
}
 80054e0:	46c0      	nop			@ (mov r8, r8)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4921      	ldr	r1, [pc, #132]	@ (8005574 <UART_CheckIdleState+0x14c>)
 80054ee:	400a      	ands	r2, r1
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f383 8810 	msr	PRIMASK, r3
}
 80054fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005502:	61bb      	str	r3, [r7, #24]
  return(result);
 8005504:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005506:	633b      	str	r3, [r7, #48]	@ 0x30
 8005508:	2301      	movs	r3, #1
 800550a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	f383 8810 	msr	PRIMASK, r3
}
 8005512:	46c0      	nop			@ (mov r8, r8)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2101      	movs	r1, #1
 8005520:	438a      	bics	r2, r1
 8005522:	609a      	str	r2, [r3, #8]
 8005524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005526:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	f383 8810 	msr	PRIMASK, r3
}
 800552e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2280      	movs	r2, #128	@ 0x80
 8005534:	2120      	movs	r1, #32
 8005536:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2278      	movs	r2, #120	@ 0x78
 800553c:	2100      	movs	r1, #0
 800553e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e011      	b.n	8005568 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2280      	movs	r2, #128	@ 0x80
 800554e:	2120      	movs	r1, #32
 8005550:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2278      	movs	r2, #120	@ 0x78
 8005562:	2100      	movs	r1, #0
 8005564:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	0018      	movs	r0, r3
 800556a:	46bd      	mov	sp, r7
 800556c:	b010      	add	sp, #64	@ 0x40
 800556e:	bd80      	pop	{r7, pc}
 8005570:	01ffffff 	.word	0x01ffffff
 8005574:	fffffedf 	.word	0xfffffedf

08005578 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	1dfb      	adds	r3, r7, #7
 8005586:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005588:	e051      	b.n	800562e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	3301      	adds	r3, #1
 800558e:	d04e      	beq.n	800562e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005590:	f7fd fd80 	bl	8003094 <HAL_GetTick>
 8005594:	0002      	movs	r2, r0
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	429a      	cmp	r2, r3
 800559e:	d302      	bcc.n	80055a6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e051      	b.n	800564e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2204      	movs	r2, #4
 80055b2:	4013      	ands	r3, r2
 80055b4:	d03b      	beq.n	800562e <UART_WaitOnFlagUntilTimeout+0xb6>
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b80      	cmp	r3, #128	@ 0x80
 80055ba:	d038      	beq.n	800562e <UART_WaitOnFlagUntilTimeout+0xb6>
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b40      	cmp	r3, #64	@ 0x40
 80055c0:	d035      	beq.n	800562e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	2208      	movs	r2, #8
 80055ca:	4013      	ands	r3, r2
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d111      	bne.n	80055f4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2208      	movs	r2, #8
 80055d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	0018      	movs	r0, r3
 80055dc:	f000 f83c 	bl	8005658 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2284      	movs	r2, #132	@ 0x84
 80055e4:	2108      	movs	r1, #8
 80055e6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2278      	movs	r2, #120	@ 0x78
 80055ec:	2100      	movs	r1, #0
 80055ee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e02c      	b.n	800564e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	69da      	ldr	r2, [r3, #28]
 80055fa:	2380      	movs	r3, #128	@ 0x80
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	401a      	ands	r2, r3
 8005600:	2380      	movs	r3, #128	@ 0x80
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	429a      	cmp	r2, r3
 8005606:	d112      	bne.n	800562e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2280      	movs	r2, #128	@ 0x80
 800560e:	0112      	lsls	r2, r2, #4
 8005610:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	0018      	movs	r0, r3
 8005616:	f000 f81f 	bl	8005658 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2284      	movs	r2, #132	@ 0x84
 800561e:	2120      	movs	r1, #32
 8005620:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2278      	movs	r2, #120	@ 0x78
 8005626:	2100      	movs	r1, #0
 8005628:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e00f      	b.n	800564e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	4013      	ands	r3, r2
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	425a      	negs	r2, r3
 800563e:	4153      	adcs	r3, r2
 8005640:	b2db      	uxtb	r3, r3
 8005642:	001a      	movs	r2, r3
 8005644:	1dfb      	adds	r3, r7, #7
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d09e      	beq.n	800558a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	0018      	movs	r0, r3
 8005650:	46bd      	mov	sp, r7
 8005652:	b004      	add	sp, #16
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08e      	sub	sp, #56	@ 0x38
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005660:	f3ef 8310 	mrs	r3, PRIMASK
 8005664:	617b      	str	r3, [r7, #20]
  return(result);
 8005666:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005668:	637b      	str	r3, [r7, #52]	@ 0x34
 800566a:	2301      	movs	r3, #1
 800566c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	f383 8810 	msr	PRIMASK, r3
}
 8005674:	46c0      	nop			@ (mov r8, r8)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4926      	ldr	r1, [pc, #152]	@ (800571c <UART_EndRxTransfer+0xc4>)
 8005682:	400a      	ands	r2, r1
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005688:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	f383 8810 	msr	PRIMASK, r3
}
 8005690:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005692:	f3ef 8310 	mrs	r3, PRIMASK
 8005696:	623b      	str	r3, [r7, #32]
  return(result);
 8005698:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569a:	633b      	str	r3, [r7, #48]	@ 0x30
 800569c:	2301      	movs	r3, #1
 800569e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a2:	f383 8810 	msr	PRIMASK, r3
}
 80056a6:	46c0      	nop			@ (mov r8, r8)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2101      	movs	r1, #1
 80056b4:	438a      	bics	r2, r1
 80056b6:	609a      	str	r2, [r3, #8]
 80056b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056be:	f383 8810 	msr	PRIMASK, r3
}
 80056c2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d118      	bne.n	80056fe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056cc:	f3ef 8310 	mrs	r3, PRIMASK
 80056d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80056d2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056d6:	2301      	movs	r3, #1
 80056d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f383 8810 	msr	PRIMASK, r3
}
 80056e0:	46c0      	nop			@ (mov r8, r8)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2110      	movs	r1, #16
 80056ee:	438a      	bics	r2, r1
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f383 8810 	msr	PRIMASK, r3
}
 80056fc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2280      	movs	r2, #128	@ 0x80
 8005702:	2120      	movs	r1, #32
 8005704:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005712:	46c0      	nop			@ (mov r8, r8)
 8005714:	46bd      	mov	sp, r7
 8005716:	b00e      	add	sp, #56	@ 0x38
 8005718:	bd80      	pop	{r7, pc}
 800571a:	46c0      	nop			@ (mov r8, r8)
 800571c:	fffffedf 	.word	0xfffffedf

08005720 <siprintf>:
 8005720:	b40e      	push	{r1, r2, r3}
 8005722:	b500      	push	{lr}
 8005724:	490b      	ldr	r1, [pc, #44]	@ (8005754 <siprintf+0x34>)
 8005726:	b09c      	sub	sp, #112	@ 0x70
 8005728:	ab1d      	add	r3, sp, #116	@ 0x74
 800572a:	9002      	str	r0, [sp, #8]
 800572c:	9006      	str	r0, [sp, #24]
 800572e:	9107      	str	r1, [sp, #28]
 8005730:	9104      	str	r1, [sp, #16]
 8005732:	4809      	ldr	r0, [pc, #36]	@ (8005758 <siprintf+0x38>)
 8005734:	4909      	ldr	r1, [pc, #36]	@ (800575c <siprintf+0x3c>)
 8005736:	cb04      	ldmia	r3!, {r2}
 8005738:	9105      	str	r1, [sp, #20]
 800573a:	6800      	ldr	r0, [r0, #0]
 800573c:	a902      	add	r1, sp, #8
 800573e:	9301      	str	r3, [sp, #4]
 8005740:	f000 f99e 	bl	8005a80 <_svfiprintf_r>
 8005744:	2200      	movs	r2, #0
 8005746:	9b02      	ldr	r3, [sp, #8]
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	b01c      	add	sp, #112	@ 0x70
 800574c:	bc08      	pop	{r3}
 800574e:	b003      	add	sp, #12
 8005750:	4718      	bx	r3
 8005752:	46c0      	nop			@ (mov r8, r8)
 8005754:	7fffffff 	.word	0x7fffffff
 8005758:	2000000c 	.word	0x2000000c
 800575c:	ffff0208 	.word	0xffff0208

08005760 <memset>:
 8005760:	0003      	movs	r3, r0
 8005762:	1882      	adds	r2, r0, r2
 8005764:	4293      	cmp	r3, r2
 8005766:	d100      	bne.n	800576a <memset+0xa>
 8005768:	4770      	bx	lr
 800576a:	7019      	strb	r1, [r3, #0]
 800576c:	3301      	adds	r3, #1
 800576e:	e7f9      	b.n	8005764 <memset+0x4>

08005770 <__errno>:
 8005770:	4b01      	ldr	r3, [pc, #4]	@ (8005778 <__errno+0x8>)
 8005772:	6818      	ldr	r0, [r3, #0]
 8005774:	4770      	bx	lr
 8005776:	46c0      	nop			@ (mov r8, r8)
 8005778:	2000000c 	.word	0x2000000c

0800577c <__libc_init_array>:
 800577c:	b570      	push	{r4, r5, r6, lr}
 800577e:	2600      	movs	r6, #0
 8005780:	4c0c      	ldr	r4, [pc, #48]	@ (80057b4 <__libc_init_array+0x38>)
 8005782:	4d0d      	ldr	r5, [pc, #52]	@ (80057b8 <__libc_init_array+0x3c>)
 8005784:	1b64      	subs	r4, r4, r5
 8005786:	10a4      	asrs	r4, r4, #2
 8005788:	42a6      	cmp	r6, r4
 800578a:	d109      	bne.n	80057a0 <__libc_init_array+0x24>
 800578c:	2600      	movs	r6, #0
 800578e:	f000 fe53 	bl	8006438 <_init>
 8005792:	4c0a      	ldr	r4, [pc, #40]	@ (80057bc <__libc_init_array+0x40>)
 8005794:	4d0a      	ldr	r5, [pc, #40]	@ (80057c0 <__libc_init_array+0x44>)
 8005796:	1b64      	subs	r4, r4, r5
 8005798:	10a4      	asrs	r4, r4, #2
 800579a:	42a6      	cmp	r6, r4
 800579c:	d105      	bne.n	80057aa <__libc_init_array+0x2e>
 800579e:	bd70      	pop	{r4, r5, r6, pc}
 80057a0:	00b3      	lsls	r3, r6, #2
 80057a2:	58eb      	ldr	r3, [r5, r3]
 80057a4:	4798      	blx	r3
 80057a6:	3601      	adds	r6, #1
 80057a8:	e7ee      	b.n	8005788 <__libc_init_array+0xc>
 80057aa:	00b3      	lsls	r3, r6, #2
 80057ac:	58eb      	ldr	r3, [r5, r3]
 80057ae:	4798      	blx	r3
 80057b0:	3601      	adds	r6, #1
 80057b2:	e7f2      	b.n	800579a <__libc_init_array+0x1e>
 80057b4:	080065a8 	.word	0x080065a8
 80057b8:	080065a8 	.word	0x080065a8
 80057bc:	080065ac 	.word	0x080065ac
 80057c0:	080065a8 	.word	0x080065a8

080057c4 <__retarget_lock_acquire_recursive>:
 80057c4:	4770      	bx	lr

080057c6 <__retarget_lock_release_recursive>:
 80057c6:	4770      	bx	lr

080057c8 <_free_r>:
 80057c8:	b570      	push	{r4, r5, r6, lr}
 80057ca:	0005      	movs	r5, r0
 80057cc:	1e0c      	subs	r4, r1, #0
 80057ce:	d010      	beq.n	80057f2 <_free_r+0x2a>
 80057d0:	3c04      	subs	r4, #4
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	da00      	bge.n	80057da <_free_r+0x12>
 80057d8:	18e4      	adds	r4, r4, r3
 80057da:	0028      	movs	r0, r5
 80057dc:	f000 f8e0 	bl	80059a0 <__malloc_lock>
 80057e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005858 <_free_r+0x90>)
 80057e2:	6813      	ldr	r3, [r2, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d105      	bne.n	80057f4 <_free_r+0x2c>
 80057e8:	6063      	str	r3, [r4, #4]
 80057ea:	6014      	str	r4, [r2, #0]
 80057ec:	0028      	movs	r0, r5
 80057ee:	f000 f8df 	bl	80059b0 <__malloc_unlock>
 80057f2:	bd70      	pop	{r4, r5, r6, pc}
 80057f4:	42a3      	cmp	r3, r4
 80057f6:	d908      	bls.n	800580a <_free_r+0x42>
 80057f8:	6820      	ldr	r0, [r4, #0]
 80057fa:	1821      	adds	r1, r4, r0
 80057fc:	428b      	cmp	r3, r1
 80057fe:	d1f3      	bne.n	80057e8 <_free_r+0x20>
 8005800:	6819      	ldr	r1, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	1809      	adds	r1, r1, r0
 8005806:	6021      	str	r1, [r4, #0]
 8005808:	e7ee      	b.n	80057e8 <_free_r+0x20>
 800580a:	001a      	movs	r2, r3
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <_free_r+0x4e>
 8005812:	42a3      	cmp	r3, r4
 8005814:	d9f9      	bls.n	800580a <_free_r+0x42>
 8005816:	6811      	ldr	r1, [r2, #0]
 8005818:	1850      	adds	r0, r2, r1
 800581a:	42a0      	cmp	r0, r4
 800581c:	d10b      	bne.n	8005836 <_free_r+0x6e>
 800581e:	6820      	ldr	r0, [r4, #0]
 8005820:	1809      	adds	r1, r1, r0
 8005822:	1850      	adds	r0, r2, r1
 8005824:	6011      	str	r1, [r2, #0]
 8005826:	4283      	cmp	r3, r0
 8005828:	d1e0      	bne.n	80057ec <_free_r+0x24>
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	1841      	adds	r1, r0, r1
 8005830:	6011      	str	r1, [r2, #0]
 8005832:	6053      	str	r3, [r2, #4]
 8005834:	e7da      	b.n	80057ec <_free_r+0x24>
 8005836:	42a0      	cmp	r0, r4
 8005838:	d902      	bls.n	8005840 <_free_r+0x78>
 800583a:	230c      	movs	r3, #12
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	e7d5      	b.n	80057ec <_free_r+0x24>
 8005840:	6820      	ldr	r0, [r4, #0]
 8005842:	1821      	adds	r1, r4, r0
 8005844:	428b      	cmp	r3, r1
 8005846:	d103      	bne.n	8005850 <_free_r+0x88>
 8005848:	6819      	ldr	r1, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	1809      	adds	r1, r1, r0
 800584e:	6021      	str	r1, [r4, #0]
 8005850:	6063      	str	r3, [r4, #4]
 8005852:	6054      	str	r4, [r2, #4]
 8005854:	e7ca      	b.n	80057ec <_free_r+0x24>
 8005856:	46c0      	nop			@ (mov r8, r8)
 8005858:	200003a0 	.word	0x200003a0

0800585c <sbrk_aligned>:
 800585c:	b570      	push	{r4, r5, r6, lr}
 800585e:	4e0f      	ldr	r6, [pc, #60]	@ (800589c <sbrk_aligned+0x40>)
 8005860:	000d      	movs	r5, r1
 8005862:	6831      	ldr	r1, [r6, #0]
 8005864:	0004      	movs	r4, r0
 8005866:	2900      	cmp	r1, #0
 8005868:	d102      	bne.n	8005870 <sbrk_aligned+0x14>
 800586a:	f000 fb99 	bl	8005fa0 <_sbrk_r>
 800586e:	6030      	str	r0, [r6, #0]
 8005870:	0029      	movs	r1, r5
 8005872:	0020      	movs	r0, r4
 8005874:	f000 fb94 	bl	8005fa0 <_sbrk_r>
 8005878:	1c43      	adds	r3, r0, #1
 800587a:	d103      	bne.n	8005884 <sbrk_aligned+0x28>
 800587c:	2501      	movs	r5, #1
 800587e:	426d      	negs	r5, r5
 8005880:	0028      	movs	r0, r5
 8005882:	bd70      	pop	{r4, r5, r6, pc}
 8005884:	2303      	movs	r3, #3
 8005886:	1cc5      	adds	r5, r0, #3
 8005888:	439d      	bics	r5, r3
 800588a:	42a8      	cmp	r0, r5
 800588c:	d0f8      	beq.n	8005880 <sbrk_aligned+0x24>
 800588e:	1a29      	subs	r1, r5, r0
 8005890:	0020      	movs	r0, r4
 8005892:	f000 fb85 	bl	8005fa0 <_sbrk_r>
 8005896:	3001      	adds	r0, #1
 8005898:	d1f2      	bne.n	8005880 <sbrk_aligned+0x24>
 800589a:	e7ef      	b.n	800587c <sbrk_aligned+0x20>
 800589c:	2000039c 	.word	0x2000039c

080058a0 <_malloc_r>:
 80058a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058a2:	2203      	movs	r2, #3
 80058a4:	1ccb      	adds	r3, r1, #3
 80058a6:	4393      	bics	r3, r2
 80058a8:	3308      	adds	r3, #8
 80058aa:	0005      	movs	r5, r0
 80058ac:	001f      	movs	r7, r3
 80058ae:	2b0c      	cmp	r3, #12
 80058b0:	d234      	bcs.n	800591c <_malloc_r+0x7c>
 80058b2:	270c      	movs	r7, #12
 80058b4:	42b9      	cmp	r1, r7
 80058b6:	d833      	bhi.n	8005920 <_malloc_r+0x80>
 80058b8:	0028      	movs	r0, r5
 80058ba:	f000 f871 	bl	80059a0 <__malloc_lock>
 80058be:	4e37      	ldr	r6, [pc, #220]	@ (800599c <_malloc_r+0xfc>)
 80058c0:	6833      	ldr	r3, [r6, #0]
 80058c2:	001c      	movs	r4, r3
 80058c4:	2c00      	cmp	r4, #0
 80058c6:	d12f      	bne.n	8005928 <_malloc_r+0x88>
 80058c8:	0039      	movs	r1, r7
 80058ca:	0028      	movs	r0, r5
 80058cc:	f7ff ffc6 	bl	800585c <sbrk_aligned>
 80058d0:	0004      	movs	r4, r0
 80058d2:	1c43      	adds	r3, r0, #1
 80058d4:	d15f      	bne.n	8005996 <_malloc_r+0xf6>
 80058d6:	6834      	ldr	r4, [r6, #0]
 80058d8:	9400      	str	r4, [sp, #0]
 80058da:	9b00      	ldr	r3, [sp, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d14a      	bne.n	8005976 <_malloc_r+0xd6>
 80058e0:	2c00      	cmp	r4, #0
 80058e2:	d052      	beq.n	800598a <_malloc_r+0xea>
 80058e4:	6823      	ldr	r3, [r4, #0]
 80058e6:	0028      	movs	r0, r5
 80058e8:	18e3      	adds	r3, r4, r3
 80058ea:	9900      	ldr	r1, [sp, #0]
 80058ec:	9301      	str	r3, [sp, #4]
 80058ee:	f000 fb57 	bl	8005fa0 <_sbrk_r>
 80058f2:	9b01      	ldr	r3, [sp, #4]
 80058f4:	4283      	cmp	r3, r0
 80058f6:	d148      	bne.n	800598a <_malloc_r+0xea>
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	0028      	movs	r0, r5
 80058fc:	1aff      	subs	r7, r7, r3
 80058fe:	0039      	movs	r1, r7
 8005900:	f7ff ffac 	bl	800585c <sbrk_aligned>
 8005904:	3001      	adds	r0, #1
 8005906:	d040      	beq.n	800598a <_malloc_r+0xea>
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	19db      	adds	r3, r3, r7
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	6833      	ldr	r3, [r6, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	2a00      	cmp	r2, #0
 8005914:	d133      	bne.n	800597e <_malloc_r+0xde>
 8005916:	9b00      	ldr	r3, [sp, #0]
 8005918:	6033      	str	r3, [r6, #0]
 800591a:	e019      	b.n	8005950 <_malloc_r+0xb0>
 800591c:	2b00      	cmp	r3, #0
 800591e:	dac9      	bge.n	80058b4 <_malloc_r+0x14>
 8005920:	230c      	movs	r3, #12
 8005922:	602b      	str	r3, [r5, #0]
 8005924:	2000      	movs	r0, #0
 8005926:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005928:	6821      	ldr	r1, [r4, #0]
 800592a:	1bc9      	subs	r1, r1, r7
 800592c:	d420      	bmi.n	8005970 <_malloc_r+0xd0>
 800592e:	290b      	cmp	r1, #11
 8005930:	d90a      	bls.n	8005948 <_malloc_r+0xa8>
 8005932:	19e2      	adds	r2, r4, r7
 8005934:	6027      	str	r7, [r4, #0]
 8005936:	42a3      	cmp	r3, r4
 8005938:	d104      	bne.n	8005944 <_malloc_r+0xa4>
 800593a:	6032      	str	r2, [r6, #0]
 800593c:	6863      	ldr	r3, [r4, #4]
 800593e:	6011      	str	r1, [r2, #0]
 8005940:	6053      	str	r3, [r2, #4]
 8005942:	e005      	b.n	8005950 <_malloc_r+0xb0>
 8005944:	605a      	str	r2, [r3, #4]
 8005946:	e7f9      	b.n	800593c <_malloc_r+0x9c>
 8005948:	6862      	ldr	r2, [r4, #4]
 800594a:	42a3      	cmp	r3, r4
 800594c:	d10e      	bne.n	800596c <_malloc_r+0xcc>
 800594e:	6032      	str	r2, [r6, #0]
 8005950:	0028      	movs	r0, r5
 8005952:	f000 f82d 	bl	80059b0 <__malloc_unlock>
 8005956:	0020      	movs	r0, r4
 8005958:	2207      	movs	r2, #7
 800595a:	300b      	adds	r0, #11
 800595c:	1d23      	adds	r3, r4, #4
 800595e:	4390      	bics	r0, r2
 8005960:	1ac2      	subs	r2, r0, r3
 8005962:	4298      	cmp	r0, r3
 8005964:	d0df      	beq.n	8005926 <_malloc_r+0x86>
 8005966:	1a1b      	subs	r3, r3, r0
 8005968:	50a3      	str	r3, [r4, r2]
 800596a:	e7dc      	b.n	8005926 <_malloc_r+0x86>
 800596c:	605a      	str	r2, [r3, #4]
 800596e:	e7ef      	b.n	8005950 <_malloc_r+0xb0>
 8005970:	0023      	movs	r3, r4
 8005972:	6864      	ldr	r4, [r4, #4]
 8005974:	e7a6      	b.n	80058c4 <_malloc_r+0x24>
 8005976:	9c00      	ldr	r4, [sp, #0]
 8005978:	6863      	ldr	r3, [r4, #4]
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	e7ad      	b.n	80058da <_malloc_r+0x3a>
 800597e:	001a      	movs	r2, r3
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	42a3      	cmp	r3, r4
 8005984:	d1fb      	bne.n	800597e <_malloc_r+0xde>
 8005986:	2300      	movs	r3, #0
 8005988:	e7da      	b.n	8005940 <_malloc_r+0xa0>
 800598a:	230c      	movs	r3, #12
 800598c:	0028      	movs	r0, r5
 800598e:	602b      	str	r3, [r5, #0]
 8005990:	f000 f80e 	bl	80059b0 <__malloc_unlock>
 8005994:	e7c6      	b.n	8005924 <_malloc_r+0x84>
 8005996:	6007      	str	r7, [r0, #0]
 8005998:	e7da      	b.n	8005950 <_malloc_r+0xb0>
 800599a:	46c0      	nop			@ (mov r8, r8)
 800599c:	200003a0 	.word	0x200003a0

080059a0 <__malloc_lock>:
 80059a0:	b510      	push	{r4, lr}
 80059a2:	4802      	ldr	r0, [pc, #8]	@ (80059ac <__malloc_lock+0xc>)
 80059a4:	f7ff ff0e 	bl	80057c4 <__retarget_lock_acquire_recursive>
 80059a8:	bd10      	pop	{r4, pc}
 80059aa:	46c0      	nop			@ (mov r8, r8)
 80059ac:	20000398 	.word	0x20000398

080059b0 <__malloc_unlock>:
 80059b0:	b510      	push	{r4, lr}
 80059b2:	4802      	ldr	r0, [pc, #8]	@ (80059bc <__malloc_unlock+0xc>)
 80059b4:	f7ff ff07 	bl	80057c6 <__retarget_lock_release_recursive>
 80059b8:	bd10      	pop	{r4, pc}
 80059ba:	46c0      	nop			@ (mov r8, r8)
 80059bc:	20000398 	.word	0x20000398

080059c0 <__ssputs_r>:
 80059c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059c2:	688e      	ldr	r6, [r1, #8]
 80059c4:	b085      	sub	sp, #20
 80059c6:	001f      	movs	r7, r3
 80059c8:	000c      	movs	r4, r1
 80059ca:	680b      	ldr	r3, [r1, #0]
 80059cc:	9002      	str	r0, [sp, #8]
 80059ce:	9203      	str	r2, [sp, #12]
 80059d0:	42be      	cmp	r6, r7
 80059d2:	d830      	bhi.n	8005a36 <__ssputs_r+0x76>
 80059d4:	210c      	movs	r1, #12
 80059d6:	5e62      	ldrsh	r2, [r4, r1]
 80059d8:	2190      	movs	r1, #144	@ 0x90
 80059da:	00c9      	lsls	r1, r1, #3
 80059dc:	420a      	tst	r2, r1
 80059de:	d028      	beq.n	8005a32 <__ssputs_r+0x72>
 80059e0:	2003      	movs	r0, #3
 80059e2:	6921      	ldr	r1, [r4, #16]
 80059e4:	1a5b      	subs	r3, r3, r1
 80059e6:	9301      	str	r3, [sp, #4]
 80059e8:	6963      	ldr	r3, [r4, #20]
 80059ea:	4343      	muls	r3, r0
 80059ec:	9801      	ldr	r0, [sp, #4]
 80059ee:	0fdd      	lsrs	r5, r3, #31
 80059f0:	18ed      	adds	r5, r5, r3
 80059f2:	1c7b      	adds	r3, r7, #1
 80059f4:	181b      	adds	r3, r3, r0
 80059f6:	106d      	asrs	r5, r5, #1
 80059f8:	42ab      	cmp	r3, r5
 80059fa:	d900      	bls.n	80059fe <__ssputs_r+0x3e>
 80059fc:	001d      	movs	r5, r3
 80059fe:	0552      	lsls	r2, r2, #21
 8005a00:	d528      	bpl.n	8005a54 <__ssputs_r+0x94>
 8005a02:	0029      	movs	r1, r5
 8005a04:	9802      	ldr	r0, [sp, #8]
 8005a06:	f7ff ff4b 	bl	80058a0 <_malloc_r>
 8005a0a:	1e06      	subs	r6, r0, #0
 8005a0c:	d02c      	beq.n	8005a68 <__ssputs_r+0xa8>
 8005a0e:	9a01      	ldr	r2, [sp, #4]
 8005a10:	6921      	ldr	r1, [r4, #16]
 8005a12:	f000 fae2 	bl	8005fda <memcpy>
 8005a16:	89a2      	ldrh	r2, [r4, #12]
 8005a18:	4b18      	ldr	r3, [pc, #96]	@ (8005a7c <__ssputs_r+0xbc>)
 8005a1a:	401a      	ands	r2, r3
 8005a1c:	2380      	movs	r3, #128	@ 0x80
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	81a3      	strh	r3, [r4, #12]
 8005a22:	9b01      	ldr	r3, [sp, #4]
 8005a24:	6126      	str	r6, [r4, #16]
 8005a26:	18f6      	adds	r6, r6, r3
 8005a28:	6026      	str	r6, [r4, #0]
 8005a2a:	003e      	movs	r6, r7
 8005a2c:	6165      	str	r5, [r4, #20]
 8005a2e:	1aed      	subs	r5, r5, r3
 8005a30:	60a5      	str	r5, [r4, #8]
 8005a32:	42be      	cmp	r6, r7
 8005a34:	d900      	bls.n	8005a38 <__ssputs_r+0x78>
 8005a36:	003e      	movs	r6, r7
 8005a38:	0032      	movs	r2, r6
 8005a3a:	9903      	ldr	r1, [sp, #12]
 8005a3c:	6820      	ldr	r0, [r4, #0]
 8005a3e:	f000 fa9b 	bl	8005f78 <memmove>
 8005a42:	2000      	movs	r0, #0
 8005a44:	68a3      	ldr	r3, [r4, #8]
 8005a46:	1b9b      	subs	r3, r3, r6
 8005a48:	60a3      	str	r3, [r4, #8]
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	199b      	adds	r3, r3, r6
 8005a4e:	6023      	str	r3, [r4, #0]
 8005a50:	b005      	add	sp, #20
 8005a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a54:	002a      	movs	r2, r5
 8005a56:	9802      	ldr	r0, [sp, #8]
 8005a58:	f000 fac8 	bl	8005fec <_realloc_r>
 8005a5c:	1e06      	subs	r6, r0, #0
 8005a5e:	d1e0      	bne.n	8005a22 <__ssputs_r+0x62>
 8005a60:	6921      	ldr	r1, [r4, #16]
 8005a62:	9802      	ldr	r0, [sp, #8]
 8005a64:	f7ff feb0 	bl	80057c8 <_free_r>
 8005a68:	230c      	movs	r3, #12
 8005a6a:	2001      	movs	r0, #1
 8005a6c:	9a02      	ldr	r2, [sp, #8]
 8005a6e:	4240      	negs	r0, r0
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	89a2      	ldrh	r2, [r4, #12]
 8005a74:	3334      	adds	r3, #52	@ 0x34
 8005a76:	4313      	orrs	r3, r2
 8005a78:	81a3      	strh	r3, [r4, #12]
 8005a7a:	e7e9      	b.n	8005a50 <__ssputs_r+0x90>
 8005a7c:	fffffb7f 	.word	0xfffffb7f

08005a80 <_svfiprintf_r>:
 8005a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a82:	b0a1      	sub	sp, #132	@ 0x84
 8005a84:	9003      	str	r0, [sp, #12]
 8005a86:	001d      	movs	r5, r3
 8005a88:	898b      	ldrh	r3, [r1, #12]
 8005a8a:	000f      	movs	r7, r1
 8005a8c:	0016      	movs	r6, r2
 8005a8e:	061b      	lsls	r3, r3, #24
 8005a90:	d511      	bpl.n	8005ab6 <_svfiprintf_r+0x36>
 8005a92:	690b      	ldr	r3, [r1, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10e      	bne.n	8005ab6 <_svfiprintf_r+0x36>
 8005a98:	2140      	movs	r1, #64	@ 0x40
 8005a9a:	f7ff ff01 	bl	80058a0 <_malloc_r>
 8005a9e:	6038      	str	r0, [r7, #0]
 8005aa0:	6138      	str	r0, [r7, #16]
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d105      	bne.n	8005ab2 <_svfiprintf_r+0x32>
 8005aa6:	230c      	movs	r3, #12
 8005aa8:	9a03      	ldr	r2, [sp, #12]
 8005aaa:	6013      	str	r3, [r2, #0]
 8005aac:	2001      	movs	r0, #1
 8005aae:	4240      	negs	r0, r0
 8005ab0:	e0cf      	b.n	8005c52 <_svfiprintf_r+0x1d2>
 8005ab2:	2340      	movs	r3, #64	@ 0x40
 8005ab4:	617b      	str	r3, [r7, #20]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	ac08      	add	r4, sp, #32
 8005aba:	6163      	str	r3, [r4, #20]
 8005abc:	3320      	adds	r3, #32
 8005abe:	7663      	strb	r3, [r4, #25]
 8005ac0:	3310      	adds	r3, #16
 8005ac2:	76a3      	strb	r3, [r4, #26]
 8005ac4:	9507      	str	r5, [sp, #28]
 8005ac6:	0035      	movs	r5, r6
 8005ac8:	782b      	ldrb	r3, [r5, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <_svfiprintf_r+0x52>
 8005ace:	2b25      	cmp	r3, #37	@ 0x25
 8005ad0:	d148      	bne.n	8005b64 <_svfiprintf_r+0xe4>
 8005ad2:	1bab      	subs	r3, r5, r6
 8005ad4:	9305      	str	r3, [sp, #20]
 8005ad6:	42b5      	cmp	r5, r6
 8005ad8:	d00b      	beq.n	8005af2 <_svfiprintf_r+0x72>
 8005ada:	0032      	movs	r2, r6
 8005adc:	0039      	movs	r1, r7
 8005ade:	9803      	ldr	r0, [sp, #12]
 8005ae0:	f7ff ff6e 	bl	80059c0 <__ssputs_r>
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d100      	bne.n	8005aea <_svfiprintf_r+0x6a>
 8005ae8:	e0ae      	b.n	8005c48 <_svfiprintf_r+0x1c8>
 8005aea:	6963      	ldr	r3, [r4, #20]
 8005aec:	9a05      	ldr	r2, [sp, #20]
 8005aee:	189b      	adds	r3, r3, r2
 8005af0:	6163      	str	r3, [r4, #20]
 8005af2:	782b      	ldrb	r3, [r5, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d100      	bne.n	8005afa <_svfiprintf_r+0x7a>
 8005af8:	e0a6      	b.n	8005c48 <_svfiprintf_r+0x1c8>
 8005afa:	2201      	movs	r2, #1
 8005afc:	2300      	movs	r3, #0
 8005afe:	4252      	negs	r2, r2
 8005b00:	6062      	str	r2, [r4, #4]
 8005b02:	a904      	add	r1, sp, #16
 8005b04:	3254      	adds	r2, #84	@ 0x54
 8005b06:	1852      	adds	r2, r2, r1
 8005b08:	1c6e      	adds	r6, r5, #1
 8005b0a:	6023      	str	r3, [r4, #0]
 8005b0c:	60e3      	str	r3, [r4, #12]
 8005b0e:	60a3      	str	r3, [r4, #8]
 8005b10:	7013      	strb	r3, [r2, #0]
 8005b12:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005b14:	4b54      	ldr	r3, [pc, #336]	@ (8005c68 <_svfiprintf_r+0x1e8>)
 8005b16:	2205      	movs	r2, #5
 8005b18:	0018      	movs	r0, r3
 8005b1a:	7831      	ldrb	r1, [r6, #0]
 8005b1c:	9305      	str	r3, [sp, #20]
 8005b1e:	f000 fa51 	bl	8005fc4 <memchr>
 8005b22:	1c75      	adds	r5, r6, #1
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d11f      	bne.n	8005b68 <_svfiprintf_r+0xe8>
 8005b28:	6822      	ldr	r2, [r4, #0]
 8005b2a:	06d3      	lsls	r3, r2, #27
 8005b2c:	d504      	bpl.n	8005b38 <_svfiprintf_r+0xb8>
 8005b2e:	2353      	movs	r3, #83	@ 0x53
 8005b30:	a904      	add	r1, sp, #16
 8005b32:	185b      	adds	r3, r3, r1
 8005b34:	2120      	movs	r1, #32
 8005b36:	7019      	strb	r1, [r3, #0]
 8005b38:	0713      	lsls	r3, r2, #28
 8005b3a:	d504      	bpl.n	8005b46 <_svfiprintf_r+0xc6>
 8005b3c:	2353      	movs	r3, #83	@ 0x53
 8005b3e:	a904      	add	r1, sp, #16
 8005b40:	185b      	adds	r3, r3, r1
 8005b42:	212b      	movs	r1, #43	@ 0x2b
 8005b44:	7019      	strb	r1, [r3, #0]
 8005b46:	7833      	ldrb	r3, [r6, #0]
 8005b48:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b4a:	d016      	beq.n	8005b7a <_svfiprintf_r+0xfa>
 8005b4c:	0035      	movs	r5, r6
 8005b4e:	2100      	movs	r1, #0
 8005b50:	200a      	movs	r0, #10
 8005b52:	68e3      	ldr	r3, [r4, #12]
 8005b54:	782a      	ldrb	r2, [r5, #0]
 8005b56:	1c6e      	adds	r6, r5, #1
 8005b58:	3a30      	subs	r2, #48	@ 0x30
 8005b5a:	2a09      	cmp	r2, #9
 8005b5c:	d950      	bls.n	8005c00 <_svfiprintf_r+0x180>
 8005b5e:	2900      	cmp	r1, #0
 8005b60:	d111      	bne.n	8005b86 <_svfiprintf_r+0x106>
 8005b62:	e017      	b.n	8005b94 <_svfiprintf_r+0x114>
 8005b64:	3501      	adds	r5, #1
 8005b66:	e7af      	b.n	8005ac8 <_svfiprintf_r+0x48>
 8005b68:	9b05      	ldr	r3, [sp, #20]
 8005b6a:	6822      	ldr	r2, [r4, #0]
 8005b6c:	1ac0      	subs	r0, r0, r3
 8005b6e:	2301      	movs	r3, #1
 8005b70:	4083      	lsls	r3, r0
 8005b72:	4313      	orrs	r3, r2
 8005b74:	002e      	movs	r6, r5
 8005b76:	6023      	str	r3, [r4, #0]
 8005b78:	e7cc      	b.n	8005b14 <_svfiprintf_r+0x94>
 8005b7a:	9b07      	ldr	r3, [sp, #28]
 8005b7c:	1d19      	adds	r1, r3, #4
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	9107      	str	r1, [sp, #28]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	db01      	blt.n	8005b8a <_svfiprintf_r+0x10a>
 8005b86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b88:	e004      	b.n	8005b94 <_svfiprintf_r+0x114>
 8005b8a:	425b      	negs	r3, r3
 8005b8c:	60e3      	str	r3, [r4, #12]
 8005b8e:	2302      	movs	r3, #2
 8005b90:	4313      	orrs	r3, r2
 8005b92:	6023      	str	r3, [r4, #0]
 8005b94:	782b      	ldrb	r3, [r5, #0]
 8005b96:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b98:	d10c      	bne.n	8005bb4 <_svfiprintf_r+0x134>
 8005b9a:	786b      	ldrb	r3, [r5, #1]
 8005b9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b9e:	d134      	bne.n	8005c0a <_svfiprintf_r+0x18a>
 8005ba0:	9b07      	ldr	r3, [sp, #28]
 8005ba2:	3502      	adds	r5, #2
 8005ba4:	1d1a      	adds	r2, r3, #4
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	9207      	str	r2, [sp, #28]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	da01      	bge.n	8005bb2 <_svfiprintf_r+0x132>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	425b      	negs	r3, r3
 8005bb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bb4:	4e2d      	ldr	r6, [pc, #180]	@ (8005c6c <_svfiprintf_r+0x1ec>)
 8005bb6:	2203      	movs	r2, #3
 8005bb8:	0030      	movs	r0, r6
 8005bba:	7829      	ldrb	r1, [r5, #0]
 8005bbc:	f000 fa02 	bl	8005fc4 <memchr>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d006      	beq.n	8005bd2 <_svfiprintf_r+0x152>
 8005bc4:	2340      	movs	r3, #64	@ 0x40
 8005bc6:	1b80      	subs	r0, r0, r6
 8005bc8:	4083      	lsls	r3, r0
 8005bca:	6822      	ldr	r2, [r4, #0]
 8005bcc:	3501      	adds	r5, #1
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	7829      	ldrb	r1, [r5, #0]
 8005bd4:	2206      	movs	r2, #6
 8005bd6:	4826      	ldr	r0, [pc, #152]	@ (8005c70 <_svfiprintf_r+0x1f0>)
 8005bd8:	1c6e      	adds	r6, r5, #1
 8005bda:	7621      	strb	r1, [r4, #24]
 8005bdc:	f000 f9f2 	bl	8005fc4 <memchr>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	d038      	beq.n	8005c56 <_svfiprintf_r+0x1d6>
 8005be4:	4b23      	ldr	r3, [pc, #140]	@ (8005c74 <_svfiprintf_r+0x1f4>)
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d122      	bne.n	8005c30 <_svfiprintf_r+0x1b0>
 8005bea:	2207      	movs	r2, #7
 8005bec:	9b07      	ldr	r3, [sp, #28]
 8005bee:	3307      	adds	r3, #7
 8005bf0:	4393      	bics	r3, r2
 8005bf2:	3308      	adds	r3, #8
 8005bf4:	9307      	str	r3, [sp, #28]
 8005bf6:	6963      	ldr	r3, [r4, #20]
 8005bf8:	9a04      	ldr	r2, [sp, #16]
 8005bfa:	189b      	adds	r3, r3, r2
 8005bfc:	6163      	str	r3, [r4, #20]
 8005bfe:	e762      	b.n	8005ac6 <_svfiprintf_r+0x46>
 8005c00:	4343      	muls	r3, r0
 8005c02:	0035      	movs	r5, r6
 8005c04:	2101      	movs	r1, #1
 8005c06:	189b      	adds	r3, r3, r2
 8005c08:	e7a4      	b.n	8005b54 <_svfiprintf_r+0xd4>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	200a      	movs	r0, #10
 8005c0e:	0019      	movs	r1, r3
 8005c10:	3501      	adds	r5, #1
 8005c12:	6063      	str	r3, [r4, #4]
 8005c14:	782a      	ldrb	r2, [r5, #0]
 8005c16:	1c6e      	adds	r6, r5, #1
 8005c18:	3a30      	subs	r2, #48	@ 0x30
 8005c1a:	2a09      	cmp	r2, #9
 8005c1c:	d903      	bls.n	8005c26 <_svfiprintf_r+0x1a6>
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0c8      	beq.n	8005bb4 <_svfiprintf_r+0x134>
 8005c22:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c24:	e7c6      	b.n	8005bb4 <_svfiprintf_r+0x134>
 8005c26:	4341      	muls	r1, r0
 8005c28:	0035      	movs	r5, r6
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	1889      	adds	r1, r1, r2
 8005c2e:	e7f1      	b.n	8005c14 <_svfiprintf_r+0x194>
 8005c30:	aa07      	add	r2, sp, #28
 8005c32:	9200      	str	r2, [sp, #0]
 8005c34:	0021      	movs	r1, r4
 8005c36:	003a      	movs	r2, r7
 8005c38:	4b0f      	ldr	r3, [pc, #60]	@ (8005c78 <_svfiprintf_r+0x1f8>)
 8005c3a:	9803      	ldr	r0, [sp, #12]
 8005c3c:	e000      	b.n	8005c40 <_svfiprintf_r+0x1c0>
 8005c3e:	bf00      	nop
 8005c40:	9004      	str	r0, [sp, #16]
 8005c42:	9b04      	ldr	r3, [sp, #16]
 8005c44:	3301      	adds	r3, #1
 8005c46:	d1d6      	bne.n	8005bf6 <_svfiprintf_r+0x176>
 8005c48:	89bb      	ldrh	r3, [r7, #12]
 8005c4a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005c4c:	065b      	lsls	r3, r3, #25
 8005c4e:	d500      	bpl.n	8005c52 <_svfiprintf_r+0x1d2>
 8005c50:	e72c      	b.n	8005aac <_svfiprintf_r+0x2c>
 8005c52:	b021      	add	sp, #132	@ 0x84
 8005c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c56:	aa07      	add	r2, sp, #28
 8005c58:	9200      	str	r2, [sp, #0]
 8005c5a:	0021      	movs	r1, r4
 8005c5c:	003a      	movs	r2, r7
 8005c5e:	4b06      	ldr	r3, [pc, #24]	@ (8005c78 <_svfiprintf_r+0x1f8>)
 8005c60:	9803      	ldr	r0, [sp, #12]
 8005c62:	f000 f87b 	bl	8005d5c <_printf_i>
 8005c66:	e7eb      	b.n	8005c40 <_svfiprintf_r+0x1c0>
 8005c68:	08006574 	.word	0x08006574
 8005c6c:	0800657a 	.word	0x0800657a
 8005c70:	0800657e 	.word	0x0800657e
 8005c74:	00000000 	.word	0x00000000
 8005c78:	080059c1 	.word	0x080059c1

08005c7c <_printf_common>:
 8005c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c7e:	0016      	movs	r6, r2
 8005c80:	9301      	str	r3, [sp, #4]
 8005c82:	688a      	ldr	r2, [r1, #8]
 8005c84:	690b      	ldr	r3, [r1, #16]
 8005c86:	000c      	movs	r4, r1
 8005c88:	9000      	str	r0, [sp, #0]
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	da00      	bge.n	8005c90 <_printf_common+0x14>
 8005c8e:	0013      	movs	r3, r2
 8005c90:	0022      	movs	r2, r4
 8005c92:	6033      	str	r3, [r6, #0]
 8005c94:	3243      	adds	r2, #67	@ 0x43
 8005c96:	7812      	ldrb	r2, [r2, #0]
 8005c98:	2a00      	cmp	r2, #0
 8005c9a:	d001      	beq.n	8005ca0 <_printf_common+0x24>
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	6033      	str	r3, [r6, #0]
 8005ca0:	6823      	ldr	r3, [r4, #0]
 8005ca2:	069b      	lsls	r3, r3, #26
 8005ca4:	d502      	bpl.n	8005cac <_printf_common+0x30>
 8005ca6:	6833      	ldr	r3, [r6, #0]
 8005ca8:	3302      	adds	r3, #2
 8005caa:	6033      	str	r3, [r6, #0]
 8005cac:	6822      	ldr	r2, [r4, #0]
 8005cae:	2306      	movs	r3, #6
 8005cb0:	0015      	movs	r5, r2
 8005cb2:	401d      	ands	r5, r3
 8005cb4:	421a      	tst	r2, r3
 8005cb6:	d027      	beq.n	8005d08 <_printf_common+0x8c>
 8005cb8:	0023      	movs	r3, r4
 8005cba:	3343      	adds	r3, #67	@ 0x43
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	1e5a      	subs	r2, r3, #1
 8005cc0:	4193      	sbcs	r3, r2
 8005cc2:	6822      	ldr	r2, [r4, #0]
 8005cc4:	0692      	lsls	r2, r2, #26
 8005cc6:	d430      	bmi.n	8005d2a <_printf_common+0xae>
 8005cc8:	0022      	movs	r2, r4
 8005cca:	9901      	ldr	r1, [sp, #4]
 8005ccc:	9800      	ldr	r0, [sp, #0]
 8005cce:	9d08      	ldr	r5, [sp, #32]
 8005cd0:	3243      	adds	r2, #67	@ 0x43
 8005cd2:	47a8      	blx	r5
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d025      	beq.n	8005d24 <_printf_common+0xa8>
 8005cd8:	2206      	movs	r2, #6
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	2500      	movs	r5, #0
 8005cde:	4013      	ands	r3, r2
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d105      	bne.n	8005cf0 <_printf_common+0x74>
 8005ce4:	6833      	ldr	r3, [r6, #0]
 8005ce6:	68e5      	ldr	r5, [r4, #12]
 8005ce8:	1aed      	subs	r5, r5, r3
 8005cea:	43eb      	mvns	r3, r5
 8005cec:	17db      	asrs	r3, r3, #31
 8005cee:	401d      	ands	r5, r3
 8005cf0:	68a3      	ldr	r3, [r4, #8]
 8005cf2:	6922      	ldr	r2, [r4, #16]
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	dd01      	ble.n	8005cfc <_printf_common+0x80>
 8005cf8:	1a9b      	subs	r3, r3, r2
 8005cfa:	18ed      	adds	r5, r5, r3
 8005cfc:	2600      	movs	r6, #0
 8005cfe:	42b5      	cmp	r5, r6
 8005d00:	d120      	bne.n	8005d44 <_printf_common+0xc8>
 8005d02:	2000      	movs	r0, #0
 8005d04:	e010      	b.n	8005d28 <_printf_common+0xac>
 8005d06:	3501      	adds	r5, #1
 8005d08:	68e3      	ldr	r3, [r4, #12]
 8005d0a:	6832      	ldr	r2, [r6, #0]
 8005d0c:	1a9b      	subs	r3, r3, r2
 8005d0e:	42ab      	cmp	r3, r5
 8005d10:	ddd2      	ble.n	8005cb8 <_printf_common+0x3c>
 8005d12:	0022      	movs	r2, r4
 8005d14:	2301      	movs	r3, #1
 8005d16:	9901      	ldr	r1, [sp, #4]
 8005d18:	9800      	ldr	r0, [sp, #0]
 8005d1a:	9f08      	ldr	r7, [sp, #32]
 8005d1c:	3219      	adds	r2, #25
 8005d1e:	47b8      	blx	r7
 8005d20:	3001      	adds	r0, #1
 8005d22:	d1f0      	bne.n	8005d06 <_printf_common+0x8a>
 8005d24:	2001      	movs	r0, #1
 8005d26:	4240      	negs	r0, r0
 8005d28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d2a:	2030      	movs	r0, #48	@ 0x30
 8005d2c:	18e1      	adds	r1, r4, r3
 8005d2e:	3143      	adds	r1, #67	@ 0x43
 8005d30:	7008      	strb	r0, [r1, #0]
 8005d32:	0021      	movs	r1, r4
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	3145      	adds	r1, #69	@ 0x45
 8005d38:	7809      	ldrb	r1, [r1, #0]
 8005d3a:	18a2      	adds	r2, r4, r2
 8005d3c:	3243      	adds	r2, #67	@ 0x43
 8005d3e:	3302      	adds	r3, #2
 8005d40:	7011      	strb	r1, [r2, #0]
 8005d42:	e7c1      	b.n	8005cc8 <_printf_common+0x4c>
 8005d44:	0022      	movs	r2, r4
 8005d46:	2301      	movs	r3, #1
 8005d48:	9901      	ldr	r1, [sp, #4]
 8005d4a:	9800      	ldr	r0, [sp, #0]
 8005d4c:	9f08      	ldr	r7, [sp, #32]
 8005d4e:	321a      	adds	r2, #26
 8005d50:	47b8      	blx	r7
 8005d52:	3001      	adds	r0, #1
 8005d54:	d0e6      	beq.n	8005d24 <_printf_common+0xa8>
 8005d56:	3601      	adds	r6, #1
 8005d58:	e7d1      	b.n	8005cfe <_printf_common+0x82>
	...

08005d5c <_printf_i>:
 8005d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d5e:	b08b      	sub	sp, #44	@ 0x2c
 8005d60:	9206      	str	r2, [sp, #24]
 8005d62:	000a      	movs	r2, r1
 8005d64:	3243      	adds	r2, #67	@ 0x43
 8005d66:	9307      	str	r3, [sp, #28]
 8005d68:	9005      	str	r0, [sp, #20]
 8005d6a:	9203      	str	r2, [sp, #12]
 8005d6c:	7e0a      	ldrb	r2, [r1, #24]
 8005d6e:	000c      	movs	r4, r1
 8005d70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005d72:	2a78      	cmp	r2, #120	@ 0x78
 8005d74:	d809      	bhi.n	8005d8a <_printf_i+0x2e>
 8005d76:	2a62      	cmp	r2, #98	@ 0x62
 8005d78:	d80b      	bhi.n	8005d92 <_printf_i+0x36>
 8005d7a:	2a00      	cmp	r2, #0
 8005d7c:	d100      	bne.n	8005d80 <_printf_i+0x24>
 8005d7e:	e0bc      	b.n	8005efa <_printf_i+0x19e>
 8005d80:	497b      	ldr	r1, [pc, #492]	@ (8005f70 <_printf_i+0x214>)
 8005d82:	9104      	str	r1, [sp, #16]
 8005d84:	2a58      	cmp	r2, #88	@ 0x58
 8005d86:	d100      	bne.n	8005d8a <_printf_i+0x2e>
 8005d88:	e090      	b.n	8005eac <_printf_i+0x150>
 8005d8a:	0025      	movs	r5, r4
 8005d8c:	3542      	adds	r5, #66	@ 0x42
 8005d8e:	702a      	strb	r2, [r5, #0]
 8005d90:	e022      	b.n	8005dd8 <_printf_i+0x7c>
 8005d92:	0010      	movs	r0, r2
 8005d94:	3863      	subs	r0, #99	@ 0x63
 8005d96:	2815      	cmp	r0, #21
 8005d98:	d8f7      	bhi.n	8005d8a <_printf_i+0x2e>
 8005d9a:	f7fa f9bd 	bl	8000118 <__gnu_thumb1_case_shi>
 8005d9e:	0016      	.short	0x0016
 8005da0:	fff6001f 	.word	0xfff6001f
 8005da4:	fff6fff6 	.word	0xfff6fff6
 8005da8:	001ffff6 	.word	0x001ffff6
 8005dac:	fff6fff6 	.word	0xfff6fff6
 8005db0:	fff6fff6 	.word	0xfff6fff6
 8005db4:	003600a1 	.word	0x003600a1
 8005db8:	fff60080 	.word	0xfff60080
 8005dbc:	00b2fff6 	.word	0x00b2fff6
 8005dc0:	0036fff6 	.word	0x0036fff6
 8005dc4:	fff6fff6 	.word	0xfff6fff6
 8005dc8:	0084      	.short	0x0084
 8005dca:	0025      	movs	r5, r4
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	3542      	adds	r5, #66	@ 0x42
 8005dd0:	1d11      	adds	r1, r2, #4
 8005dd2:	6019      	str	r1, [r3, #0]
 8005dd4:	6813      	ldr	r3, [r2, #0]
 8005dd6:	702b      	strb	r3, [r5, #0]
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e0a0      	b.n	8005f1e <_printf_i+0x1c2>
 8005ddc:	6818      	ldr	r0, [r3, #0]
 8005dde:	6809      	ldr	r1, [r1, #0]
 8005de0:	1d02      	adds	r2, r0, #4
 8005de2:	060d      	lsls	r5, r1, #24
 8005de4:	d50b      	bpl.n	8005dfe <_printf_i+0xa2>
 8005de6:	6806      	ldr	r6, [r0, #0]
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	2e00      	cmp	r6, #0
 8005dec:	da03      	bge.n	8005df6 <_printf_i+0x9a>
 8005dee:	232d      	movs	r3, #45	@ 0x2d
 8005df0:	9a03      	ldr	r2, [sp, #12]
 8005df2:	4276      	negs	r6, r6
 8005df4:	7013      	strb	r3, [r2, #0]
 8005df6:	4b5e      	ldr	r3, [pc, #376]	@ (8005f70 <_printf_i+0x214>)
 8005df8:	270a      	movs	r7, #10
 8005dfa:	9304      	str	r3, [sp, #16]
 8005dfc:	e018      	b.n	8005e30 <_printf_i+0xd4>
 8005dfe:	6806      	ldr	r6, [r0, #0]
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	0649      	lsls	r1, r1, #25
 8005e04:	d5f1      	bpl.n	8005dea <_printf_i+0x8e>
 8005e06:	b236      	sxth	r6, r6
 8005e08:	e7ef      	b.n	8005dea <_printf_i+0x8e>
 8005e0a:	6808      	ldr	r0, [r1, #0]
 8005e0c:	6819      	ldr	r1, [r3, #0]
 8005e0e:	c940      	ldmia	r1!, {r6}
 8005e10:	0605      	lsls	r5, r0, #24
 8005e12:	d402      	bmi.n	8005e1a <_printf_i+0xbe>
 8005e14:	0640      	lsls	r0, r0, #25
 8005e16:	d500      	bpl.n	8005e1a <_printf_i+0xbe>
 8005e18:	b2b6      	uxth	r6, r6
 8005e1a:	6019      	str	r1, [r3, #0]
 8005e1c:	4b54      	ldr	r3, [pc, #336]	@ (8005f70 <_printf_i+0x214>)
 8005e1e:	270a      	movs	r7, #10
 8005e20:	9304      	str	r3, [sp, #16]
 8005e22:	2a6f      	cmp	r2, #111	@ 0x6f
 8005e24:	d100      	bne.n	8005e28 <_printf_i+0xcc>
 8005e26:	3f02      	subs	r7, #2
 8005e28:	0023      	movs	r3, r4
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	3343      	adds	r3, #67	@ 0x43
 8005e2e:	701a      	strb	r2, [r3, #0]
 8005e30:	6863      	ldr	r3, [r4, #4]
 8005e32:	60a3      	str	r3, [r4, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	db03      	blt.n	8005e40 <_printf_i+0xe4>
 8005e38:	2104      	movs	r1, #4
 8005e3a:	6822      	ldr	r2, [r4, #0]
 8005e3c:	438a      	bics	r2, r1
 8005e3e:	6022      	str	r2, [r4, #0]
 8005e40:	2e00      	cmp	r6, #0
 8005e42:	d102      	bne.n	8005e4a <_printf_i+0xee>
 8005e44:	9d03      	ldr	r5, [sp, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00c      	beq.n	8005e64 <_printf_i+0x108>
 8005e4a:	9d03      	ldr	r5, [sp, #12]
 8005e4c:	0030      	movs	r0, r6
 8005e4e:	0039      	movs	r1, r7
 8005e50:	f7fa f9f2 	bl	8000238 <__aeabi_uidivmod>
 8005e54:	9b04      	ldr	r3, [sp, #16]
 8005e56:	3d01      	subs	r5, #1
 8005e58:	5c5b      	ldrb	r3, [r3, r1]
 8005e5a:	702b      	strb	r3, [r5, #0]
 8005e5c:	0033      	movs	r3, r6
 8005e5e:	0006      	movs	r6, r0
 8005e60:	429f      	cmp	r7, r3
 8005e62:	d9f3      	bls.n	8005e4c <_printf_i+0xf0>
 8005e64:	2f08      	cmp	r7, #8
 8005e66:	d109      	bne.n	8005e7c <_printf_i+0x120>
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	07db      	lsls	r3, r3, #31
 8005e6c:	d506      	bpl.n	8005e7c <_printf_i+0x120>
 8005e6e:	6862      	ldr	r2, [r4, #4]
 8005e70:	6923      	ldr	r3, [r4, #16]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	dc02      	bgt.n	8005e7c <_printf_i+0x120>
 8005e76:	2330      	movs	r3, #48	@ 0x30
 8005e78:	3d01      	subs	r5, #1
 8005e7a:	702b      	strb	r3, [r5, #0]
 8005e7c:	9b03      	ldr	r3, [sp, #12]
 8005e7e:	1b5b      	subs	r3, r3, r5
 8005e80:	6123      	str	r3, [r4, #16]
 8005e82:	9b07      	ldr	r3, [sp, #28]
 8005e84:	0021      	movs	r1, r4
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	9805      	ldr	r0, [sp, #20]
 8005e8a:	9b06      	ldr	r3, [sp, #24]
 8005e8c:	aa09      	add	r2, sp, #36	@ 0x24
 8005e8e:	f7ff fef5 	bl	8005c7c <_printf_common>
 8005e92:	3001      	adds	r0, #1
 8005e94:	d148      	bne.n	8005f28 <_printf_i+0x1cc>
 8005e96:	2001      	movs	r0, #1
 8005e98:	4240      	negs	r0, r0
 8005e9a:	b00b      	add	sp, #44	@ 0x2c
 8005e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	6809      	ldr	r1, [r1, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	6022      	str	r2, [r4, #0]
 8005ea6:	2278      	movs	r2, #120	@ 0x78
 8005ea8:	4932      	ldr	r1, [pc, #200]	@ (8005f74 <_printf_i+0x218>)
 8005eaa:	9104      	str	r1, [sp, #16]
 8005eac:	0021      	movs	r1, r4
 8005eae:	3145      	adds	r1, #69	@ 0x45
 8005eb0:	700a      	strb	r2, [r1, #0]
 8005eb2:	6819      	ldr	r1, [r3, #0]
 8005eb4:	6822      	ldr	r2, [r4, #0]
 8005eb6:	c940      	ldmia	r1!, {r6}
 8005eb8:	0610      	lsls	r0, r2, #24
 8005eba:	d402      	bmi.n	8005ec2 <_printf_i+0x166>
 8005ebc:	0650      	lsls	r0, r2, #25
 8005ebe:	d500      	bpl.n	8005ec2 <_printf_i+0x166>
 8005ec0:	b2b6      	uxth	r6, r6
 8005ec2:	6019      	str	r1, [r3, #0]
 8005ec4:	07d3      	lsls	r3, r2, #31
 8005ec6:	d502      	bpl.n	8005ece <_printf_i+0x172>
 8005ec8:	2320      	movs	r3, #32
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	6023      	str	r3, [r4, #0]
 8005ece:	2e00      	cmp	r6, #0
 8005ed0:	d001      	beq.n	8005ed6 <_printf_i+0x17a>
 8005ed2:	2710      	movs	r7, #16
 8005ed4:	e7a8      	b.n	8005e28 <_printf_i+0xcc>
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	4393      	bics	r3, r2
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	e7f8      	b.n	8005ed2 <_printf_i+0x176>
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	680d      	ldr	r5, [r1, #0]
 8005ee4:	1d10      	adds	r0, r2, #4
 8005ee6:	6949      	ldr	r1, [r1, #20]
 8005ee8:	6018      	str	r0, [r3, #0]
 8005eea:	6813      	ldr	r3, [r2, #0]
 8005eec:	062e      	lsls	r6, r5, #24
 8005eee:	d501      	bpl.n	8005ef4 <_printf_i+0x198>
 8005ef0:	6019      	str	r1, [r3, #0]
 8005ef2:	e002      	b.n	8005efa <_printf_i+0x19e>
 8005ef4:	066d      	lsls	r5, r5, #25
 8005ef6:	d5fb      	bpl.n	8005ef0 <_printf_i+0x194>
 8005ef8:	8019      	strh	r1, [r3, #0]
 8005efa:	2300      	movs	r3, #0
 8005efc:	9d03      	ldr	r5, [sp, #12]
 8005efe:	6123      	str	r3, [r4, #16]
 8005f00:	e7bf      	b.n	8005e82 <_printf_i+0x126>
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	1d11      	adds	r1, r2, #4
 8005f06:	6019      	str	r1, [r3, #0]
 8005f08:	6815      	ldr	r5, [r2, #0]
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	0028      	movs	r0, r5
 8005f0e:	6862      	ldr	r2, [r4, #4]
 8005f10:	f000 f858 	bl	8005fc4 <memchr>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	d001      	beq.n	8005f1c <_printf_i+0x1c0>
 8005f18:	1b40      	subs	r0, r0, r5
 8005f1a:	6060      	str	r0, [r4, #4]
 8005f1c:	6863      	ldr	r3, [r4, #4]
 8005f1e:	6123      	str	r3, [r4, #16]
 8005f20:	2300      	movs	r3, #0
 8005f22:	9a03      	ldr	r2, [sp, #12]
 8005f24:	7013      	strb	r3, [r2, #0]
 8005f26:	e7ac      	b.n	8005e82 <_printf_i+0x126>
 8005f28:	002a      	movs	r2, r5
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	9906      	ldr	r1, [sp, #24]
 8005f2e:	9805      	ldr	r0, [sp, #20]
 8005f30:	9d07      	ldr	r5, [sp, #28]
 8005f32:	47a8      	blx	r5
 8005f34:	3001      	adds	r0, #1
 8005f36:	d0ae      	beq.n	8005e96 <_printf_i+0x13a>
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	079b      	lsls	r3, r3, #30
 8005f3c:	d415      	bmi.n	8005f6a <_printf_i+0x20e>
 8005f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f40:	68e0      	ldr	r0, [r4, #12]
 8005f42:	4298      	cmp	r0, r3
 8005f44:	daa9      	bge.n	8005e9a <_printf_i+0x13e>
 8005f46:	0018      	movs	r0, r3
 8005f48:	e7a7      	b.n	8005e9a <_printf_i+0x13e>
 8005f4a:	0022      	movs	r2, r4
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	9906      	ldr	r1, [sp, #24]
 8005f50:	9805      	ldr	r0, [sp, #20]
 8005f52:	9e07      	ldr	r6, [sp, #28]
 8005f54:	3219      	adds	r2, #25
 8005f56:	47b0      	blx	r6
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d09c      	beq.n	8005e96 <_printf_i+0x13a>
 8005f5c:	3501      	adds	r5, #1
 8005f5e:	68e3      	ldr	r3, [r4, #12]
 8005f60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f62:	1a9b      	subs	r3, r3, r2
 8005f64:	42ab      	cmp	r3, r5
 8005f66:	dcf0      	bgt.n	8005f4a <_printf_i+0x1ee>
 8005f68:	e7e9      	b.n	8005f3e <_printf_i+0x1e2>
 8005f6a:	2500      	movs	r5, #0
 8005f6c:	e7f7      	b.n	8005f5e <_printf_i+0x202>
 8005f6e:	46c0      	nop			@ (mov r8, r8)
 8005f70:	08006585 	.word	0x08006585
 8005f74:	08006596 	.word	0x08006596

08005f78 <memmove>:
 8005f78:	b510      	push	{r4, lr}
 8005f7a:	4288      	cmp	r0, r1
 8005f7c:	d806      	bhi.n	8005f8c <memmove+0x14>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d008      	beq.n	8005f96 <memmove+0x1e>
 8005f84:	5ccc      	ldrb	r4, [r1, r3]
 8005f86:	54c4      	strb	r4, [r0, r3]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	e7f9      	b.n	8005f80 <memmove+0x8>
 8005f8c:	188b      	adds	r3, r1, r2
 8005f8e:	4298      	cmp	r0, r3
 8005f90:	d2f5      	bcs.n	8005f7e <memmove+0x6>
 8005f92:	3a01      	subs	r2, #1
 8005f94:	d200      	bcs.n	8005f98 <memmove+0x20>
 8005f96:	bd10      	pop	{r4, pc}
 8005f98:	5c8b      	ldrb	r3, [r1, r2]
 8005f9a:	5483      	strb	r3, [r0, r2]
 8005f9c:	e7f9      	b.n	8005f92 <memmove+0x1a>
	...

08005fa0 <_sbrk_r>:
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	b570      	push	{r4, r5, r6, lr}
 8005fa4:	4d06      	ldr	r5, [pc, #24]	@ (8005fc0 <_sbrk_r+0x20>)
 8005fa6:	0004      	movs	r4, r0
 8005fa8:	0008      	movs	r0, r1
 8005faa:	602b      	str	r3, [r5, #0]
 8005fac:	f7fc ff9a 	bl	8002ee4 <_sbrk>
 8005fb0:	1c43      	adds	r3, r0, #1
 8005fb2:	d103      	bne.n	8005fbc <_sbrk_r+0x1c>
 8005fb4:	682b      	ldr	r3, [r5, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d000      	beq.n	8005fbc <_sbrk_r+0x1c>
 8005fba:	6023      	str	r3, [r4, #0]
 8005fbc:	bd70      	pop	{r4, r5, r6, pc}
 8005fbe:	46c0      	nop			@ (mov r8, r8)
 8005fc0:	20000394 	.word	0x20000394

08005fc4 <memchr>:
 8005fc4:	b2c9      	uxtb	r1, r1
 8005fc6:	1882      	adds	r2, r0, r2
 8005fc8:	4290      	cmp	r0, r2
 8005fca:	d101      	bne.n	8005fd0 <memchr+0xc>
 8005fcc:	2000      	movs	r0, #0
 8005fce:	4770      	bx	lr
 8005fd0:	7803      	ldrb	r3, [r0, #0]
 8005fd2:	428b      	cmp	r3, r1
 8005fd4:	d0fb      	beq.n	8005fce <memchr+0xa>
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	e7f6      	b.n	8005fc8 <memchr+0x4>

08005fda <memcpy>:
 8005fda:	2300      	movs	r3, #0
 8005fdc:	b510      	push	{r4, lr}
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d100      	bne.n	8005fe4 <memcpy+0xa>
 8005fe2:	bd10      	pop	{r4, pc}
 8005fe4:	5ccc      	ldrb	r4, [r1, r3]
 8005fe6:	54c4      	strb	r4, [r0, r3]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	e7f8      	b.n	8005fde <memcpy+0x4>

08005fec <_realloc_r>:
 8005fec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fee:	0006      	movs	r6, r0
 8005ff0:	000c      	movs	r4, r1
 8005ff2:	0015      	movs	r5, r2
 8005ff4:	2900      	cmp	r1, #0
 8005ff6:	d105      	bne.n	8006004 <_realloc_r+0x18>
 8005ff8:	0011      	movs	r1, r2
 8005ffa:	f7ff fc51 	bl	80058a0 <_malloc_r>
 8005ffe:	0004      	movs	r4, r0
 8006000:	0020      	movs	r0, r4
 8006002:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006004:	2a00      	cmp	r2, #0
 8006006:	d103      	bne.n	8006010 <_realloc_r+0x24>
 8006008:	f7ff fbde 	bl	80057c8 <_free_r>
 800600c:	2400      	movs	r4, #0
 800600e:	e7f7      	b.n	8006000 <_realloc_r+0x14>
 8006010:	f000 f81b 	bl	800604a <_malloc_usable_size_r>
 8006014:	0007      	movs	r7, r0
 8006016:	4285      	cmp	r5, r0
 8006018:	d802      	bhi.n	8006020 <_realloc_r+0x34>
 800601a:	0843      	lsrs	r3, r0, #1
 800601c:	42ab      	cmp	r3, r5
 800601e:	d3ef      	bcc.n	8006000 <_realloc_r+0x14>
 8006020:	0029      	movs	r1, r5
 8006022:	0030      	movs	r0, r6
 8006024:	f7ff fc3c 	bl	80058a0 <_malloc_r>
 8006028:	9001      	str	r0, [sp, #4]
 800602a:	2800      	cmp	r0, #0
 800602c:	d0ee      	beq.n	800600c <_realloc_r+0x20>
 800602e:	002a      	movs	r2, r5
 8006030:	42bd      	cmp	r5, r7
 8006032:	d900      	bls.n	8006036 <_realloc_r+0x4a>
 8006034:	003a      	movs	r2, r7
 8006036:	0021      	movs	r1, r4
 8006038:	9801      	ldr	r0, [sp, #4]
 800603a:	f7ff ffce 	bl	8005fda <memcpy>
 800603e:	0021      	movs	r1, r4
 8006040:	0030      	movs	r0, r6
 8006042:	f7ff fbc1 	bl	80057c8 <_free_r>
 8006046:	9c01      	ldr	r4, [sp, #4]
 8006048:	e7da      	b.n	8006000 <_realloc_r+0x14>

0800604a <_malloc_usable_size_r>:
 800604a:	1f0b      	subs	r3, r1, #4
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	1f18      	subs	r0, r3, #4
 8006050:	2b00      	cmp	r3, #0
 8006052:	da01      	bge.n	8006058 <_malloc_usable_size_r+0xe>
 8006054:	580b      	ldr	r3, [r1, r0]
 8006056:	18c0      	adds	r0, r0, r3
 8006058:	4770      	bx	lr
	...

0800605c <log>:
 800605c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605e:	0004      	movs	r4, r0
 8006060:	000d      	movs	r5, r1
 8006062:	f000 f837 	bl	80060d4 <__ieee754_log>
 8006066:	0022      	movs	r2, r4
 8006068:	0006      	movs	r6, r0
 800606a:	000f      	movs	r7, r1
 800606c:	002b      	movs	r3, r5
 800606e:	0020      	movs	r0, r4
 8006070:	0029      	movs	r1, r5
 8006072:	f7fc fa57 	bl	8002524 <__aeabi_dcmpun>
 8006076:	2800      	cmp	r0, #0
 8006078:	d115      	bne.n	80060a6 <log+0x4a>
 800607a:	2200      	movs	r2, #0
 800607c:	2300      	movs	r3, #0
 800607e:	0020      	movs	r0, r4
 8006080:	0029      	movs	r1, r5
 8006082:	f7fa f909 	bl	8000298 <__aeabi_dcmpgt>
 8006086:	2800      	cmp	r0, #0
 8006088:	d10d      	bne.n	80060a6 <log+0x4a>
 800608a:	2200      	movs	r2, #0
 800608c:	2300      	movs	r3, #0
 800608e:	0020      	movs	r0, r4
 8006090:	0029      	movs	r1, r5
 8006092:	f7fa f8e7 	bl	8000264 <__aeabi_dcmpeq>
 8006096:	2800      	cmp	r0, #0
 8006098:	d008      	beq.n	80060ac <log+0x50>
 800609a:	f7ff fb69 	bl	8005770 <__errno>
 800609e:	2322      	movs	r3, #34	@ 0x22
 80060a0:	2600      	movs	r6, #0
 80060a2:	4f07      	ldr	r7, [pc, #28]	@ (80060c0 <log+0x64>)
 80060a4:	6003      	str	r3, [r0, #0]
 80060a6:	0030      	movs	r0, r6
 80060a8:	0039      	movs	r1, r7
 80060aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ac:	f7ff fb60 	bl	8005770 <__errno>
 80060b0:	2321      	movs	r3, #33	@ 0x21
 80060b2:	6003      	str	r3, [r0, #0]
 80060b4:	4803      	ldr	r0, [pc, #12]	@ (80060c4 <log+0x68>)
 80060b6:	f000 f807 	bl	80060c8 <nan>
 80060ba:	0006      	movs	r6, r0
 80060bc:	000f      	movs	r7, r1
 80060be:	e7f2      	b.n	80060a6 <log+0x4a>
 80060c0:	fff00000 	.word	0xfff00000
 80060c4:	08006579 	.word	0x08006579

080060c8 <nan>:
 80060c8:	2000      	movs	r0, #0
 80060ca:	4901      	ldr	r1, [pc, #4]	@ (80060d0 <nan+0x8>)
 80060cc:	4770      	bx	lr
 80060ce:	46c0      	nop			@ (mov r8, r8)
 80060d0:	7ff80000 	.word	0x7ff80000

080060d4 <__ieee754_log>:
 80060d4:	2380      	movs	r3, #128	@ 0x80
 80060d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060d8:	035b      	lsls	r3, r3, #13
 80060da:	000e      	movs	r6, r1
 80060dc:	b08d      	sub	sp, #52	@ 0x34
 80060de:	4299      	cmp	r1, r3
 80060e0:	da23      	bge.n	800612a <__ieee754_log+0x56>
 80060e2:	004b      	lsls	r3, r1, #1
 80060e4:	085b      	lsrs	r3, r3, #1
 80060e6:	4303      	orrs	r3, r0
 80060e8:	d107      	bne.n	80060fa <__ieee754_log+0x26>
 80060ea:	2200      	movs	r2, #0
 80060ec:	2300      	movs	r3, #0
 80060ee:	2000      	movs	r0, #0
 80060f0:	49b4      	ldr	r1, [pc, #720]	@ (80063c4 <__ieee754_log+0x2f0>)
 80060f2:	f7fa ff6f 	bl	8000fd4 <__aeabi_ddiv>
 80060f6:	b00d      	add	sp, #52	@ 0x34
 80060f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060fa:	2900      	cmp	r1, #0
 80060fc:	da06      	bge.n	800610c <__ieee754_log+0x38>
 80060fe:	0002      	movs	r2, r0
 8006100:	000b      	movs	r3, r1
 8006102:	f7fb fe73 	bl	8001dec <__aeabi_dsub>
 8006106:	2200      	movs	r2, #0
 8006108:	2300      	movs	r3, #0
 800610a:	e7f2      	b.n	80060f2 <__ieee754_log+0x1e>
 800610c:	4bae      	ldr	r3, [pc, #696]	@ (80063c8 <__ieee754_log+0x2f4>)
 800610e:	2200      	movs	r2, #0
 8006110:	f7fb fba4 	bl	800185c <__aeabi_dmul>
 8006114:	2336      	movs	r3, #54	@ 0x36
 8006116:	000e      	movs	r6, r1
 8006118:	425b      	negs	r3, r3
 800611a:	4aac      	ldr	r2, [pc, #688]	@ (80063cc <__ieee754_log+0x2f8>)
 800611c:	4296      	cmp	r6, r2
 800611e:	dd06      	ble.n	800612e <__ieee754_log+0x5a>
 8006120:	0002      	movs	r2, r0
 8006122:	000b      	movs	r3, r1
 8006124:	f7fa fbf2 	bl	800090c <__aeabi_dadd>
 8006128:	e7e5      	b.n	80060f6 <__ieee754_log+0x22>
 800612a:	2300      	movs	r3, #0
 800612c:	e7f5      	b.n	800611a <__ieee754_log+0x46>
 800612e:	4ca8      	ldr	r4, [pc, #672]	@ (80063d0 <__ieee754_log+0x2fc>)
 8006130:	1532      	asrs	r2, r6, #20
 8006132:	1912      	adds	r2, r2, r4
 8006134:	0336      	lsls	r6, r6, #12
 8006136:	4ca7      	ldr	r4, [pc, #668]	@ (80063d4 <__ieee754_log+0x300>)
 8006138:	18d2      	adds	r2, r2, r3
 800613a:	0b33      	lsrs	r3, r6, #12
 800613c:	9302      	str	r3, [sp, #8]
 800613e:	191b      	adds	r3, r3, r4
 8006140:	2480      	movs	r4, #128	@ 0x80
 8006142:	0364      	lsls	r4, r4, #13
 8006144:	4023      	ands	r3, r4
 8006146:	4ca4      	ldr	r4, [pc, #656]	@ (80063d8 <__ieee754_log+0x304>)
 8006148:	9d02      	ldr	r5, [sp, #8]
 800614a:	405c      	eors	r4, r3
 800614c:	151b      	asrs	r3, r3, #20
 800614e:	189b      	adds	r3, r3, r2
 8006150:	4325      	orrs	r5, r4
 8006152:	2200      	movs	r2, #0
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	0029      	movs	r1, r5
 8006158:	4b9f      	ldr	r3, [pc, #636]	@ (80063d8 <__ieee754_log+0x304>)
 800615a:	f7fb fe47 	bl	8001dec <__aeabi_dsub>
 800615e:	9b02      	ldr	r3, [sp, #8]
 8006160:	0006      	movs	r6, r0
 8006162:	3302      	adds	r3, #2
 8006164:	031b      	lsls	r3, r3, #12
 8006166:	000f      	movs	r7, r1
 8006168:	2200      	movs	r2, #0
 800616a:	0b1b      	lsrs	r3, r3, #12
 800616c:	2b02      	cmp	r3, #2
 800616e:	dc64      	bgt.n	800623a <__ieee754_log+0x166>
 8006170:	2300      	movs	r3, #0
 8006172:	f7fa f877 	bl	8000264 <__aeabi_dcmpeq>
 8006176:	2800      	cmp	r0, #0
 8006178:	d019      	beq.n	80061ae <__ieee754_log+0xda>
 800617a:	9b00      	ldr	r3, [sp, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d100      	bne.n	8006182 <__ieee754_log+0xae>
 8006180:	e11c      	b.n	80063bc <__ieee754_log+0x2e8>
 8006182:	0018      	movs	r0, r3
 8006184:	f7fc f9f0 	bl	8002568 <__aeabi_i2d>
 8006188:	4a94      	ldr	r2, [pc, #592]	@ (80063dc <__ieee754_log+0x308>)
 800618a:	4b95      	ldr	r3, [pc, #596]	@ (80063e0 <__ieee754_log+0x30c>)
 800618c:	0004      	movs	r4, r0
 800618e:	000d      	movs	r5, r1
 8006190:	f7fb fb64 	bl	800185c <__aeabi_dmul>
 8006194:	4a93      	ldr	r2, [pc, #588]	@ (80063e4 <__ieee754_log+0x310>)
 8006196:	0006      	movs	r6, r0
 8006198:	000f      	movs	r7, r1
 800619a:	4b93      	ldr	r3, [pc, #588]	@ (80063e8 <__ieee754_log+0x314>)
 800619c:	0020      	movs	r0, r4
 800619e:	0029      	movs	r1, r5
 80061a0:	f7fb fb5c 	bl	800185c <__aeabi_dmul>
 80061a4:	0002      	movs	r2, r0
 80061a6:	000b      	movs	r3, r1
 80061a8:	0030      	movs	r0, r6
 80061aa:	0039      	movs	r1, r7
 80061ac:	e7ba      	b.n	8006124 <__ieee754_log+0x50>
 80061ae:	4a8f      	ldr	r2, [pc, #572]	@ (80063ec <__ieee754_log+0x318>)
 80061b0:	4b8f      	ldr	r3, [pc, #572]	@ (80063f0 <__ieee754_log+0x31c>)
 80061b2:	0030      	movs	r0, r6
 80061b4:	0039      	movs	r1, r7
 80061b6:	f7fb fb51 	bl	800185c <__aeabi_dmul>
 80061ba:	0002      	movs	r2, r0
 80061bc:	000b      	movs	r3, r1
 80061be:	2000      	movs	r0, #0
 80061c0:	498c      	ldr	r1, [pc, #560]	@ (80063f4 <__ieee754_log+0x320>)
 80061c2:	f7fb fe13 	bl	8001dec <__aeabi_dsub>
 80061c6:	0032      	movs	r2, r6
 80061c8:	0004      	movs	r4, r0
 80061ca:	000d      	movs	r5, r1
 80061cc:	003b      	movs	r3, r7
 80061ce:	0030      	movs	r0, r6
 80061d0:	0039      	movs	r1, r7
 80061d2:	f7fb fb43 	bl	800185c <__aeabi_dmul>
 80061d6:	000b      	movs	r3, r1
 80061d8:	0002      	movs	r2, r0
 80061da:	0029      	movs	r1, r5
 80061dc:	0020      	movs	r0, r4
 80061de:	f7fb fb3d 	bl	800185c <__aeabi_dmul>
 80061e2:	9b00      	ldr	r3, [sp, #0]
 80061e4:	9002      	str	r0, [sp, #8]
 80061e6:	9103      	str	r1, [sp, #12]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d106      	bne.n	80061fa <__ieee754_log+0x126>
 80061ec:	0002      	movs	r2, r0
 80061ee:	000b      	movs	r3, r1
 80061f0:	0030      	movs	r0, r6
 80061f2:	0039      	movs	r1, r7
 80061f4:	f7fb fdfa 	bl	8001dec <__aeabi_dsub>
 80061f8:	e77d      	b.n	80060f6 <__ieee754_log+0x22>
 80061fa:	9800      	ldr	r0, [sp, #0]
 80061fc:	f7fc f9b4 	bl	8002568 <__aeabi_i2d>
 8006200:	4a76      	ldr	r2, [pc, #472]	@ (80063dc <__ieee754_log+0x308>)
 8006202:	4b77      	ldr	r3, [pc, #476]	@ (80063e0 <__ieee754_log+0x30c>)
 8006204:	0004      	movs	r4, r0
 8006206:	000d      	movs	r5, r1
 8006208:	f7fb fb28 	bl	800185c <__aeabi_dmul>
 800620c:	4a75      	ldr	r2, [pc, #468]	@ (80063e4 <__ieee754_log+0x310>)
 800620e:	9000      	str	r0, [sp, #0]
 8006210:	9101      	str	r1, [sp, #4]
 8006212:	4b75      	ldr	r3, [pc, #468]	@ (80063e8 <__ieee754_log+0x314>)
 8006214:	0020      	movs	r0, r4
 8006216:	0029      	movs	r1, r5
 8006218:	f7fb fb20 	bl	800185c <__aeabi_dmul>
 800621c:	0002      	movs	r2, r0
 800621e:	000b      	movs	r3, r1
 8006220:	9802      	ldr	r0, [sp, #8]
 8006222:	9903      	ldr	r1, [sp, #12]
 8006224:	f7fb fde2 	bl	8001dec <__aeabi_dsub>
 8006228:	0032      	movs	r2, r6
 800622a:	003b      	movs	r3, r7
 800622c:	f7fb fdde 	bl	8001dec <__aeabi_dsub>
 8006230:	0002      	movs	r2, r0
 8006232:	000b      	movs	r3, r1
 8006234:	9800      	ldr	r0, [sp, #0]
 8006236:	9901      	ldr	r1, [sp, #4]
 8006238:	e7dc      	b.n	80061f4 <__ieee754_log+0x120>
 800623a:	2380      	movs	r3, #128	@ 0x80
 800623c:	05db      	lsls	r3, r3, #23
 800623e:	f7fa fb65 	bl	800090c <__aeabi_dadd>
 8006242:	0002      	movs	r2, r0
 8006244:	000b      	movs	r3, r1
 8006246:	0030      	movs	r0, r6
 8006248:	0039      	movs	r1, r7
 800624a:	f7fa fec3 	bl	8000fd4 <__aeabi_ddiv>
 800624e:	9004      	str	r0, [sp, #16]
 8006250:	9105      	str	r1, [sp, #20]
 8006252:	9800      	ldr	r0, [sp, #0]
 8006254:	f7fc f988 	bl	8002568 <__aeabi_i2d>
 8006258:	9a04      	ldr	r2, [sp, #16]
 800625a:	9b05      	ldr	r3, [sp, #20]
 800625c:	9006      	str	r0, [sp, #24]
 800625e:	9107      	str	r1, [sp, #28]
 8006260:	0010      	movs	r0, r2
 8006262:	0019      	movs	r1, r3
 8006264:	f7fb fafa 	bl	800185c <__aeabi_dmul>
 8006268:	4a63      	ldr	r2, [pc, #396]	@ (80063f8 <__ieee754_log+0x324>)
 800626a:	9b02      	ldr	r3, [sp, #8]
 800626c:	4694      	mov	ip, r2
 800626e:	4463      	add	r3, ip
 8006270:	0002      	movs	r2, r0
 8006272:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006274:	000b      	movs	r3, r1
 8006276:	9008      	str	r0, [sp, #32]
 8006278:	9109      	str	r1, [sp, #36]	@ 0x24
 800627a:	f7fb faef 	bl	800185c <__aeabi_dmul>
 800627e:	0004      	movs	r4, r0
 8006280:	000d      	movs	r5, r1
 8006282:	4a5e      	ldr	r2, [pc, #376]	@ (80063fc <__ieee754_log+0x328>)
 8006284:	4b5e      	ldr	r3, [pc, #376]	@ (8006400 <__ieee754_log+0x32c>)
 8006286:	f7fb fae9 	bl	800185c <__aeabi_dmul>
 800628a:	4a5e      	ldr	r2, [pc, #376]	@ (8006404 <__ieee754_log+0x330>)
 800628c:	4b5e      	ldr	r3, [pc, #376]	@ (8006408 <__ieee754_log+0x334>)
 800628e:	f7fa fb3d 	bl	800090c <__aeabi_dadd>
 8006292:	0022      	movs	r2, r4
 8006294:	002b      	movs	r3, r5
 8006296:	f7fb fae1 	bl	800185c <__aeabi_dmul>
 800629a:	4a5c      	ldr	r2, [pc, #368]	@ (800640c <__ieee754_log+0x338>)
 800629c:	4b5c      	ldr	r3, [pc, #368]	@ (8006410 <__ieee754_log+0x33c>)
 800629e:	f7fa fb35 	bl	800090c <__aeabi_dadd>
 80062a2:	0022      	movs	r2, r4
 80062a4:	002b      	movs	r3, r5
 80062a6:	f7fb fad9 	bl	800185c <__aeabi_dmul>
 80062aa:	4a5a      	ldr	r2, [pc, #360]	@ (8006414 <__ieee754_log+0x340>)
 80062ac:	4b5a      	ldr	r3, [pc, #360]	@ (8006418 <__ieee754_log+0x344>)
 80062ae:	f7fa fb2d 	bl	800090c <__aeabi_dadd>
 80062b2:	9a08      	ldr	r2, [sp, #32]
 80062b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062b6:	f7fb fad1 	bl	800185c <__aeabi_dmul>
 80062ba:	4a58      	ldr	r2, [pc, #352]	@ (800641c <__ieee754_log+0x348>)
 80062bc:	9008      	str	r0, [sp, #32]
 80062be:	9109      	str	r1, [sp, #36]	@ 0x24
 80062c0:	4b57      	ldr	r3, [pc, #348]	@ (8006420 <__ieee754_log+0x34c>)
 80062c2:	0020      	movs	r0, r4
 80062c4:	0029      	movs	r1, r5
 80062c6:	f7fb fac9 	bl	800185c <__aeabi_dmul>
 80062ca:	4a56      	ldr	r2, [pc, #344]	@ (8006424 <__ieee754_log+0x350>)
 80062cc:	4b56      	ldr	r3, [pc, #344]	@ (8006428 <__ieee754_log+0x354>)
 80062ce:	f7fa fb1d 	bl	800090c <__aeabi_dadd>
 80062d2:	0022      	movs	r2, r4
 80062d4:	002b      	movs	r3, r5
 80062d6:	f7fb fac1 	bl	800185c <__aeabi_dmul>
 80062da:	4a54      	ldr	r2, [pc, #336]	@ (800642c <__ieee754_log+0x358>)
 80062dc:	4b54      	ldr	r3, [pc, #336]	@ (8006430 <__ieee754_log+0x35c>)
 80062de:	f7fa fb15 	bl	800090c <__aeabi_dadd>
 80062e2:	0022      	movs	r2, r4
 80062e4:	002b      	movs	r3, r5
 80062e6:	f7fb fab9 	bl	800185c <__aeabi_dmul>
 80062ea:	0002      	movs	r2, r0
 80062ec:	000b      	movs	r3, r1
 80062ee:	9808      	ldr	r0, [sp, #32]
 80062f0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80062f2:	f7fa fb0b 	bl	800090c <__aeabi_dadd>
 80062f6:	9a02      	ldr	r2, [sp, #8]
 80062f8:	4b4e      	ldr	r3, [pc, #312]	@ (8006434 <__ieee754_log+0x360>)
 80062fa:	0004      	movs	r4, r0
 80062fc:	1a9b      	subs	r3, r3, r2
 80062fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006300:	000d      	movs	r5, r1
 8006302:	4313      	orrs	r3, r2
 8006304:	2b00      	cmp	r3, #0
 8006306:	dd34      	ble.n	8006372 <__ieee754_log+0x29e>
 8006308:	2200      	movs	r2, #0
 800630a:	4b3a      	ldr	r3, [pc, #232]	@ (80063f4 <__ieee754_log+0x320>)
 800630c:	0030      	movs	r0, r6
 800630e:	0039      	movs	r1, r7
 8006310:	f7fb faa4 	bl	800185c <__aeabi_dmul>
 8006314:	0032      	movs	r2, r6
 8006316:	003b      	movs	r3, r7
 8006318:	f7fb faa0 	bl	800185c <__aeabi_dmul>
 800631c:	0002      	movs	r2, r0
 800631e:	000b      	movs	r3, r1
 8006320:	9002      	str	r0, [sp, #8]
 8006322:	9103      	str	r1, [sp, #12]
 8006324:	0020      	movs	r0, r4
 8006326:	0029      	movs	r1, r5
 8006328:	f7fa faf0 	bl	800090c <__aeabi_dadd>
 800632c:	9a04      	ldr	r2, [sp, #16]
 800632e:	9b05      	ldr	r3, [sp, #20]
 8006330:	f7fb fa94 	bl	800185c <__aeabi_dmul>
 8006334:	9b00      	ldr	r3, [sp, #0]
 8006336:	0004      	movs	r4, r0
 8006338:	000d      	movs	r5, r1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d106      	bne.n	800634c <__ieee754_log+0x278>
 800633e:	0002      	movs	r2, r0
 8006340:	000b      	movs	r3, r1
 8006342:	9802      	ldr	r0, [sp, #8]
 8006344:	9903      	ldr	r1, [sp, #12]
 8006346:	f7fb fd51 	bl	8001dec <__aeabi_dsub>
 800634a:	e74f      	b.n	80061ec <__ieee754_log+0x118>
 800634c:	4a23      	ldr	r2, [pc, #140]	@ (80063dc <__ieee754_log+0x308>)
 800634e:	4b24      	ldr	r3, [pc, #144]	@ (80063e0 <__ieee754_log+0x30c>)
 8006350:	9806      	ldr	r0, [sp, #24]
 8006352:	9907      	ldr	r1, [sp, #28]
 8006354:	f7fb fa82 	bl	800185c <__aeabi_dmul>
 8006358:	4a22      	ldr	r2, [pc, #136]	@ (80063e4 <__ieee754_log+0x310>)
 800635a:	9000      	str	r0, [sp, #0]
 800635c:	9101      	str	r1, [sp, #4]
 800635e:	9806      	ldr	r0, [sp, #24]
 8006360:	9907      	ldr	r1, [sp, #28]
 8006362:	4b21      	ldr	r3, [pc, #132]	@ (80063e8 <__ieee754_log+0x314>)
 8006364:	f7fb fa7a 	bl	800185c <__aeabi_dmul>
 8006368:	0022      	movs	r2, r4
 800636a:	002b      	movs	r3, r5
 800636c:	f7fa face 	bl	800090c <__aeabi_dadd>
 8006370:	e754      	b.n	800621c <__ieee754_log+0x148>
 8006372:	0002      	movs	r2, r0
 8006374:	000b      	movs	r3, r1
 8006376:	0030      	movs	r0, r6
 8006378:	0039      	movs	r1, r7
 800637a:	f7fb fd37 	bl	8001dec <__aeabi_dsub>
 800637e:	9a04      	ldr	r2, [sp, #16]
 8006380:	9b05      	ldr	r3, [sp, #20]
 8006382:	f7fb fa6b 	bl	800185c <__aeabi_dmul>
 8006386:	9b00      	ldr	r3, [sp, #0]
 8006388:	0004      	movs	r4, r0
 800638a:	000d      	movs	r5, r1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d102      	bne.n	8006396 <__ieee754_log+0x2c2>
 8006390:	0002      	movs	r2, r0
 8006392:	000b      	movs	r3, r1
 8006394:	e72c      	b.n	80061f0 <__ieee754_log+0x11c>
 8006396:	4a11      	ldr	r2, [pc, #68]	@ (80063dc <__ieee754_log+0x308>)
 8006398:	4b11      	ldr	r3, [pc, #68]	@ (80063e0 <__ieee754_log+0x30c>)
 800639a:	9806      	ldr	r0, [sp, #24]
 800639c:	9907      	ldr	r1, [sp, #28]
 800639e:	f7fb fa5d 	bl	800185c <__aeabi_dmul>
 80063a2:	4a10      	ldr	r2, [pc, #64]	@ (80063e4 <__ieee754_log+0x310>)
 80063a4:	9000      	str	r0, [sp, #0]
 80063a6:	9101      	str	r1, [sp, #4]
 80063a8:	9806      	ldr	r0, [sp, #24]
 80063aa:	9907      	ldr	r1, [sp, #28]
 80063ac:	4b0e      	ldr	r3, [pc, #56]	@ (80063e8 <__ieee754_log+0x314>)
 80063ae:	f7fb fa55 	bl	800185c <__aeabi_dmul>
 80063b2:	0002      	movs	r2, r0
 80063b4:	000b      	movs	r3, r1
 80063b6:	0020      	movs	r0, r4
 80063b8:	0029      	movs	r1, r5
 80063ba:	e733      	b.n	8006224 <__ieee754_log+0x150>
 80063bc:	2000      	movs	r0, #0
 80063be:	2100      	movs	r1, #0
 80063c0:	e699      	b.n	80060f6 <__ieee754_log+0x22>
 80063c2:	46c0      	nop			@ (mov r8, r8)
 80063c4:	c3500000 	.word	0xc3500000
 80063c8:	43500000 	.word	0x43500000
 80063cc:	7fefffff 	.word	0x7fefffff
 80063d0:	fffffc01 	.word	0xfffffc01
 80063d4:	00095f64 	.word	0x00095f64
 80063d8:	3ff00000 	.word	0x3ff00000
 80063dc:	fee00000 	.word	0xfee00000
 80063e0:	3fe62e42 	.word	0x3fe62e42
 80063e4:	35793c76 	.word	0x35793c76
 80063e8:	3dea39ef 	.word	0x3dea39ef
 80063ec:	55555555 	.word	0x55555555
 80063f0:	3fd55555 	.word	0x3fd55555
 80063f4:	3fe00000 	.word	0x3fe00000
 80063f8:	fff9eb86 	.word	0xfff9eb86
 80063fc:	df3e5244 	.word	0xdf3e5244
 8006400:	3fc2f112 	.word	0x3fc2f112
 8006404:	96cb03de 	.word	0x96cb03de
 8006408:	3fc74664 	.word	0x3fc74664
 800640c:	94229359 	.word	0x94229359
 8006410:	3fd24924 	.word	0x3fd24924
 8006414:	55555593 	.word	0x55555593
 8006418:	3fe55555 	.word	0x3fe55555
 800641c:	d078c69f 	.word	0xd078c69f
 8006420:	3fc39a09 	.word	0x3fc39a09
 8006424:	1d8e78af 	.word	0x1d8e78af
 8006428:	3fcc71c5 	.word	0x3fcc71c5
 800642c:	9997fa04 	.word	0x9997fa04
 8006430:	3fd99999 	.word	0x3fd99999
 8006434:	0006b851 	.word	0x0006b851

08006438 <_init>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	46c0      	nop			@ (mov r8, r8)
 800643c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643e:	bc08      	pop	{r3}
 8006440:	469e      	mov	lr, r3
 8006442:	4770      	bx	lr

08006444 <_fini>:
 8006444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006446:	46c0      	nop			@ (mov r8, r8)
 8006448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800644a:	bc08      	pop	{r3}
 800644c:	469e      	mov	lr, r3
 800644e:	4770      	bx	lr
