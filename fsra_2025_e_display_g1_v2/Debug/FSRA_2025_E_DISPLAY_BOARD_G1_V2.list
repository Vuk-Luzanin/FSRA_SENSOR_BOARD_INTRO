
FSRA_2025_E_DISPLAY_BOARD_G1_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000454c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800471c  0800471c  0000571c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047d4  080047d4  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080047d4  080047d4  000057d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047dc  080047dc  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047dc  080047dc  000057dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047e0  080047e0  000057e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080047e4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d8  2000005c  08004840  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000834  08004840  00006834  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e17c  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002250  00000000  00000000  00014208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00016458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c2  00000000  00000000  00016fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f30f  00000000  00000000  00017892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e292  00000000  00000000  00036ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bdcc3  00000000  00000000  00044e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102af6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034ec  00000000  00000000  00102b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00106028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004704 	.word	0x08004704

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004704 	.word	0x08004704

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <configureFilter>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
CAN_FilterTypeDef canfilterconfig;
  void configureFilter(){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	  	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80005b4:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <configureFilter+0x50>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	621a      	str	r2, [r3, #32]
	    canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 80005ba:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <configureFilter+0x50>)
 80005bc:	2212      	movs	r2, #18
 80005be:	615a      	str	r2, [r3, #20]
	    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <configureFilter+0x50>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
	    canfilterconfig.FilterIdHigh = 0x123<<5;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <configureFilter+0x50>)
 80005c8:	f242 4260 	movw	r2, #9312	@ 0x2460
 80005cc:	601a      	str	r2, [r3, #0]
	    canfilterconfig.FilterIdLow = 0;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <configureFilter+0x50>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	605a      	str	r2, [r3, #4]
	    canfilterconfig.FilterMaskIdHigh = 0x123<<5;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <configureFilter+0x50>)
 80005d6:	f242 4260 	movw	r2, #9312	@ 0x2460
 80005da:	609a      	str	r2, [r3, #8]
	    canfilterconfig.FilterMaskIdLow = 0x0000;
 80005dc:	4b08      	ldr	r3, [pc, #32]	@ (8000600 <configureFilter+0x50>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
	    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005e2:	4b07      	ldr	r3, [pc, #28]	@ (8000600 <configureFilter+0x50>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
	    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005e8:	4b05      	ldr	r3, [pc, #20]	@ (8000600 <configureFilter+0x50>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	61da      	str	r2, [r3, #28]
	    canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 80005ee:	4b04      	ldr	r3, [pc, #16]	@ (8000600 <configureFilter+0x50>)
 80005f0:	2214      	movs	r2, #20
 80005f2:	625a      	str	r2, [r3, #36]	@ 0x24

	    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80005f4:	4902      	ldr	r1, [pc, #8]	@ (8000600 <configureFilter+0x50>)
 80005f6:	4803      	ldr	r0, [pc, #12]	@ (8000604 <configureFilter+0x54>)
 80005f8:	f000 fdd6 	bl	80011a8 <HAL_CAN_ConfigFilter>
  }
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200005cc 	.word	0x200005cc
 8000604:	20000078 	.word	0x20000078

08000608 <UART_Print>:
  int datacheck = 0;
  char buffer[200];



  void UART_Print(char *c){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	  sprintf(buffer, c);
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	480b      	ldr	r0, [pc, #44]	@ (8000640 <UART_Print+0x38>)
 8000614:	f003 fbd6 	bl	8003dc4 <siprintf>
	  HAL_UART_Transmit(&huart3, buffer, strlen(buffer), HAL_MAX_DELAY);
 8000618:	4809      	ldr	r0, [pc, #36]	@ (8000640 <UART_Print+0x38>)
 800061a:	f7ff fdf9 	bl	8000210 <strlen>
 800061e:	4603      	mov	r3, r0
 8000620:	b29a      	uxth	r2, r3
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	4906      	ldr	r1, [pc, #24]	@ (8000640 <UART_Print+0x38>)
 8000628:	4806      	ldr	r0, [pc, #24]	@ (8000644 <UART_Print+0x3c>)
 800062a:	f002 fd15 	bl	8003058 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800062e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000632:	f000 fc99 	bl	8000f68 <HAL_Delay>
  }
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	2000061c 	.word	0x2000061c
 8000644:	200000a0 	.word	0x200000a0

08000648 <HAL_CAN_RxFifo0MsgPendingCallback>:



  void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
  {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000650:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000652:	4a10      	ldr	r2, [pc, #64]	@ (8000694 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000654:	2100      	movs	r1, #0
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f000 feca 	bl	80013f0 <HAL_CAN_GetRxMessage>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d004      	beq.n	800066c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
    {
      UART_Print("CAN Error \n");
 8000662:	480d      	ldr	r0, [pc, #52]	@ (8000698 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000664:	f7ff ffd0 	bl	8000608 <UART_Print>
      Error_Handler();
 8000668:	f000 fa02 	bl	8000a70 <Error_Handler>
    }
    if ((RxHeader.StdId == 0x123))
 800066c:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f240 1223 	movw	r2, #291	@ 0x123
 8000674:	4293      	cmp	r3, r2
 8000676:	d102      	bne.n	800067e <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
    {
  	  datacheck = 1;
 8000678:	4b08      	ldr	r3, [pc, #32]	@ (800069c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800067a:	2201      	movs	r2, #1
 800067c:	601a      	str	r2, [r3, #0]
    }
    UART_Print((char*)RxHeader.StdId);
 800067e:	4b05      	ldr	r3, [pc, #20]	@ (8000694 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ffc0 	bl	8000608 <UART_Print>
  }
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000610 	.word	0x20000610
 8000694:	200005f4 	.word	0x200005f4
 8000698:	0800471c 	.word	0x0800471c
 800069c:	20000618 	.word	0x20000618

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f000 fbee 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f838 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f000 f932 	bl	8000914 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006b0:	f000 f8d6 	bl	8000860 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006b4:	f000 f8fe 	bl	80008b4 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 80006b8:	f000 f89c 	bl	80007f4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  configureFilter();
 80006bc:	f7ff ff78 	bl	80005b0 <configureFilter>


  if (HAL_CAN_Start(&hcan1) != HAL_OK){
 80006c0:	4811      	ldr	r0, [pc, #68]	@ (8000708 <main+0x68>)
 80006c2:	f000 fe51 	bl	8001368 <HAL_CAN_Start>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d005      	beq.n	80006d8 <main+0x38>
  	      Error_Handler();
 80006cc:	f000 f9d0 	bl	8000a70 <Error_Handler>
  	      UART_Print("CAN Error Starting \n");
 80006d0:	480e      	ldr	r0, [pc, #56]	@ (800070c <main+0x6c>)
 80006d2:	f7ff ff99 	bl	8000608 <UART_Print>
 80006d6:	e002      	b.n	80006de <main+0x3e>
  	  }
  else{
	  UART_Print("CAN Started \n");
 80006d8:	480d      	ldr	r0, [pc, #52]	@ (8000710 <main+0x70>)
 80006da:	f7ff ff95 	bl	8000608 <UART_Print>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80006de:	2102      	movs	r1, #2
 80006e0:	4809      	ldr	r0, [pc, #36]	@ (8000708 <main+0x68>)
 80006e2:	f000 ffa7 	bl	8001634 <HAL_CAN_ActivateNotification>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d005      	beq.n	80006f8 <main+0x58>
	{
	  Error_Handler();
 80006ec:	f000 f9c0 	bl	8000a70 <Error_Handler>
	  UART_Print("CAN Error Ints");
 80006f0:	4808      	ldr	r0, [pc, #32]	@ (8000714 <main+0x74>)
 80006f2:	f7ff ff89 	bl	8000608 <UART_Print>
 80006f6:	e002      	b.n	80006fe <main+0x5e>
	}
  else{
	  UART_Print("CAN Enabled Ints \n");
 80006f8:	4807      	ldr	r0, [pc, #28]	@ (8000718 <main+0x78>)
 80006fa:	f7ff ff85 	bl	8000608 <UART_Print>
//		  UART_Print("CAN Waiting \n");
//	  }
//	  if(datacheck == 1) {
//		  UART_Print("CAN Works \n");
//	  }
	  HAL_Delay(1000);
 80006fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000702:	f000 fc31 	bl	8000f68 <HAL_Delay>
 8000706:	e7fa      	b.n	80006fe <main+0x5e>
 8000708:	20000078 	.word	0x20000078
 800070c:	08004728 	.word	0x08004728
 8000710:	08004740 	.word	0x08004740
 8000714:	08004750 	.word	0x08004750
 8000718:	08004760 	.word	0x08004760

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	@ 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2234      	movs	r2, #52	@ 0x34
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f003 fb6a 	bl	8003e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	4b29      	ldr	r3, [pc, #164]	@ (80007ec <SystemClock_Config+0xd0>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000748:	4a28      	ldr	r2, [pc, #160]	@ (80007ec <SystemClock_Config+0xd0>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000750:	4b26      	ldr	r3, [pc, #152]	@ (80007ec <SystemClock_Config+0xd0>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	2300      	movs	r3, #0
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <SystemClock_Config+0xd4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a22      	ldr	r2, [pc, #136]	@ (80007f0 <SystemClock_Config+0xd4>)
 8000766:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <SystemClock_Config+0xd4>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000778:	2301      	movs	r3, #1
 800077a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800077c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000780:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800078a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800078c:	2308      	movs	r3, #8
 800078e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8000790:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000794:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000796:	2304      	movs	r3, #4
 8000798:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800079a:	2308      	movs	r3, #8
 800079c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800079e:	2302      	movs	r3, #2
 80007a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 f982 	bl	8002ab0 <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007b2:	f000 f95d 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	230f      	movs	r3, #15
 80007b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2302      	movs	r3, #2
 80007bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	2103      	movs	r1, #3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 fd7e 	bl	80022d4 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007de:	f000 f947 	bl	8000a70 <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	3750      	adds	r7, #80	@ 0x50
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007f8:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <MX_CAN1_Init+0x64>)
 80007fa:	4a18      	ldr	r2, [pc, #96]	@ (800085c <MX_CAN1_Init+0x68>)
 80007fc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007fe:	4b16      	ldr	r3, [pc, #88]	@ (8000858 <MX_CAN1_Init+0x64>)
 8000800:	2210      	movs	r2, #16
 8000802:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000804:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <MX_CAN1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800080a:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <MX_CAN1_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_CAN1_Init+0x64>)
 8000812:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000816:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_CAN1_Init+0x64>)
 800081a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800081e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000820:	4b0d      	ldr	r3, [pc, #52]	@ (8000858 <MX_CAN1_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_CAN1_Init+0x64>)
 8000828:	2201      	movs	r2, #1
 800082a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800082c:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <MX_CAN1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_CAN1_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <MX_CAN1_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_CAN1_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	@ (8000858 <MX_CAN1_Init+0x64>)
 8000846:	f000 fbb3 	bl	8000fb0 <HAL_CAN_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000850:	f000 f90e 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000078 	.word	0x20000078
 800085c:	40006400 	.word	0x40006400

08000860 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_USART3_UART_Init+0x4c>)
 8000866:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <MX_USART3_UART_Init+0x50>)
 8000868:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800086a:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <MX_USART3_UART_Init+0x4c>)
 800086c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000870:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_USART3_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_USART3_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <MX_USART3_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_USART3_UART_Init+0x4c>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <MX_USART3_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_USART3_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_USART3_UART_Init+0x4c>)
 8000898:	f002 fb8e 	bl	8002fb8 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008a2:	f000 f8e5 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200000a0 	.word	0x200000a0
 80008b0:	40004800 	.word	0x40004800

080008b4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008b8:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008c0:	4b13      	ldr	r3, [pc, #76]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008c2:	2206      	movs	r2, #6
 80008c4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008c6:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008c8:	2202      	movs	r2, #2
 80008ca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008cc:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008d4:	2202      	movs	r2, #2
 80008d6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008da:	2201      	movs	r2, #1
 80008dc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008de:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80008ea:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008f0:	4b07      	ldr	r3, [pc, #28]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008f6:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008fe:	f001 fbae 	bl	800205e <HAL_PCD_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8000908:	f000 f8b2 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200000e8 	.word	0x200000e8

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08c      	sub	sp, #48	@ 0x30
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
 800092e:	4b4c      	ldr	r3, [pc, #304]	@ (8000a60 <MX_GPIO_Init+0x14c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a4b      	ldr	r2, [pc, #300]	@ (8000a60 <MX_GPIO_Init+0x14c>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b49      	ldr	r3, [pc, #292]	@ (8000a60 <MX_GPIO_Init+0x14c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	4b45      	ldr	r3, [pc, #276]	@ (8000a60 <MX_GPIO_Init+0x14c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a44      	ldr	r2, [pc, #272]	@ (8000a60 <MX_GPIO_Init+0x14c>)
 8000950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b42      	ldr	r3, [pc, #264]	@ (8000a60 <MX_GPIO_Init+0x14c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b3e      	ldr	r3, [pc, #248]	@ (8000a60 <MX_GPIO_Init+0x14c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a60 <MX_GPIO_Init+0x14c>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b3b      	ldr	r3, [pc, #236]	@ (8000a60 <MX_GPIO_Init+0x14c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b37      	ldr	r3, [pc, #220]	@ (8000a60 <MX_GPIO_Init+0x14c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a36      	ldr	r2, [pc, #216]	@ (8000a60 <MX_GPIO_Init+0x14c>)
 8000988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b34      	ldr	r3, [pc, #208]	@ (8000a60 <MX_GPIO_Init+0x14c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	4b30      	ldr	r3, [pc, #192]	@ (8000a60 <MX_GPIO_Init+0x14c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a60 <MX_GPIO_Init+0x14c>)
 80009a4:	f043 0308 	orr.w	r3, r3, #8
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000a60 <MX_GPIO_Init+0x14c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0308 	and.w	r3, r3, #8
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b29      	ldr	r3, [pc, #164]	@ (8000a60 <MX_GPIO_Init+0x14c>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a28      	ldr	r2, [pc, #160]	@ (8000a60 <MX_GPIO_Init+0x14c>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b26      	ldr	r3, [pc, #152]	@ (8000a60 <MX_GPIO_Init+0x14c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009d8:	4822      	ldr	r0, [pc, #136]	@ (8000a64 <MX_GPIO_Init+0x150>)
 80009da:	f001 fb27 	bl	800202c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2140      	movs	r1, #64	@ 0x40
 80009e2:	4821      	ldr	r0, [pc, #132]	@ (8000a68 <MX_GPIO_Init+0x154>)
 80009e4:	f001 fb22 	bl	800202c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	481b      	ldr	r0, [pc, #108]	@ (8000a6c <MX_GPIO_Init+0x158>)
 8000a00:	f001 f980 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a04:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4811      	ldr	r0, [pc, #68]	@ (8000a64 <MX_GPIO_Init+0x150>)
 8000a1e:	f001 f971 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a22:	2340      	movs	r3, #64	@ 0x40
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	480b      	ldr	r0, [pc, #44]	@ (8000a68 <MX_GPIO_Init+0x154>)
 8000a3a:	f001 f963 	bl	8001d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a3e:	2380      	movs	r3, #128	@ 0x80
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <MX_GPIO_Init+0x154>)
 8000a52:	f001 f957 	bl	8001d04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a56:	bf00      	nop
 8000a58:	3730      	adds	r7, #48	@ 0x30
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020400 	.word	0x40020400
 8000a68:	40021800 	.word	0x40021800
 8000a6c:	40020800 	.word	0x40020800

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <Error_Handler+0x8>

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	4a08      	ldr	r2, [pc, #32]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800

08000acc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a25      	ldr	r2, [pc, #148]	@ (8000b80 <HAL_CAN_MspInit+0xb4>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d143      	bne.n	8000b76 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b24      	ldr	r3, [pc, #144]	@ (8000b84 <HAL_CAN_MspInit+0xb8>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af6:	4a23      	ldr	r2, [pc, #140]	@ (8000b84 <HAL_CAN_MspInit+0xb8>)
 8000af8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afe:	4b21      	ldr	r3, [pc, #132]	@ (8000b84 <HAL_CAN_MspInit+0xb8>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b84 <HAL_CAN_MspInit+0xb8>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a1c      	ldr	r2, [pc, #112]	@ (8000b84 <HAL_CAN_MspInit+0xb8>)
 8000b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b84 <HAL_CAN_MspInit+0xb8>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PG0     ------> CAN1_RX
    PG1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b26:	2301      	movs	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b36:	2309      	movs	r3, #9
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4811      	ldr	r0, [pc, #68]	@ (8000b88 <HAL_CAN_MspInit+0xbc>)
 8000b42:	f001 f8df 	bl	8001d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b46:	2302      	movs	r3, #2
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b56:	2309      	movs	r3, #9
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4809      	ldr	r0, [pc, #36]	@ (8000b88 <HAL_CAN_MspInit+0xbc>)
 8000b62:	f001 f8cf 	bl	8001d04 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2014      	movs	r0, #20
 8000b6c:	f001 f893 	bl	8001c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b70:	2014      	movs	r0, #20
 8000b72:	f001 f8ac 	bl	8001cce <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000b76:	bf00      	nop
 8000b78:	3728      	adds	r7, #40	@ 0x28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40006400 	.word	0x40006400
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40021800 	.word	0x40021800

08000b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	@ 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a19      	ldr	r2, [pc, #100]	@ (8000c10 <HAL_UART_MspInit+0x84>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d12c      	bne.n	8000c08 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b18      	ldr	r3, [pc, #96]	@ (8000c14 <HAL_UART_MspInit+0x88>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb6:	4a17      	ldr	r2, [pc, #92]	@ (8000c14 <HAL_UART_MspInit+0x88>)
 8000bb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bbe:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <HAL_UART_MspInit+0x88>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <HAL_UART_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a10      	ldr	r2, [pc, #64]	@ (8000c14 <HAL_UART_MspInit+0x88>)
 8000bd4:	f043 0308 	orr.w	r3, r3, #8
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <HAL_UART_MspInit+0x88>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0308 	and.w	r3, r3, #8
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000be6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <HAL_UART_MspInit+0x8c>)
 8000c04:	f001 f87e 	bl	8001d04 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000c08:	bf00      	nop
 8000c0a:	3728      	adds	r7, #40	@ 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40004800 	.word	0x40004800
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020c00 	.word	0x40020c00

08000c1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b098      	sub	sp, #96	@ 0x60
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	223c      	movs	r2, #60	@ 0x3c
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 f8e1 	bl	8003e04 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c4a:	d14d      	bne.n	8000ce8 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c4c:	2320      	movs	r3, #32
 8000c4e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000c50:	2300      	movs	r3, #0
 8000c52:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f001 fd5b 	bl	8002714 <HAL_RCCEx_PeriphCLKConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8000c64:	f7ff ff04 	bl	8000a70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	4b20      	ldr	r3, [pc, #128]	@ (8000cf0 <HAL_PCD_MspInit+0xd4>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c70:	4a1f      	ldr	r2, [pc, #124]	@ (8000cf0 <HAL_PCD_MspInit+0xd4>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c78:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf0 <HAL_PCD_MspInit+0xd4>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c84:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000c88:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c96:	230a      	movs	r3, #10
 8000c98:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4814      	ldr	r0, [pc, #80]	@ (8000cf4 <HAL_PCD_MspInit+0xd8>)
 8000ca2:	f001 f82f 	bl	8001d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ca6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cac:	2300      	movs	r3, #0
 8000cae:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480e      	ldr	r0, [pc, #56]	@ (8000cf4 <HAL_PCD_MspInit+0xd8>)
 8000cbc:	f001 f822 	bl	8001d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <HAL_PCD_MspInit+0xd4>)
 8000cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <HAL_PCD_MspInit+0xd4>)
 8000cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cca:	6353      	str	r3, [r2, #52]	@ 0x34
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <HAL_PCD_MspInit+0xd4>)
 8000cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd4:	4a06      	ldr	r2, [pc, #24]	@ (8000cf0 <HAL_PCD_MspInit+0xd4>)
 8000cd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cda:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cdc:	4b04      	ldr	r3, [pc, #16]	@ (8000cf0 <HAL_PCD_MspInit+0xd4>)
 8000cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000ce8:	bf00      	nop
 8000cea:	3760      	adds	r7, #96	@ 0x60
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <NMI_Handler+0x4>

08000d00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <HardFault_Handler+0x4>

08000d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <MemManage_Handler+0x4>

08000d10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4e:	f000 f8eb 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d5c:	480b      	ldr	r0, [pc, #44]	@ (8000d8c <CAN1_RX0_IRQHandler+0x34>)
 8000d5e:	f000 fc8f 	bl	8001680 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  UART_Print("Inttr \n");
 8000d62:	480b      	ldr	r0, [pc, #44]	@ (8000d90 <CAN1_RX0_IRQHandler+0x38>)
 8000d64:	f7ff fc50 	bl	8000608 <UART_Print>
		 if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 8000d68:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <CAN1_RX0_IRQHandler+0x3c>)
 8000d6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d98 <CAN1_RX0_IRQHandler+0x40>)
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4807      	ldr	r0, [pc, #28]	@ (8000d8c <CAN1_RX0_IRQHandler+0x34>)
 8000d70:	f000 fb3e 	bl	80013f0 <HAL_CAN_GetRxMessage>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d002      	beq.n	8000d80 <CAN1_RX0_IRQHandler+0x28>
			 Error_Handler();
 8000d7a:	f7ff fe79 	bl	8000a70 <Error_Handler>
		 else {
			 UART_Print("CAN Works \n");
		 }

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d7e:	e002      	b.n	8000d86 <CAN1_RX0_IRQHandler+0x2e>
			 UART_Print("CAN Works \n");
 8000d80:	4806      	ldr	r0, [pc, #24]	@ (8000d9c <CAN1_RX0_IRQHandler+0x44>)
 8000d82:	f7ff fc41 	bl	8000608 <UART_Print>
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000078 	.word	0x20000078
 8000d90:	08004774 	.word	0x08004774
 8000d94:	20000610 	.word	0x20000610
 8000d98:	200005f4 	.word	0x200005f4
 8000d9c:	0800477c 	.word	0x0800477c

08000da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da8:	4a14      	ldr	r2, [pc, #80]	@ (8000dfc <_sbrk+0x5c>)
 8000daa:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <_sbrk+0x60>)
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db4:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <_sbrk+0x64>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	@ (8000e08 <_sbrk+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc2:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d207      	bcs.n	8000de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd0:	f003 f820 	bl	8003e14 <__errno>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	e009      	b.n	8000df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de0:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de6:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <_sbrk+0x64>)
 8000df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20040000 	.word	0x20040000
 8000e00:	00000400 	.word	0x00000400
 8000e04:	200006e4 	.word	0x200006e4
 8000e08:	20000838 	.word	0x20000838

08000e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <SystemInit+0x20>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e16:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <SystemInit+0x20>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e34:	f7ff ffea 	bl	8000e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e38:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e3a:	490d      	ldr	r1, [pc, #52]	@ (8000e70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e50:	4c0a      	ldr	r4, [pc, #40]	@ (8000e7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f002 ffdf 	bl	8003e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e62:	f7ff fc1d 	bl	80006a0 <main>
  bx  lr    
 8000e66:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e68:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e74:	080047e4 	.word	0x080047e4
  ldr r2, =_sbss
 8000e78:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e7c:	20000834 	.word	0x20000834

08000e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <HAL_Init+0x40>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <HAL_Init+0x40>)
 8000e9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	@ (8000ec4 <HAL_Init+0x40>)
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 fee7 	bl	8001c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 f808 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff fde0 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023c00 	.word	0x40023c00

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 feff 	bl	8001cea <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 fec7 	bl	8001c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	@ (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	@ (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	200006e8 	.word	0x200006e8

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	@ (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200006e8 	.word	0x200006e8

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff ffee 	bl	8000f50 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffde 	bl	8000f50 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008

08000fb0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e0ed      	b.n	800119e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d102      	bne.n	8000fd4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff fd7c 	bl	8000acc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f042 0201 	orr.w	r2, r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fe4:	f7ff ffb4 	bl	8000f50 <HAL_GetTick>
 8000fe8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fea:	e012      	b.n	8001012 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fec:	f7ff ffb0 	bl	8000f50 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b0a      	cmp	r3, #10
 8000ff8:	d90b      	bls.n	8001012 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ffe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2205      	movs	r2, #5
 800100a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e0c5      	b.n	800119e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0e5      	beq.n	8000fec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0202 	bic.w	r2, r2, #2
 800102e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001030:	f7ff ff8e 	bl	8000f50 <HAL_GetTick>
 8001034:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001036:	e012      	b.n	800105e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001038:	f7ff ff8a 	bl	8000f50 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b0a      	cmp	r3, #10
 8001044:	d90b      	bls.n	800105e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2205      	movs	r2, #5
 8001056:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e09f      	b.n	800119e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1e5      	bne.n	8001038 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7e1b      	ldrb	r3, [r3, #24]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d108      	bne.n	8001086 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	e007      	b.n	8001096 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001094:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7e5b      	ldrb	r3, [r3, #25]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d108      	bne.n	80010b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	e007      	b.n	80010c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	7e9b      	ldrb	r3, [r3, #26]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d108      	bne.n	80010da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0220 	orr.w	r2, r2, #32
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	e007      	b.n	80010ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0220 	bic.w	r2, r2, #32
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7edb      	ldrb	r3, [r3, #27]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d108      	bne.n	8001104 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0210 	bic.w	r2, r2, #16
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	e007      	b.n	8001114 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0210 	orr.w	r2, r2, #16
 8001112:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	7f1b      	ldrb	r3, [r3, #28]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d108      	bne.n	800112e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f042 0208 	orr.w	r2, r2, #8
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	e007      	b.n	800113e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f022 0208 	bic.w	r2, r2, #8
 800113c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	7f5b      	ldrb	r3, [r3, #29]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d108      	bne.n	8001158 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f042 0204 	orr.w	r2, r2, #4
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	e007      	b.n	8001168 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 0204 	bic.w	r2, r2, #4
 8001166:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	431a      	orrs	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	431a      	orrs	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	ea42 0103 	orr.w	r1, r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	1e5a      	subs	r2, r3, #1
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	430a      	orrs	r2, r1
 800118c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011be:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80011c0:	7cfb      	ldrb	r3, [r7, #19]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d003      	beq.n	80011ce <HAL_CAN_ConfigFilter+0x26>
 80011c6:	7cfb      	ldrb	r3, [r7, #19]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	f040 80be 	bne.w	800134a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80011ce:	4b65      	ldr	r3, [pc, #404]	@ (8001364 <HAL_CAN_ConfigFilter+0x1bc>)
 80011d0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80011d8:	f043 0201 	orr.w	r2, r3, #1
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80011e8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	431a      	orrs	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	f003 031f 	and.w	r3, r3, #31
 800120e:	2201      	movs	r2, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43db      	mvns	r3, r3
 8001220:	401a      	ands	r2, r3
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	69db      	ldr	r3, [r3, #28]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d123      	bne.n	8001278 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	43db      	mvns	r3, r3
 800123a:	401a      	ands	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001252:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	3248      	adds	r2, #72	@ 0x48
 8001258:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800126c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800126e:	6979      	ldr	r1, [r7, #20]
 8001270:	3348      	adds	r3, #72	@ 0x48
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	440b      	add	r3, r1
 8001276:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	69db      	ldr	r3, [r3, #28]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d122      	bne.n	80012c6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	431a      	orrs	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012a0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3248      	adds	r2, #72	@ 0x48
 80012a6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012ba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012bc:	6979      	ldr	r1, [r7, #20]
 80012be:	3348      	adds	r3, #72	@ 0x48
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	440b      	add	r3, r1
 80012c4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d109      	bne.n	80012e2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	401a      	ands	r2, r3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80012e0:	e007      	b.n	80012f2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	431a      	orrs	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d109      	bne.n	800130e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43db      	mvns	r3, r3
 8001304:	401a      	ands	r2, r3
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800130c:	e007      	b.n	800131e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	431a      	orrs	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d107      	bne.n	8001336 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	431a      	orrs	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800133c:	f023 0201 	bic.w	r2, r3, #1
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	e006      	b.n	8001358 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
  }
}
 8001358:	4618      	mov	r0, r3
 800135a:	371c      	adds	r7, #28
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	40006400 	.word	0x40006400

08001368 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b01      	cmp	r3, #1
 800137a:	d12e      	bne.n	80013da <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2202      	movs	r2, #2
 8001380:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0201 	bic.w	r2, r2, #1
 8001392:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001394:	f7ff fddc 	bl	8000f50 <HAL_GetTick>
 8001398:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800139a:	e012      	b.n	80013c2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800139c:	f7ff fdd8 	bl	8000f50 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b0a      	cmp	r3, #10
 80013a8:	d90b      	bls.n	80013c2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2205      	movs	r2, #5
 80013ba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e012      	b.n	80013e8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1e5      	bne.n	800139c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e006      	b.n	80013e8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013de:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
  }
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013f0:	b480      	push	{r7}
 80013f2:	b087      	sub	sp, #28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001404:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001406:	7dfb      	ldrb	r3, [r7, #23]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d003      	beq.n	8001414 <HAL_CAN_GetRxMessage+0x24>
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	2b02      	cmp	r3, #2
 8001410:	f040 8103 	bne.w	800161a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10e      	bne.n	8001438 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b00      	cmp	r3, #0
 8001426:	d116      	bne.n	8001456 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e0f7      	b.n	8001628 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d107      	bne.n	8001456 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e0e8      	b.n	8001628 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	331b      	adds	r3, #27
 800145e:	011b      	lsls	r3, r3, #4
 8001460:	4413      	add	r3, r2
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0204 	and.w	r2, r3, #4
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d10c      	bne.n	800148e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	331b      	adds	r3, #27
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	4413      	add	r3, r2
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	0d5b      	lsrs	r3, r3, #21
 8001484:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	e00b      	b.n	80014a6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	331b      	adds	r3, #27
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	4413      	add	r3, r2
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	08db      	lsrs	r3, r3, #3
 800149e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	331b      	adds	r3, #27
 80014ae:	011b      	lsls	r3, r3, #4
 80014b0:	4413      	add	r3, r2
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0202 	and.w	r2, r3, #2
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	331b      	adds	r3, #27
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	4413      	add	r3, r2
 80014c8:	3304      	adds	r3, #4
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2208      	movs	r2, #8
 80014d8:	611a      	str	r2, [r3, #16]
 80014da:	e00b      	b.n	80014f4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	331b      	adds	r3, #27
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	4413      	add	r3, r2
 80014e8:	3304      	adds	r3, #4
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 020f 	and.w	r2, r3, #15
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	331b      	adds	r3, #27
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	4413      	add	r3, r2
 8001500:	3304      	adds	r3, #4
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	b2da      	uxtb	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	331b      	adds	r3, #27
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	4413      	add	r3, r2
 8001518:	3304      	adds	r3, #4
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	0c1b      	lsrs	r3, r3, #16
 800151e:	b29a      	uxth	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	4413      	add	r3, r2
 800152e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	011b      	lsls	r3, r3, #4
 8001542:	4413      	add	r3, r2
 8001544:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	0a1a      	lsrs	r2, r3, #8
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	3301      	adds	r3, #1
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	011b      	lsls	r3, r3, #4
 800155c:	4413      	add	r3, r2
 800155e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	0c1a      	lsrs	r2, r3, #16
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	3302      	adds	r3, #2
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	4413      	add	r3, r2
 8001578:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	0e1a      	lsrs	r2, r3, #24
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	3303      	adds	r3, #3
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	011b      	lsls	r3, r3, #4
 8001590:	4413      	add	r3, r2
 8001592:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	3304      	adds	r3, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	4413      	add	r3, r2
 80015aa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	0a1a      	lsrs	r2, r3, #8
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	3305      	adds	r3, #5
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	011b      	lsls	r3, r3, #4
 80015c2:	4413      	add	r3, r2
 80015c4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	0c1a      	lsrs	r2, r3, #16
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	3306      	adds	r3, #6
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	4413      	add	r3, r2
 80015de:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	0e1a      	lsrs	r2, r3, #24
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	3307      	adds	r3, #7
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d108      	bne.n	8001606 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0220 	orr.w	r2, r2, #32
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	e007      	b.n	8001616 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f042 0220 	orr.w	r2, r2, #32
 8001614:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	e006      	b.n	8001628 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
  }
}
 8001628:	4618      	mov	r0, r3
 800162a:	371c      	adds	r7, #28
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001644:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d002      	beq.n	8001652 <HAL_CAN_ActivateNotification+0x1e>
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	2b02      	cmp	r3, #2
 8001650:	d109      	bne.n	8001666 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6959      	ldr	r1, [r3, #20]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	e006      	b.n	8001674 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
  }
}
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	@ 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d07c      	beq.n	80017c0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d023      	beq.n	8001718 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2201      	movs	r2, #1
 80016d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f983 	bl	80019ee <HAL_CAN_TxMailbox0CompleteCallback>
 80016e8:	e016      	b.n	8001718 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d004      	beq.n	80016fe <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80016fc:	e00c      	b.n	8001718 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	2b00      	cmp	r3, #0
 8001706:	d004      	beq.n	8001712 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001710:	e002      	b.n	8001718 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f989 	bl	8001a2a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800171e:	2b00      	cmp	r3, #0
 8001720:	d024      	beq.n	800176c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800172a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f963 	bl	8001a02 <HAL_CAN_TxMailbox1CompleteCallback>
 800173c:	e016      	b.n	800176c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001750:	e00c      	b.n	800176c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001758:	2b00      	cmp	r3, #0
 800175a:	d004      	beq.n	8001766 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800175c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24
 8001764:	e002      	b.n	800176c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f969 	bl	8001a3e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d024      	beq.n	80017c0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800177e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f943 	bl	8001a16 <HAL_CAN_TxMailbox2CompleteCallback>
 8001790:	e016      	b.n	80017c0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d004      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800179c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017a4:	e00c      	b.n	80017c0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d004      	beq.n	80017ba <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80017b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b8:	e002      	b.n	80017c0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f949 	bl	8001a52 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00c      	beq.n	80017e4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f003 0310 	and.w	r3, r3, #16
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d007      	beq.n	80017e4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2210      	movs	r2, #16
 80017e2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00b      	beq.n	8001806 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d006      	beq.n	8001806 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2208      	movs	r2, #8
 80017fe:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f930 	bl	8001a66 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001806:	6a3b      	ldr	r3, [r7, #32]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d009      	beq.n	8001824 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d002      	beq.n	8001824 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7fe ff12 	bl	8000648 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00c      	beq.n	8001848 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800183e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2210      	movs	r2, #16
 8001846:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	f003 0320 	and.w	r3, r3, #32
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00b      	beq.n	800186a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b00      	cmp	r3, #0
 800185a:	d006      	beq.n	800186a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2208      	movs	r2, #8
 8001862:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f912 	bl	8001a8e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800186a:	6a3b      	ldr	r3, [r7, #32]
 800186c:	f003 0310 	and.w	r3, r3, #16
 8001870:	2b00      	cmp	r3, #0
 8001872:	d009      	beq.n	8001888 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d002      	beq.n	8001888 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f8f9 	bl	8001a7a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00b      	beq.n	80018aa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b00      	cmp	r3, #0
 800189a:	d006      	beq.n	80018aa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2210      	movs	r2, #16
 80018a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 f8fc 	bl	8001aa2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00b      	beq.n	80018cc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d006      	beq.n	80018cc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2208      	movs	r2, #8
 80018c4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f8f5 	bl	8001ab6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d07b      	beq.n	80019ce <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d072      	beq.n	80019c6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d008      	beq.n	80018fc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001902:	2b00      	cmp	r3, #0
 8001904:	d008      	beq.n	8001918 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001912:	f043 0302 	orr.w	r3, r3, #2
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800191e:	2b00      	cmp	r3, #0
 8001920:	d008      	beq.n	8001934 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800192c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192e:	f043 0304 	orr.w	r3, r3, #4
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800193a:	2b00      	cmp	r3, #0
 800193c:	d043      	beq.n	80019c6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001944:	2b00      	cmp	r3, #0
 8001946:	d03e      	beq.n	80019c6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800194e:	2b60      	cmp	r3, #96	@ 0x60
 8001950:	d02b      	beq.n	80019aa <HAL_CAN_IRQHandler+0x32a>
 8001952:	2b60      	cmp	r3, #96	@ 0x60
 8001954:	d82e      	bhi.n	80019b4 <HAL_CAN_IRQHandler+0x334>
 8001956:	2b50      	cmp	r3, #80	@ 0x50
 8001958:	d022      	beq.n	80019a0 <HAL_CAN_IRQHandler+0x320>
 800195a:	2b50      	cmp	r3, #80	@ 0x50
 800195c:	d82a      	bhi.n	80019b4 <HAL_CAN_IRQHandler+0x334>
 800195e:	2b40      	cmp	r3, #64	@ 0x40
 8001960:	d019      	beq.n	8001996 <HAL_CAN_IRQHandler+0x316>
 8001962:	2b40      	cmp	r3, #64	@ 0x40
 8001964:	d826      	bhi.n	80019b4 <HAL_CAN_IRQHandler+0x334>
 8001966:	2b30      	cmp	r3, #48	@ 0x30
 8001968:	d010      	beq.n	800198c <HAL_CAN_IRQHandler+0x30c>
 800196a:	2b30      	cmp	r3, #48	@ 0x30
 800196c:	d822      	bhi.n	80019b4 <HAL_CAN_IRQHandler+0x334>
 800196e:	2b10      	cmp	r3, #16
 8001970:	d002      	beq.n	8001978 <HAL_CAN_IRQHandler+0x2f8>
 8001972:	2b20      	cmp	r3, #32
 8001974:	d005      	beq.n	8001982 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001976:	e01d      	b.n	80019b4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197a:	f043 0308 	orr.w	r3, r3, #8
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001980:	e019      	b.n	80019b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001984:	f043 0310 	orr.w	r3, r3, #16
 8001988:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800198a:	e014      	b.n	80019b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800198c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198e:	f043 0320 	orr.w	r3, r3, #32
 8001992:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001994:	e00f      	b.n	80019b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800199e:	e00a      	b.n	80019b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80019a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019a8:	e005      	b.n	80019b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80019aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019b2:	e000      	b.n	80019b6 <HAL_CAN_IRQHandler+0x336>
            break;
 80019b4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	699a      	ldr	r2, [r3, #24]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80019c4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2204      	movs	r2, #4
 80019cc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d008      	beq.n	80019e6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f872 	bl	8001aca <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019e6:	bf00      	nop
 80019e8:	3728      	adds	r7, #40	@ 0x28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001afc:	4013      	ands	r3, r2
 8001afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b12:	4a04      	ldr	r2, [pc, #16]	@ (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	60d3      	str	r3, [r2, #12]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b2c:	4b04      	ldr	r3, [pc, #16]	@ (8001b40 <__NVIC_GetPriorityGrouping+0x18>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	0a1b      	lsrs	r3, r3, #8
 8001b32:	f003 0307 	and.w	r3, r3, #7
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	db0b      	blt.n	8001b6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	f003 021f 	and.w	r2, r3, #31
 8001b5c:	4907      	ldr	r1, [pc, #28]	@ (8001b7c <__NVIC_EnableIRQ+0x38>)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	095b      	lsrs	r3, r3, #5
 8001b64:	2001      	movs	r0, #1
 8001b66:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000e100 	.word	0xe000e100

08001b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	6039      	str	r1, [r7, #0]
 8001b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	db0a      	blt.n	8001baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	490c      	ldr	r1, [pc, #48]	@ (8001bcc <__NVIC_SetPriority+0x4c>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	0112      	lsls	r2, r2, #4
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba8:	e00a      	b.n	8001bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4908      	ldr	r1, [pc, #32]	@ (8001bd0 <__NVIC_SetPriority+0x50>)
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	3b04      	subs	r3, #4
 8001bb8:	0112      	lsls	r2, r2, #4
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	761a      	strb	r2, [r3, #24]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000e100 	.word	0xe000e100
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b089      	sub	sp, #36	@ 0x24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f1c3 0307 	rsb	r3, r3, #7
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	bf28      	it	cs
 8001bf2:	2304      	movcs	r3, #4
 8001bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	2b06      	cmp	r3, #6
 8001bfc:	d902      	bls.n	8001c04 <NVIC_EncodePriority+0x30>
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3b03      	subs	r3, #3
 8001c02:	e000      	b.n	8001c06 <NVIC_EncodePriority+0x32>
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	f04f 32ff 	mov.w	r2, #4294967295
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43da      	mvns	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	401a      	ands	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	fa01 f303 	lsl.w	r3, r1, r3
 8001c26:	43d9      	mvns	r1, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	4313      	orrs	r3, r2
         );
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3724      	adds	r7, #36	@ 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c4c:	d301      	bcc.n	8001c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00f      	b.n	8001c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c52:	4a0a      	ldr	r2, [pc, #40]	@ (8001c7c <SysTick_Config+0x40>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5a:	210f      	movs	r1, #15
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f7ff ff8e 	bl	8001b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c64:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <SysTick_Config+0x40>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6a:	4b04      	ldr	r3, [pc, #16]	@ (8001c7c <SysTick_Config+0x40>)
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	e000e010 	.word	0xe000e010

08001c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff29 	bl	8001ae0 <__NVIC_SetPriorityGrouping>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca8:	f7ff ff3e 	bl	8001b28 <__NVIC_GetPriorityGrouping>
 8001cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	6978      	ldr	r0, [r7, #20]
 8001cb4:	f7ff ff8e 	bl	8001bd4 <NVIC_EncodePriority>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff5d 	bl	8001b80 <__NVIC_SetPriority>
}
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff31 	bl	8001b44 <__NVIC_EnableIRQ>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ffa2 	bl	8001c3c <SysTick_Config>
 8001cf8:	4603      	mov	r3, r0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	@ 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	e165      	b.n	8001fec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d20:	2201      	movs	r2, #1
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	f040 8154 	bne.w	8001fe6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d005      	beq.n	8001d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d130      	bne.n	8001db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	2203      	movs	r2, #3
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	f003 0201 	and.w	r2, r3, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d017      	beq.n	8001df4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	2203      	movs	r2, #3
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d123      	bne.n	8001e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	08da      	lsrs	r2, r3, #3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3208      	adds	r2, #8
 8001e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	220f      	movs	r2, #15
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	08da      	lsrs	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3208      	adds	r2, #8
 8001e42:	69b9      	ldr	r1, [r7, #24]
 8001e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	2203      	movs	r2, #3
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0203 	and.w	r2, r3, #3
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80ae 	beq.w	8001fe6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4b5d      	ldr	r3, [pc, #372]	@ (8002004 <HAL_GPIO_Init+0x300>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	4a5c      	ldr	r2, [pc, #368]	@ (8002004 <HAL_GPIO_Init+0x300>)
 8001e94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e9a:	4b5a      	ldr	r3, [pc, #360]	@ (8002004 <HAL_GPIO_Init+0x300>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ea6:	4a58      	ldr	r2, [pc, #352]	@ (8002008 <HAL_GPIO_Init+0x304>)
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	089b      	lsrs	r3, r3, #2
 8001eac:	3302      	adds	r3, #2
 8001eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	220f      	movs	r2, #15
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4f      	ldr	r2, [pc, #316]	@ (800200c <HAL_GPIO_Init+0x308>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d025      	beq.n	8001f1e <HAL_GPIO_Init+0x21a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a4e      	ldr	r2, [pc, #312]	@ (8002010 <HAL_GPIO_Init+0x30c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01f      	beq.n	8001f1a <HAL_GPIO_Init+0x216>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a4d      	ldr	r2, [pc, #308]	@ (8002014 <HAL_GPIO_Init+0x310>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d019      	beq.n	8001f16 <HAL_GPIO_Init+0x212>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a4c      	ldr	r2, [pc, #304]	@ (8002018 <HAL_GPIO_Init+0x314>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_GPIO_Init+0x20e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a4b      	ldr	r2, [pc, #300]	@ (800201c <HAL_GPIO_Init+0x318>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00d      	beq.n	8001f0e <HAL_GPIO_Init+0x20a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a4a      	ldr	r2, [pc, #296]	@ (8002020 <HAL_GPIO_Init+0x31c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d007      	beq.n	8001f0a <HAL_GPIO_Init+0x206>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a49      	ldr	r2, [pc, #292]	@ (8002024 <HAL_GPIO_Init+0x320>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d101      	bne.n	8001f06 <HAL_GPIO_Init+0x202>
 8001f02:	2306      	movs	r3, #6
 8001f04:	e00c      	b.n	8001f20 <HAL_GPIO_Init+0x21c>
 8001f06:	2307      	movs	r3, #7
 8001f08:	e00a      	b.n	8001f20 <HAL_GPIO_Init+0x21c>
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	e008      	b.n	8001f20 <HAL_GPIO_Init+0x21c>
 8001f0e:	2304      	movs	r3, #4
 8001f10:	e006      	b.n	8001f20 <HAL_GPIO_Init+0x21c>
 8001f12:	2303      	movs	r3, #3
 8001f14:	e004      	b.n	8001f20 <HAL_GPIO_Init+0x21c>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e002      	b.n	8001f20 <HAL_GPIO_Init+0x21c>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <HAL_GPIO_Init+0x21c>
 8001f1e:	2300      	movs	r3, #0
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	f002 0203 	and.w	r2, r2, #3
 8001f26:	0092      	lsls	r2, r2, #2
 8001f28:	4093      	lsls	r3, r2
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f30:	4935      	ldr	r1, [pc, #212]	@ (8002008 <HAL_GPIO_Init+0x304>)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	3302      	adds	r3, #2
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8002028 <HAL_GPIO_Init+0x324>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f62:	4a31      	ldr	r2, [pc, #196]	@ (8002028 <HAL_GPIO_Init+0x324>)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f68:	4b2f      	ldr	r3, [pc, #188]	@ (8002028 <HAL_GPIO_Init+0x324>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f8c:	4a26      	ldr	r2, [pc, #152]	@ (8002028 <HAL_GPIO_Init+0x324>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f92:	4b25      	ldr	r3, [pc, #148]	@ (8002028 <HAL_GPIO_Init+0x324>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8002028 <HAL_GPIO_Init+0x324>)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002028 <HAL_GPIO_Init+0x324>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe0:	4a11      	ldr	r2, [pc, #68]	@ (8002028 <HAL_GPIO_Init+0x324>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	61fb      	str	r3, [r7, #28]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	2b0f      	cmp	r3, #15
 8001ff0:	f67f ae96 	bls.w	8001d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	3724      	adds	r7, #36	@ 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	40013800 	.word	0x40013800
 800200c:	40020000 	.word	0x40020000
 8002010:	40020400 	.word	0x40020400
 8002014:	40020800 	.word	0x40020800
 8002018:	40020c00 	.word	0x40020c00
 800201c:	40021000 	.word	0x40021000
 8002020:	40021400 	.word	0x40021400
 8002024:	40021800 	.word	0x40021800
 8002028:	40013c00 	.word	0x40013c00

0800202c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	807b      	strh	r3, [r7, #2]
 8002038:	4613      	mov	r3, r2
 800203a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800203c:	787b      	ldrb	r3, [r7, #1]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002042:	887a      	ldrh	r2, [r7, #2]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002048:	e003      	b.n	8002052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800204a:	887b      	ldrh	r3, [r7, #2]
 800204c:	041a      	lsls	r2, r3, #16
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	619a      	str	r2, [r3, #24]
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b086      	sub	sp, #24
 8002062:	af02      	add	r7, sp, #8
 8002064:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e108      	b.n	8002282 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d106      	bne.n	8002090 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7fe fdc6 	bl	8000c1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2203      	movs	r2, #3
 8002094:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800209e:	d102      	bne.n	80020a6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f001 fbf4 	bl	8003898 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	7c1a      	ldrb	r2, [r3, #16]
 80020b8:	f88d 2000 	strb.w	r2, [sp]
 80020bc:	3304      	adds	r3, #4
 80020be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c0:	f001 fb86 	bl	80037d0 <USB_CoreInit>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d005      	beq.n	80020d6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2202      	movs	r2, #2
 80020ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0d5      	b.n	8002282 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2100      	movs	r1, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	f001 fbec 	bl	80038ba <USB_SetCurrentMode>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0c6      	b.n	8002282 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f4:	2300      	movs	r3, #0
 80020f6:	73fb      	strb	r3, [r7, #15]
 80020f8:	e04a      	b.n	8002190 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020fa:	7bfa      	ldrb	r2, [r7, #15]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4413      	add	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	3315      	adds	r3, #21
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800210e:	7bfa      	ldrb	r2, [r7, #15]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	3314      	adds	r3, #20
 800211e:	7bfa      	ldrb	r2, [r7, #15]
 8002120:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	b298      	uxth	r0, r3
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	332e      	adds	r3, #46	@ 0x2e
 8002136:	4602      	mov	r2, r0
 8002138:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800213a:	7bfa      	ldrb	r2, [r7, #15]
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4413      	add	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	3318      	adds	r3, #24
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	331c      	adds	r3, #28
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	3320      	adds	r3, #32
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	3324      	adds	r3, #36	@ 0x24
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	3301      	adds	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	791b      	ldrb	r3, [r3, #4]
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	429a      	cmp	r2, r3
 8002198:	d3af      	bcc.n	80020fa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]
 800219e:	e044      	b.n	800222a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80021c8:	7bfa      	ldrb	r2, [r7, #15]
 80021ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4413      	add	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4413      	add	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	3301      	adds	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	791b      	ldrb	r3, [r3, #4]
 800222e:	7bfa      	ldrb	r2, [r7, #15]
 8002230:	429a      	cmp	r2, r3
 8002232:	d3b5      	bcc.n	80021a0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	7c1a      	ldrb	r2, [r3, #16]
 800223c:	f88d 2000 	strb.w	r2, [sp]
 8002240:	3304      	adds	r3, #4
 8002242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002244:	f001 fb86 	bl	8003954 <USB_DevInit>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2202      	movs	r2, #2
 8002252:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e013      	b.n	8002282 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7b1b      	ldrb	r3, [r3, #12]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d102      	bne.n	8002276 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f80a 	bl	800228a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f001 fd41 	bl	8003d02 <USB_DevDisconnect>

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800228a:	b480      	push	{r7}
 800228c:	b085      	sub	sp, #20
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022bc:	f043 0303 	orr.w	r3, r3, #3
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0cc      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e8:	4b68      	ldr	r3, [pc, #416]	@ (800248c <HAL_RCC_ClockConfig+0x1b8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d90c      	bls.n	8002310 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b65      	ldr	r3, [pc, #404]	@ (800248c <HAL_RCC_ClockConfig+0x1b8>)
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b63      	ldr	r3, [pc, #396]	@ (800248c <HAL_RCC_ClockConfig+0x1b8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0b8      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d020      	beq.n	800235e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002328:	4b59      	ldr	r3, [pc, #356]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	4a58      	ldr	r2, [pc, #352]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002332:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002340:	4b53      	ldr	r3, [pc, #332]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	4a52      	ldr	r2, [pc, #328]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800234a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800234c:	4b50      	ldr	r3, [pc, #320]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	494d      	ldr	r1, [pc, #308]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d044      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002372:	4b47      	ldr	r3, [pc, #284]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d119      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e07f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d003      	beq.n	8002392 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800238e:	2b03      	cmp	r3, #3
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002392:	4b3f      	ldr	r3, [pc, #252]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e06f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e067      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b2:	4b37      	ldr	r3, [pc, #220]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f023 0203 	bic.w	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4934      	ldr	r1, [pc, #208]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c4:	f7fe fdc4 	bl	8000f50 <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023cc:	f7fe fdc0 	bl	8000f50 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e04f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 020c 	and.w	r2, r3, #12
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d1eb      	bne.n	80023cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023f4:	4b25      	ldr	r3, [pc, #148]	@ (800248c <HAL_RCC_ClockConfig+0x1b8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d20c      	bcs.n	800241c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002402:	4b22      	ldr	r3, [pc, #136]	@ (800248c <HAL_RCC_ClockConfig+0x1b8>)
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b20      	ldr	r3, [pc, #128]	@ (800248c <HAL_RCC_ClockConfig+0x1b8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e032      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002428:	4b19      	ldr	r3, [pc, #100]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4916      	ldr	r1, [pc, #88]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002446:	4b12      	ldr	r3, [pc, #72]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	490e      	ldr	r1, [pc, #56]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800245a:	f000 f821 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 800245e:	4602      	mov	r2, r0
 8002460:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	490a      	ldr	r1, [pc, #40]	@ (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	5ccb      	ldrb	r3, [r1, r3]
 800246e:	fa22 f303 	lsr.w	r3, r2, r3
 8002472:	4a09      	ldr	r2, [pc, #36]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002476:	4b09      	ldr	r3, [pc, #36]	@ (800249c <HAL_RCC_ClockConfig+0x1c8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fd24 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40023c00 	.word	0x40023c00
 8002490:	40023800 	.word	0x40023800
 8002494:	08004788 	.word	0x08004788
 8002498:	20000000 	.word	0x20000000
 800249c:	20000004 	.word	0x20000004

080024a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024a4:	b094      	sub	sp, #80	@ 0x50
 80024a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024b8:	4b79      	ldr	r3, [pc, #484]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d00d      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0x40>
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	f200 80e1 	bhi.w	800268c <HAL_RCC_GetSysClockFreq+0x1ec>
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x34>
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d003      	beq.n	80024da <HAL_RCC_GetSysClockFreq+0x3a>
 80024d2:	e0db      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024d4:	4b73      	ldr	r3, [pc, #460]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80024d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024d8:	e0db      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024da:	4b73      	ldr	r3, [pc, #460]	@ (80026a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80024dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024de:	e0d8      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024e0:	4b6f      	ldr	r3, [pc, #444]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ea:	4b6d      	ldr	r3, [pc, #436]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d063      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f6:	4b6a      	ldr	r3, [pc, #424]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	099b      	lsrs	r3, r3, #6
 80024fc:	2200      	movs	r2, #0
 80024fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002500:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002508:	633b      	str	r3, [r7, #48]	@ 0x30
 800250a:	2300      	movs	r3, #0
 800250c:	637b      	str	r3, [r7, #52]	@ 0x34
 800250e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002512:	4622      	mov	r2, r4
 8002514:	462b      	mov	r3, r5
 8002516:	f04f 0000 	mov.w	r0, #0
 800251a:	f04f 0100 	mov.w	r1, #0
 800251e:	0159      	lsls	r1, r3, #5
 8002520:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002524:	0150      	lsls	r0, r2, #5
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4621      	mov	r1, r4
 800252c:	1a51      	subs	r1, r2, r1
 800252e:	6139      	str	r1, [r7, #16]
 8002530:	4629      	mov	r1, r5
 8002532:	eb63 0301 	sbc.w	r3, r3, r1
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002544:	4659      	mov	r1, fp
 8002546:	018b      	lsls	r3, r1, #6
 8002548:	4651      	mov	r1, sl
 800254a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800254e:	4651      	mov	r1, sl
 8002550:	018a      	lsls	r2, r1, #6
 8002552:	4651      	mov	r1, sl
 8002554:	ebb2 0801 	subs.w	r8, r2, r1
 8002558:	4659      	mov	r1, fp
 800255a:	eb63 0901 	sbc.w	r9, r3, r1
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800256a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800256e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002572:	4690      	mov	r8, r2
 8002574:	4699      	mov	r9, r3
 8002576:	4623      	mov	r3, r4
 8002578:	eb18 0303 	adds.w	r3, r8, r3
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	462b      	mov	r3, r5
 8002580:	eb49 0303 	adc.w	r3, r9, r3
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002592:	4629      	mov	r1, r5
 8002594:	024b      	lsls	r3, r1, #9
 8002596:	4621      	mov	r1, r4
 8002598:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800259c:	4621      	mov	r1, r4
 800259e:	024a      	lsls	r2, r1, #9
 80025a0:	4610      	mov	r0, r2
 80025a2:	4619      	mov	r1, r3
 80025a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025a6:	2200      	movs	r2, #0
 80025a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025b0:	f7fd fe86 	bl	80002c0 <__aeabi_uldivmod>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4613      	mov	r3, r2
 80025ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025bc:	e058      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025be:	4b38      	ldr	r3, [pc, #224]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	099b      	lsrs	r3, r3, #6
 80025c4:	2200      	movs	r2, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	4611      	mov	r1, r2
 80025ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025ce:	623b      	str	r3, [r7, #32]
 80025d0:	2300      	movs	r3, #0
 80025d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80025d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025d8:	4642      	mov	r2, r8
 80025da:	464b      	mov	r3, r9
 80025dc:	f04f 0000 	mov.w	r0, #0
 80025e0:	f04f 0100 	mov.w	r1, #0
 80025e4:	0159      	lsls	r1, r3, #5
 80025e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025ea:	0150      	lsls	r0, r2, #5
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4641      	mov	r1, r8
 80025f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80025f6:	4649      	mov	r1, r9
 80025f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002608:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800260c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002610:	ebb2 040a 	subs.w	r4, r2, sl
 8002614:	eb63 050b 	sbc.w	r5, r3, fp
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	00eb      	lsls	r3, r5, #3
 8002622:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002626:	00e2      	lsls	r2, r4, #3
 8002628:	4614      	mov	r4, r2
 800262a:	461d      	mov	r5, r3
 800262c:	4643      	mov	r3, r8
 800262e:	18e3      	adds	r3, r4, r3
 8002630:	603b      	str	r3, [r7, #0]
 8002632:	464b      	mov	r3, r9
 8002634:	eb45 0303 	adc.w	r3, r5, r3
 8002638:	607b      	str	r3, [r7, #4]
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002646:	4629      	mov	r1, r5
 8002648:	028b      	lsls	r3, r1, #10
 800264a:	4621      	mov	r1, r4
 800264c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002650:	4621      	mov	r1, r4
 8002652:	028a      	lsls	r2, r1, #10
 8002654:	4610      	mov	r0, r2
 8002656:	4619      	mov	r1, r3
 8002658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800265a:	2200      	movs	r2, #0
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	61fa      	str	r2, [r7, #28]
 8002660:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002664:	f7fd fe2c 	bl	80002c0 <__aeabi_uldivmod>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4613      	mov	r3, r2
 800266e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002670:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	0c1b      	lsrs	r3, r3, #16
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	3301      	adds	r3, #1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002680:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800268a:	e002      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800268c:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800268e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002692:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002694:	4618      	mov	r0, r3
 8002696:	3750      	adds	r7, #80	@ 0x50
 8002698:	46bd      	mov	sp, r7
 800269a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	00f42400 	.word	0x00f42400
 80026a8:	007a1200 	.word	0x007a1200

080026ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b0:	4b03      	ldr	r3, [pc, #12]	@ (80026c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000000 	.word	0x20000000

080026c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026c8:	f7ff fff0 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026cc:	4602      	mov	r2, r0
 80026ce:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	0a9b      	lsrs	r3, r3, #10
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	4903      	ldr	r1, [pc, #12]	@ (80026e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026da:	5ccb      	ldrb	r3, [r1, r3]
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40023800 	.word	0x40023800
 80026e8:	08004798 	.word	0x08004798

080026ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026f0:	f7ff ffdc 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b05      	ldr	r3, [pc, #20]	@ (800270c <HAL_RCC_GetPCLK2Freq+0x20>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	0b5b      	lsrs	r3, r3, #13
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	4903      	ldr	r1, [pc, #12]	@ (8002710 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002702:	5ccb      	ldrb	r3, [r1, r3]
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40023800 	.word	0x40023800
 8002710:	08004798 	.word	0x08004798

08002714 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d010      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002734:	4b87      	ldr	r3, [pc, #540]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002736:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800273a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	4984      	ldr	r1, [pc, #528]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8002752:	2301      	movs	r3, #1
 8002754:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d010      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002762:	4b7c      	ldr	r3, [pc, #496]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002764:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002768:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	4978      	ldr	r1, [pc, #480]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8002780:	2301      	movs	r3, #1
 8002782:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 8083 	beq.w	8002898 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	4b6f      	ldr	r3, [pc, #444]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	4a6e      	ldr	r2, [pc, #440]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800279c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027a2:	4b6c      	ldr	r3, [pc, #432]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80027ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a69      	ldr	r2, [pc, #420]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027ba:	f7fe fbc9 	bl	8000f50 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80027c0:	e008      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c2:	f7fe fbc5 	bl	8000f50 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e162      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x386>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80027d4:	4b60      	ldr	r3, [pc, #384]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027e0:	4b5c      	ldr	r3, [pc, #368]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027e8:	60fb      	str	r3, [r7, #12]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d02f      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d028      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027fe:	4b55      	ldr	r3, [pc, #340]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002806:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002808:	4b54      	ldr	r3, [pc, #336]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800280a:	2201      	movs	r2, #1
 800280c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800280e:	4b53      	ldr	r3, [pc, #332]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002814:	4a4f      	ldr	r2, [pc, #316]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800281a:	4b4e      	ldr	r3, [pc, #312]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b01      	cmp	r3, #1
 8002824:	d114      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002826:	f7fe fb93 	bl	8000f50 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282c:	e00a      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282e:	f7fe fb8f 	bl	8000f50 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	f241 3288 	movw	r2, #5000	@ 0x1388
 800283c:	4293      	cmp	r3, r2
 800283e:	d901      	bls.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e12a      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x386>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002844:	4b43      	ldr	r3, [pc, #268]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0ee      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002858:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800285c:	d10d      	bne.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800285e:	4b3d      	ldr	r3, [pc, #244]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800286e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002872:	4938      	ldr	r1, [pc, #224]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002874:	4313      	orrs	r3, r2
 8002876:	608b      	str	r3, [r1, #8]
 8002878:	e005      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800287a:	4b36      	ldr	r3, [pc, #216]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4a35      	ldr	r2, [pc, #212]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002880:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002884:	6093      	str	r3, [r2, #8]
 8002886:	4b33      	ldr	r3, [pc, #204]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002888:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002892:	4930      	ldr	r1, [pc, #192]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002894:	4313      	orrs	r3, r2
 8002896:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d004      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 80028aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80028ac:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80028ba:	4b26      	ldr	r3, [pc, #152]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	4922      	ldr	r1, [pc, #136]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d011      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028e2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ea:	491a      	ldr	r1, [pc, #104]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028fa:	d101      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 80028fc:	2301      	movs	r3, #1
 80028fe:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800290c:	4b11      	ldr	r3, [pc, #68]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800290e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002912:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	490e      	ldr	r1, [pc, #56]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d004      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b80      	cmp	r3, #128	@ 0x80
 800292e:	f040 8091 	bne.w	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002932:	4b0c      	ldr	r3, [pc, #48]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002938:	f7fe fb0a 	bl	8000f50 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800293e:	e013      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002940:	f7fe fb06 	bl	8000f50 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d90c      	bls.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e0a3      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	40007000 	.word	0x40007000
 800295c:	42470e40 	.word	0x42470e40
 8002960:	424711e0 	.word	0x424711e0
 8002964:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002968:	4b4e      	ldr	r3, [pc, #312]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1e5      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002974:	4a4c      	ldr	r2, [pc, #304]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800297a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x27c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d023      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x290>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d019      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0320 	and.w	r3, r3, #32
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d004      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029b8:	d00e      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d019      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d115      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029d6:	d110      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	019b      	lsls	r3, r3, #6
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	061b      	lsls	r3, r3, #24
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	071b      	lsls	r3, r3, #28
 80029f2:	492c      	ldr	r1, [pc, #176]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d010      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	019b      	lsls	r3, r3, #6
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	061b      	lsls	r3, r3, #24
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	071b      	lsls	r3, r3, #28
 8002a20:	4920      	ldr	r1, [pc, #128]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a28:	4b20      	ldr	r3, [pc, #128]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a2e:	f7fe fa8f 	bl	8000f50 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a36:	f7fe fa8b 	bl	8000f50 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e028      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x386>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a48:	4b16      	ldr	r3, [pc, #88]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a60:	4b10      	ldr	r3, [pc, #64]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a66:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6e:	490d      	ldr	r1, [pc, #52]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002a82:	4b08      	ldr	r3, [pc, #32]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a88:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a90:	4904      	ldr	r1, [pc, #16]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	424710d8 	.word	0x424710d8
 8002aac:	42470068 	.word	0x42470068

08002ab0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e273      	b.n	8002faa <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d075      	beq.n	8002bba <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ace:	4b88      	ldr	r3, [pc, #544]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d00c      	beq.n	8002af4 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ada:	4b85      	ldr	r3, [pc, #532]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
        || \
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d112      	bne.n	8002b0c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ae6:	4b82      	ldr	r3, [pc, #520]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002af2:	d10b      	bne.n	8002b0c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af4:	4b7e      	ldr	r3, [pc, #504]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d05b      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x108>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d157      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e24e      	b.n	8002faa <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b14:	d106      	bne.n	8002b24 <HAL_RCC_OscConfig+0x74>
 8002b16:	4b76      	ldr	r3, [pc, #472]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a75      	ldr	r2, [pc, #468]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e01d      	b.n	8002b60 <HAL_RCC_OscConfig+0xb0>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x98>
 8002b2e:	4b70      	ldr	r3, [pc, #448]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a6f      	ldr	r2, [pc, #444]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4b6d      	ldr	r3, [pc, #436]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a6c      	ldr	r2, [pc, #432]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e00b      	b.n	8002b60 <HAL_RCC_OscConfig+0xb0>
 8002b48:	4b69      	ldr	r3, [pc, #420]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a68      	ldr	r2, [pc, #416]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b66      	ldr	r3, [pc, #408]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a65      	ldr	r2, [pc, #404]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d013      	beq.n	8002b90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe f9f2 	bl	8000f50 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b70:	f7fe f9ee 	bl	8000f50 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	@ 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e213      	b.n	8002faa <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b82:	4b5b      	ldr	r3, [pc, #364]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0xc0>
 8002b8e:	e014      	b.n	8002bba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fe f9de 	bl	8000f50 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b98:	f7fe f9da 	bl	8000f50 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	@ 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e1ff      	b.n	8002faa <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002baa:	4b51      	ldr	r3, [pc, #324]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0xe8>
 8002bb6:	e000      	b.n	8002bba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d063      	beq.n	8002c8e <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00b      	beq.n	8002bea <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bd2:	4b47      	ldr	r3, [pc, #284]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
        || \
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d11c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bde:	4b44      	ldr	r3, [pc, #272]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d116      	bne.n	8002c18 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bea:	4b41      	ldr	r3, [pc, #260]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_RCC_OscConfig+0x152>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e1d3      	b.n	8002faa <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c02:	4b3b      	ldr	r3, [pc, #236]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4937      	ldr	r1, [pc, #220]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c16:	e03a      	b.n	8002c8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d020      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c20:	4b34      	ldr	r3, [pc, #208]	@ (8002cf4 <HAL_RCC_OscConfig+0x244>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c26:	f7fe f993 	bl	8000f50 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2e:	f7fe f98f 	bl	8000f50 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e1b4      	b.n	8002faa <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c40:	4b2b      	ldr	r3, [pc, #172]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4c:	4b28      	ldr	r3, [pc, #160]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4925      	ldr	r1, [pc, #148]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	600b      	str	r3, [r1, #0]
 8002c60:	e015      	b.n	8002c8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c62:	4b24      	ldr	r3, [pc, #144]	@ (8002cf4 <HAL_RCC_OscConfig+0x244>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe f972 	bl	8000f50 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c70:	f7fe f96e 	bl	8000f50 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e193      	b.n	8002faa <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c82:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d036      	beq.n	8002d08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d016      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca2:	4b15      	ldr	r3, [pc, #84]	@ (8002cf8 <HAL_RCC_OscConfig+0x248>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca8:	f7fe f952 	bl	8000f50 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb0:	f7fe f94e 	bl	8000f50 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e173      	b.n	8002faa <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf0 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x200>
 8002cce:	e01b      	b.n	8002d08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd0:	4b09      	ldr	r3, [pc, #36]	@ (8002cf8 <HAL_RCC_OscConfig+0x248>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd6:	f7fe f93b 	bl	8000f50 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cdc:	e00e      	b.n	8002cfc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cde:	f7fe f937 	bl	8000f50 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d907      	bls.n	8002cfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e15c      	b.n	8002faa <HAL_RCC_OscConfig+0x4fa>
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	42470000 	.word	0x42470000
 8002cf8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cfc:	4b8a      	ldr	r3, [pc, #552]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002cfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1ea      	bne.n	8002cde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 8097 	beq.w	8002e44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d16:	2300      	movs	r3, #0
 8002d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1a:	4b83      	ldr	r3, [pc, #524]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10f      	bne.n	8002d46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d36:	4b7c      	ldr	r3, [pc, #496]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d42:	2301      	movs	r3, #1
 8002d44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d46:	4b79      	ldr	r3, [pc, #484]	@ (8002f2c <HAL_RCC_OscConfig+0x47c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d118      	bne.n	8002d84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d52:	4b76      	ldr	r3, [pc, #472]	@ (8002f2c <HAL_RCC_OscConfig+0x47c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a75      	ldr	r2, [pc, #468]	@ (8002f2c <HAL_RCC_OscConfig+0x47c>)
 8002d58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5e:	f7fe f8f7 	bl	8000f50 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d66:	f7fe f8f3 	bl	8000f50 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e118      	b.n	8002faa <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d78:	4b6c      	ldr	r3, [pc, #432]	@ (8002f2c <HAL_RCC_OscConfig+0x47c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d106      	bne.n	8002d9a <HAL_RCC_OscConfig+0x2ea>
 8002d8c:	4b66      	ldr	r3, [pc, #408]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d90:	4a65      	ldr	r2, [pc, #404]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d98:	e01c      	b.n	8002dd4 <HAL_RCC_OscConfig+0x324>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b05      	cmp	r3, #5
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCC_OscConfig+0x30c>
 8002da2:	4b61      	ldr	r3, [pc, #388]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da6:	4a60      	ldr	r2, [pc, #384]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dae:	4b5e      	ldr	r3, [pc, #376]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db2:	4a5d      	ldr	r2, [pc, #372]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dba:	e00b      	b.n	8002dd4 <HAL_RCC_OscConfig+0x324>
 8002dbc:	4b5a      	ldr	r3, [pc, #360]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc0:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dc8:	4b57      	ldr	r3, [pc, #348]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dcc:	4a56      	ldr	r2, [pc, #344]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002dce:	f023 0304 	bic.w	r3, r3, #4
 8002dd2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d015      	beq.n	8002e08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ddc:	f7fe f8b8 	bl	8000f50 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de4:	f7fe f8b4 	bl	8000f50 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e0d7      	b.n	8002faa <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfa:	4b4b      	ldr	r3, [pc, #300]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0ee      	beq.n	8002de4 <HAL_RCC_OscConfig+0x334>
 8002e06:	e014      	b.n	8002e32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e08:	f7fe f8a2 	bl	8000f50 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e10:	f7fe f89e 	bl	8000f50 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e0c1      	b.n	8002faa <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e26:	4b40      	ldr	r3, [pc, #256]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1ee      	bne.n	8002e10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e32:	7dfb      	ldrb	r3, [r7, #23]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d105      	bne.n	8002e44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e38:	4b3b      	ldr	r3, [pc, #236]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3c:	4a3a      	ldr	r2, [pc, #232]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002e3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80ad 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e4e:	4b36      	ldr	r3, [pc, #216]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d060      	beq.n	8002f1c <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d145      	bne.n	8002eee <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e62:	4b33      	ldr	r3, [pc, #204]	@ (8002f30 <HAL_RCC_OscConfig+0x480>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7fe f872 	bl	8000f50 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e70:	f7fe f86e 	bl	8000f50 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e093      	b.n	8002faa <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e82:	4b29      	ldr	r3, [pc, #164]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69da      	ldr	r2, [r3, #28]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9c:	019b      	lsls	r3, r3, #6
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	041b      	lsls	r3, r3, #16
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb0:	061b      	lsls	r3, r3, #24
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb8:	071b      	lsls	r3, r3, #28
 8002eba:	491b      	ldr	r1, [pc, #108]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f30 <HAL_RCC_OscConfig+0x480>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec6:	f7fe f843 	bl	8000f50 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ece:	f7fe f83f 	bl	8000f50 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e064      	b.n	8002faa <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee0:	4b11      	ldr	r3, [pc, #68]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0f0      	beq.n	8002ece <HAL_RCC_OscConfig+0x41e>
 8002eec:	e05c      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eee:	4b10      	ldr	r3, [pc, #64]	@ (8002f30 <HAL_RCC_OscConfig+0x480>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef4:	f7fe f82c 	bl	8000f50 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efc:	f7fe f828 	bl	8000f50 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e04d      	b.n	8002faa <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0e:	4b06      	ldr	r3, [pc, #24]	@ (8002f28 <HAL_RCC_OscConfig+0x478>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x44c>
 8002f1a:	e045      	b.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d107      	bne.n	8002f34 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e040      	b.n	8002faa <HAL_RCC_OscConfig+0x4fa>
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	40007000 	.word	0x40007000
 8002f30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f34:	4b1f      	ldr	r3, [pc, #124]	@ (8002fb4 <HAL_RCC_OscConfig+0x504>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d030      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d129      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d122      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f64:	4013      	ands	r3, r2
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d119      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7a:	085b      	lsrs	r3, r3, #1
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d10f      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d107      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800

08002fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e042      	b.n	8003050 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fd fdd4 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2224      	movs	r2, #36	@ 0x24
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f973 	bl	80032e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695a      	ldr	r2, [r3, #20]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	@ 0x28
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	4613      	mov	r3, r2
 8003066:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b20      	cmp	r3, #32
 8003076:	d175      	bne.n	8003164 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HAL_UART_Transmit+0x2c>
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e06e      	b.n	8003166 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2221      	movs	r2, #33	@ 0x21
 8003092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003096:	f7fd ff5b 	bl	8000f50 <HAL_GetTick>
 800309a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	88fa      	ldrh	r2, [r7, #6]
 80030a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	88fa      	ldrh	r2, [r7, #6]
 80030a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030b0:	d108      	bne.n	80030c4 <HAL_UART_Transmit+0x6c>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d104      	bne.n	80030c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	e003      	b.n	80030cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030cc:	e02e      	b.n	800312c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2200      	movs	r2, #0
 80030d6:	2180      	movs	r1, #128	@ 0x80
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f848 	bl	800316e <UART_WaitOnFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e03a      	b.n	8003166 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10b      	bne.n	800310e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003104:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	3302      	adds	r3, #2
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	e007      	b.n	800311e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	781a      	ldrb	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	3301      	adds	r3, #1
 800311c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1cb      	bne.n	80030ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2200      	movs	r2, #0
 800313e:	2140      	movs	r1, #64	@ 0x40
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f814 	bl	800316e <UART_WaitOnFlagUntilTimeout>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e006      	b.n	8003166 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	e000      	b.n	8003166 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003164:	2302      	movs	r3, #2
  }
}
 8003166:	4618      	mov	r0, r3
 8003168:	3720      	adds	r7, #32
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b086      	sub	sp, #24
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	603b      	str	r3, [r7, #0]
 800317a:	4613      	mov	r3, r2
 800317c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800317e:	e03b      	b.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003186:	d037      	beq.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003188:	f7fd fee2 	bl	8000f50 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	6a3a      	ldr	r2, [r7, #32]
 8003194:	429a      	cmp	r2, r3
 8003196:	d302      	bcc.n	800319e <UART_WaitOnFlagUntilTimeout+0x30>
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e03a      	b.n	8003218 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d023      	beq.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b80      	cmp	r3, #128	@ 0x80
 80031b4:	d020      	beq.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b40      	cmp	r3, #64	@ 0x40
 80031ba:	d01d      	beq.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d116      	bne.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 f81d 	bl	8003220 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2208      	movs	r2, #8
 80031ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e00f      	b.n	8003218 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4013      	ands	r3, r2
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	429a      	cmp	r2, r3
 8003206:	bf0c      	ite	eq
 8003208:	2301      	moveq	r3, #1
 800320a:	2300      	movne	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	429a      	cmp	r2, r3
 8003214:	d0b4      	beq.n	8003180 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003220:	b480      	push	{r7}
 8003222:	b095      	sub	sp, #84	@ 0x54
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	330c      	adds	r3, #12
 800322e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003232:	e853 3f00 	ldrex	r3, [r3]
 8003236:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800323e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	330c      	adds	r3, #12
 8003246:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003248:	643a      	str	r2, [r7, #64]	@ 0x40
 800324a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800324e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003250:	e841 2300 	strex	r3, r2, [r1]
 8003254:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1e5      	bne.n	8003228 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3314      	adds	r3, #20
 8003262:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	e853 3f00 	ldrex	r3, [r3]
 800326a:	61fb      	str	r3, [r7, #28]
   return(result);
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f023 0301 	bic.w	r3, r3, #1
 8003272:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3314      	adds	r3, #20
 800327a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800327c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800327e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003280:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003282:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003284:	e841 2300 	strex	r3, r2, [r1]
 8003288:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e5      	bne.n	800325c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003294:	2b01      	cmp	r3, #1
 8003296:	d119      	bne.n	80032cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	330c      	adds	r3, #12
 800329e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	e853 3f00 	ldrex	r3, [r3]
 80032a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f023 0310 	bic.w	r3, r3, #16
 80032ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	330c      	adds	r3, #12
 80032b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032b8:	61ba      	str	r2, [r7, #24]
 80032ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032bc:	6979      	ldr	r1, [r7, #20]
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	e841 2300 	strex	r3, r2, [r1]
 80032c4:	613b      	str	r3, [r7, #16]
   return(result);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1e5      	bne.n	8003298 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80032da:	bf00      	nop
 80032dc:	3754      	adds	r7, #84	@ 0x54
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ec:	b0c0      	sub	sp, #256	@ 0x100
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003304:	68d9      	ldr	r1, [r3, #12]
 8003306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	ea40 0301 	orr.w	r3, r0, r1
 8003310:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	431a      	orrs	r2, r3
 8003320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	431a      	orrs	r2, r3
 8003328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003340:	f021 010c 	bic.w	r1, r1, #12
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800334e:	430b      	orrs	r3, r1
 8003350:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800335e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003362:	6999      	ldr	r1, [r3, #24]
 8003364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	ea40 0301 	orr.w	r3, r0, r1
 800336e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4b8f      	ldr	r3, [pc, #572]	@ (80035b4 <UART_SetConfig+0x2cc>)
 8003378:	429a      	cmp	r2, r3
 800337a:	d005      	beq.n	8003388 <UART_SetConfig+0xa0>
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4b8d      	ldr	r3, [pc, #564]	@ (80035b8 <UART_SetConfig+0x2d0>)
 8003384:	429a      	cmp	r2, r3
 8003386:	d104      	bne.n	8003392 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003388:	f7ff f9b0 	bl	80026ec <HAL_RCC_GetPCLK2Freq>
 800338c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003390:	e003      	b.n	800339a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003392:	f7ff f997 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 8003396:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800339a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033a4:	f040 810c 	bne.w	80035c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033ac:	2200      	movs	r2, #0
 80033ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80033b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80033b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80033ba:	4622      	mov	r2, r4
 80033bc:	462b      	mov	r3, r5
 80033be:	1891      	adds	r1, r2, r2
 80033c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80033c2:	415b      	adcs	r3, r3
 80033c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80033ca:	4621      	mov	r1, r4
 80033cc:	eb12 0801 	adds.w	r8, r2, r1
 80033d0:	4629      	mov	r1, r5
 80033d2:	eb43 0901 	adc.w	r9, r3, r1
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ea:	4690      	mov	r8, r2
 80033ec:	4699      	mov	r9, r3
 80033ee:	4623      	mov	r3, r4
 80033f0:	eb18 0303 	adds.w	r3, r8, r3
 80033f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80033f8:	462b      	mov	r3, r5
 80033fa:	eb49 0303 	adc.w	r3, r9, r3
 80033fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800340e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003412:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003416:	460b      	mov	r3, r1
 8003418:	18db      	adds	r3, r3, r3
 800341a:	653b      	str	r3, [r7, #80]	@ 0x50
 800341c:	4613      	mov	r3, r2
 800341e:	eb42 0303 	adc.w	r3, r2, r3
 8003422:	657b      	str	r3, [r7, #84]	@ 0x54
 8003424:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003428:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800342c:	f7fc ff48 	bl	80002c0 <__aeabi_uldivmod>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4b61      	ldr	r3, [pc, #388]	@ (80035bc <UART_SetConfig+0x2d4>)
 8003436:	fba3 2302 	umull	r2, r3, r3, r2
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	011c      	lsls	r4, r3, #4
 800343e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003442:	2200      	movs	r2, #0
 8003444:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003448:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800344c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003450:	4642      	mov	r2, r8
 8003452:	464b      	mov	r3, r9
 8003454:	1891      	adds	r1, r2, r2
 8003456:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003458:	415b      	adcs	r3, r3
 800345a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800345c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003460:	4641      	mov	r1, r8
 8003462:	eb12 0a01 	adds.w	sl, r2, r1
 8003466:	4649      	mov	r1, r9
 8003468:	eb43 0b01 	adc.w	fp, r3, r1
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003478:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800347c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003480:	4692      	mov	sl, r2
 8003482:	469b      	mov	fp, r3
 8003484:	4643      	mov	r3, r8
 8003486:	eb1a 0303 	adds.w	r3, sl, r3
 800348a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800348e:	464b      	mov	r3, r9
 8003490:	eb4b 0303 	adc.w	r3, fp, r3
 8003494:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80034a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034ac:	460b      	mov	r3, r1
 80034ae:	18db      	adds	r3, r3, r3
 80034b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80034b2:	4613      	mov	r3, r2
 80034b4:	eb42 0303 	adc.w	r3, r2, r3
 80034b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80034be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80034c2:	f7fc fefd 	bl	80002c0 <__aeabi_uldivmod>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4611      	mov	r1, r2
 80034cc:	4b3b      	ldr	r3, [pc, #236]	@ (80035bc <UART_SetConfig+0x2d4>)
 80034ce:	fba3 2301 	umull	r2, r3, r3, r1
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	2264      	movs	r2, #100	@ 0x64
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	1acb      	subs	r3, r1, r3
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80034e2:	4b36      	ldr	r3, [pc, #216]	@ (80035bc <UART_SetConfig+0x2d4>)
 80034e4:	fba3 2302 	umull	r2, r3, r3, r2
 80034e8:	095b      	lsrs	r3, r3, #5
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80034f0:	441c      	add	r4, r3
 80034f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034f6:	2200      	movs	r2, #0
 80034f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003500:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003504:	4642      	mov	r2, r8
 8003506:	464b      	mov	r3, r9
 8003508:	1891      	adds	r1, r2, r2
 800350a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800350c:	415b      	adcs	r3, r3
 800350e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003510:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003514:	4641      	mov	r1, r8
 8003516:	1851      	adds	r1, r2, r1
 8003518:	6339      	str	r1, [r7, #48]	@ 0x30
 800351a:	4649      	mov	r1, r9
 800351c:	414b      	adcs	r3, r1
 800351e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800352c:	4659      	mov	r1, fp
 800352e:	00cb      	lsls	r3, r1, #3
 8003530:	4651      	mov	r1, sl
 8003532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003536:	4651      	mov	r1, sl
 8003538:	00ca      	lsls	r2, r1, #3
 800353a:	4610      	mov	r0, r2
 800353c:	4619      	mov	r1, r3
 800353e:	4603      	mov	r3, r0
 8003540:	4642      	mov	r2, r8
 8003542:	189b      	adds	r3, r3, r2
 8003544:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003548:	464b      	mov	r3, r9
 800354a:	460a      	mov	r2, r1
 800354c:	eb42 0303 	adc.w	r3, r2, r3
 8003550:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003560:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003564:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003568:	460b      	mov	r3, r1
 800356a:	18db      	adds	r3, r3, r3
 800356c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800356e:	4613      	mov	r3, r2
 8003570:	eb42 0303 	adc.w	r3, r2, r3
 8003574:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003576:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800357a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800357e:	f7fc fe9f 	bl	80002c0 <__aeabi_uldivmod>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4b0d      	ldr	r3, [pc, #52]	@ (80035bc <UART_SetConfig+0x2d4>)
 8003588:	fba3 1302 	umull	r1, r3, r3, r2
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	2164      	movs	r1, #100	@ 0x64
 8003590:	fb01 f303 	mul.w	r3, r1, r3
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	3332      	adds	r3, #50	@ 0x32
 800359a:	4a08      	ldr	r2, [pc, #32]	@ (80035bc <UART_SetConfig+0x2d4>)
 800359c:	fba2 2303 	umull	r2, r3, r2, r3
 80035a0:	095b      	lsrs	r3, r3, #5
 80035a2:	f003 0207 	and.w	r2, r3, #7
 80035a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4422      	add	r2, r4
 80035ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035b0:	e106      	b.n	80037c0 <UART_SetConfig+0x4d8>
 80035b2:	bf00      	nop
 80035b4:	40011000 	.word	0x40011000
 80035b8:	40011400 	.word	0x40011400
 80035bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035c4:	2200      	movs	r2, #0
 80035c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80035ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80035ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80035d2:	4642      	mov	r2, r8
 80035d4:	464b      	mov	r3, r9
 80035d6:	1891      	adds	r1, r2, r2
 80035d8:	6239      	str	r1, [r7, #32]
 80035da:	415b      	adcs	r3, r3
 80035dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80035de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035e2:	4641      	mov	r1, r8
 80035e4:	1854      	adds	r4, r2, r1
 80035e6:	4649      	mov	r1, r9
 80035e8:	eb43 0501 	adc.w	r5, r3, r1
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	00eb      	lsls	r3, r5, #3
 80035f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035fa:	00e2      	lsls	r2, r4, #3
 80035fc:	4614      	mov	r4, r2
 80035fe:	461d      	mov	r5, r3
 8003600:	4643      	mov	r3, r8
 8003602:	18e3      	adds	r3, r4, r3
 8003604:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003608:	464b      	mov	r3, r9
 800360a:	eb45 0303 	adc.w	r3, r5, r3
 800360e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800361e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800362e:	4629      	mov	r1, r5
 8003630:	008b      	lsls	r3, r1, #2
 8003632:	4621      	mov	r1, r4
 8003634:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003638:	4621      	mov	r1, r4
 800363a:	008a      	lsls	r2, r1, #2
 800363c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003640:	f7fc fe3e 	bl	80002c0 <__aeabi_uldivmod>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4b60      	ldr	r3, [pc, #384]	@ (80037cc <UART_SetConfig+0x4e4>)
 800364a:	fba3 2302 	umull	r2, r3, r3, r2
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	011c      	lsls	r4, r3, #4
 8003652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003656:	2200      	movs	r2, #0
 8003658:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800365c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003660:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003664:	4642      	mov	r2, r8
 8003666:	464b      	mov	r3, r9
 8003668:	1891      	adds	r1, r2, r2
 800366a:	61b9      	str	r1, [r7, #24]
 800366c:	415b      	adcs	r3, r3
 800366e:	61fb      	str	r3, [r7, #28]
 8003670:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003674:	4641      	mov	r1, r8
 8003676:	1851      	adds	r1, r2, r1
 8003678:	6139      	str	r1, [r7, #16]
 800367a:	4649      	mov	r1, r9
 800367c:	414b      	adcs	r3, r1
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800368c:	4659      	mov	r1, fp
 800368e:	00cb      	lsls	r3, r1, #3
 8003690:	4651      	mov	r1, sl
 8003692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003696:	4651      	mov	r1, sl
 8003698:	00ca      	lsls	r2, r1, #3
 800369a:	4610      	mov	r0, r2
 800369c:	4619      	mov	r1, r3
 800369e:	4603      	mov	r3, r0
 80036a0:	4642      	mov	r2, r8
 80036a2:	189b      	adds	r3, r3, r2
 80036a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036a8:	464b      	mov	r3, r9
 80036aa:	460a      	mov	r2, r1
 80036ac:	eb42 0303 	adc.w	r3, r2, r3
 80036b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80036cc:	4649      	mov	r1, r9
 80036ce:	008b      	lsls	r3, r1, #2
 80036d0:	4641      	mov	r1, r8
 80036d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036d6:	4641      	mov	r1, r8
 80036d8:	008a      	lsls	r2, r1, #2
 80036da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80036de:	f7fc fdef 	bl	80002c0 <__aeabi_uldivmod>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4611      	mov	r1, r2
 80036e8:	4b38      	ldr	r3, [pc, #224]	@ (80037cc <UART_SetConfig+0x4e4>)
 80036ea:	fba3 2301 	umull	r2, r3, r3, r1
 80036ee:	095b      	lsrs	r3, r3, #5
 80036f0:	2264      	movs	r2, #100	@ 0x64
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	1acb      	subs	r3, r1, r3
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	3332      	adds	r3, #50	@ 0x32
 80036fc:	4a33      	ldr	r2, [pc, #204]	@ (80037cc <UART_SetConfig+0x4e4>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003708:	441c      	add	r4, r3
 800370a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800370e:	2200      	movs	r2, #0
 8003710:	673b      	str	r3, [r7, #112]	@ 0x70
 8003712:	677a      	str	r2, [r7, #116]	@ 0x74
 8003714:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003718:	4642      	mov	r2, r8
 800371a:	464b      	mov	r3, r9
 800371c:	1891      	adds	r1, r2, r2
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	415b      	adcs	r3, r3
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003728:	4641      	mov	r1, r8
 800372a:	1851      	adds	r1, r2, r1
 800372c:	6039      	str	r1, [r7, #0]
 800372e:	4649      	mov	r1, r9
 8003730:	414b      	adcs	r3, r1
 8003732:	607b      	str	r3, [r7, #4]
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003740:	4659      	mov	r1, fp
 8003742:	00cb      	lsls	r3, r1, #3
 8003744:	4651      	mov	r1, sl
 8003746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800374a:	4651      	mov	r1, sl
 800374c:	00ca      	lsls	r2, r1, #3
 800374e:	4610      	mov	r0, r2
 8003750:	4619      	mov	r1, r3
 8003752:	4603      	mov	r3, r0
 8003754:	4642      	mov	r2, r8
 8003756:	189b      	adds	r3, r3, r2
 8003758:	66bb      	str	r3, [r7, #104]	@ 0x68
 800375a:	464b      	mov	r3, r9
 800375c:	460a      	mov	r2, r1
 800375e:	eb42 0303 	adc.w	r3, r2, r3
 8003762:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	663b      	str	r3, [r7, #96]	@ 0x60
 800376e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800377c:	4649      	mov	r1, r9
 800377e:	008b      	lsls	r3, r1, #2
 8003780:	4641      	mov	r1, r8
 8003782:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003786:	4641      	mov	r1, r8
 8003788:	008a      	lsls	r2, r1, #2
 800378a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800378e:	f7fc fd97 	bl	80002c0 <__aeabi_uldivmod>
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	4b0d      	ldr	r3, [pc, #52]	@ (80037cc <UART_SetConfig+0x4e4>)
 8003798:	fba3 1302 	umull	r1, r3, r3, r2
 800379c:	095b      	lsrs	r3, r3, #5
 800379e:	2164      	movs	r1, #100	@ 0x64
 80037a0:	fb01 f303 	mul.w	r3, r1, r3
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	3332      	adds	r3, #50	@ 0x32
 80037aa:	4a08      	ldr	r2, [pc, #32]	@ (80037cc <UART_SetConfig+0x4e4>)
 80037ac:	fba2 2303 	umull	r2, r3, r2, r3
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	f003 020f 	and.w	r2, r3, #15
 80037b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4422      	add	r2, r4
 80037be:	609a      	str	r2, [r3, #8]
}
 80037c0:	bf00      	nop
 80037c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80037c6:	46bd      	mov	sp, r7
 80037c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037cc:	51eb851f 	.word	0x51eb851f

080037d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037d0:	b084      	sub	sp, #16
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	f107 001c 	add.w	r0, r7, #28
 80037de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d123      	bne.n	8003832 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80037fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003812:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003816:	2b01      	cmp	r3, #1
 8003818:	d105      	bne.n	8003826 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fa9a 	bl	8003d60 <USB_CoreReset>
 800382c:	4603      	mov	r3, r0
 800382e:	73fb      	strb	r3, [r7, #15]
 8003830:	e01b      	b.n	800386a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fa8e 	bl	8003d60 <USB_CoreReset>
 8003844:	4603      	mov	r3, r0
 8003846:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003848:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800384c:	2b00      	cmp	r3, #0
 800384e:	d106      	bne.n	800385e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003854:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	639a      	str	r2, [r3, #56]	@ 0x38
 800385c:	e005      	b.n	800386a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003862:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800386a:	7fbb      	ldrb	r3, [r7, #30]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d10b      	bne.n	8003888 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f043 0206 	orr.w	r2, r3, #6
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f043 0220 	orr.w	r2, r3, #32
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003888:	7bfb      	ldrb	r3, [r7, #15]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003894:	b004      	add	sp, #16
 8003896:	4770      	bx	lr

08003898 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f023 0201 	bic.w	r2, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b084      	sub	sp, #16
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	460b      	mov	r3, r1
 80038c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80038d6:	78fb      	ldrb	r3, [r7, #3]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d115      	bne.n	8003908 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80038e8:	200a      	movs	r0, #10
 80038ea:	f7fd fb3d 	bl	8000f68 <HAL_Delay>
      ms += 10U;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	330a      	adds	r3, #10
 80038f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fa25 	bl	8003d44 <USB_GetMode>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d01e      	beq.n	800393e <USB_SetCurrentMode+0x84>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2bc7      	cmp	r3, #199	@ 0xc7
 8003904:	d9f0      	bls.n	80038e8 <USB_SetCurrentMode+0x2e>
 8003906:	e01a      	b.n	800393e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d115      	bne.n	800393a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800391a:	200a      	movs	r0, #10
 800391c:	f7fd fb24 	bl	8000f68 <HAL_Delay>
      ms += 10U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	330a      	adds	r3, #10
 8003924:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fa0c 	bl	8003d44 <USB_GetMode>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d005      	beq.n	800393e <USB_SetCurrentMode+0x84>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2bc7      	cmp	r3, #199	@ 0xc7
 8003936:	d9f0      	bls.n	800391a <USB_SetCurrentMode+0x60>
 8003938:	e001      	b.n	800393e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e005      	b.n	800394a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2bc8      	cmp	r3, #200	@ 0xc8
 8003942:	d101      	bne.n	8003948 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003954:	b084      	sub	sp, #16
 8003956:	b580      	push	{r7, lr}
 8003958:	b086      	sub	sp, #24
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800396e:	2300      	movs	r3, #0
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	e009      	b.n	8003988 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	3340      	adds	r3, #64	@ 0x40
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	2200      	movs	r2, #0
 8003980:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	3301      	adds	r3, #1
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	2b0e      	cmp	r3, #14
 800398c:	d9f2      	bls.n	8003974 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800398e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003992:	2b00      	cmp	r3, #0
 8003994:	d11c      	bne.n	80039d0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039a4:	f043 0302 	orr.w	r3, r3, #2
 80039a8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ae:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	e005      	b.n	80039dc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80039e2:	461a      	mov	r2, r3
 80039e4:	2300      	movs	r3, #0
 80039e6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039e8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d10d      	bne.n	8003a0c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80039f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d104      	bne.n	8003a02 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80039f8:	2100      	movs	r1, #0
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f968 	bl	8003cd0 <USB_SetDevSpeed>
 8003a00:	e008      	b.n	8003a14 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a02:	2101      	movs	r1, #1
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f963 	bl	8003cd0 <USB_SetDevSpeed>
 8003a0a:	e003      	b.n	8003a14 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a0c:	2103      	movs	r1, #3
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f95e 	bl	8003cd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a14:	2110      	movs	r1, #16
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f8fa 	bl	8003c10 <USB_FlushTxFifo>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f924 	bl	8003c74 <USB_FlushRxFifo>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	2300      	movs	r3, #0
 8003a40:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a54:	461a      	mov	r2, r3
 8003a56:	2300      	movs	r3, #0
 8003a58:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	e043      	b.n	8003ae8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a76:	d118      	bne.n	8003aaa <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10a      	bne.n	8003a94 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	e013      	b.n	8003abc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	e008      	b.n	8003abc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	2300      	movs	r3, #0
 8003aba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ac8:	461a      	mov	r2, r3
 8003aca:	2300      	movs	r3, #0
 8003acc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ada:	461a      	mov	r2, r3
 8003adc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ae0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003aec:	461a      	mov	r2, r3
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d3b5      	bcc.n	8003a60 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003af4:	2300      	movs	r3, #0
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	e043      	b.n	8003b82 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b10:	d118      	bne.n	8003b44 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10a      	bne.n	8003b2e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b24:	461a      	mov	r2, r3
 8003b26:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	e013      	b.n	8003b56 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	e008      	b.n	8003b56 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b50:	461a      	mov	r2, r3
 8003b52:	2300      	movs	r3, #0
 8003b54:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b62:	461a      	mov	r2, r3
 8003b64:	2300      	movs	r3, #0
 8003b66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b74:	461a      	mov	r2, r3
 8003b76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b86:	461a      	mov	r2, r3
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d3b5      	bcc.n	8003afa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ba0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003bae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003bb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d105      	bne.n	8003bc4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	f043 0210 	orr.w	r2, r3, #16
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699a      	ldr	r2, [r3, #24]
 8003bc8:	4b10      	ldr	r3, [pc, #64]	@ (8003c0c <USB_DevInit+0x2b8>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003bd0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	f043 0208 	orr.w	r2, r3, #8
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003be4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d107      	bne.n	8003bfc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003bf4:	f043 0304 	orr.w	r3, r3, #4
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c08:	b004      	add	sp, #16
 8003c0a:	4770      	bx	lr
 8003c0c:	803c3800 	.word	0x803c3800

08003c10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	3301      	adds	r3, #1
 8003c22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c2a:	d901      	bls.n	8003c30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e01b      	b.n	8003c68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	daf2      	bge.n	8003c1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	019b      	lsls	r3, r3, #6
 8003c40:	f043 0220 	orr.w	r2, r3, #32
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c54:	d901      	bls.n	8003c5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e006      	b.n	8003c68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d0f0      	beq.n	8003c48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	3301      	adds	r3, #1
 8003c84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c8c:	d901      	bls.n	8003c92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e018      	b.n	8003cc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	daf2      	bge.n	8003c80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2210      	movs	r2, #16
 8003ca2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003cb0:	d901      	bls.n	8003cb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e006      	b.n	8003cc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b10      	cmp	r3, #16
 8003cc0:	d0f0      	beq.n	8003ca4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	68f9      	ldr	r1, [r7, #12]
 8003cec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b085      	sub	sp, #20
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003d1c:	f023 0303 	bic.w	r3, r3, #3
 8003d20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d30:	f043 0302 	orr.w	r3, r3, #2
 8003d34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	f003 0301 	and.w	r3, r3, #1
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d78:	d901      	bls.n	8003d7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e01b      	b.n	8003db6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	daf2      	bge.n	8003d6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f043 0201 	orr.w	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003da2:	d901      	bls.n	8003da8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e006      	b.n	8003db6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d0f0      	beq.n	8003d96 <USB_CoreReset+0x36>

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <siprintf>:
 8003dc4:	b40e      	push	{r1, r2, r3}
 8003dc6:	b500      	push	{lr}
 8003dc8:	b09c      	sub	sp, #112	@ 0x70
 8003dca:	ab1d      	add	r3, sp, #116	@ 0x74
 8003dcc:	9002      	str	r0, [sp, #8]
 8003dce:	9006      	str	r0, [sp, #24]
 8003dd0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003dd4:	4809      	ldr	r0, [pc, #36]	@ (8003dfc <siprintf+0x38>)
 8003dd6:	9107      	str	r1, [sp, #28]
 8003dd8:	9104      	str	r1, [sp, #16]
 8003dda:	4909      	ldr	r1, [pc, #36]	@ (8003e00 <siprintf+0x3c>)
 8003ddc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003de0:	9105      	str	r1, [sp, #20]
 8003de2:	6800      	ldr	r0, [r0, #0]
 8003de4:	9301      	str	r3, [sp, #4]
 8003de6:	a902      	add	r1, sp, #8
 8003de8:	f000 f994 	bl	8004114 <_svfiprintf_r>
 8003dec:	9b02      	ldr	r3, [sp, #8]
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]
 8003df2:	b01c      	add	sp, #112	@ 0x70
 8003df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003df8:	b003      	add	sp, #12
 8003dfa:	4770      	bx	lr
 8003dfc:	2000000c 	.word	0x2000000c
 8003e00:	ffff0208 	.word	0xffff0208

08003e04 <memset>:
 8003e04:	4402      	add	r2, r0
 8003e06:	4603      	mov	r3, r0
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d100      	bne.n	8003e0e <memset+0xa>
 8003e0c:	4770      	bx	lr
 8003e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e12:	e7f9      	b.n	8003e08 <memset+0x4>

08003e14 <__errno>:
 8003e14:	4b01      	ldr	r3, [pc, #4]	@ (8003e1c <__errno+0x8>)
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	2000000c 	.word	0x2000000c

08003e20 <__libc_init_array>:
 8003e20:	b570      	push	{r4, r5, r6, lr}
 8003e22:	4d0d      	ldr	r5, [pc, #52]	@ (8003e58 <__libc_init_array+0x38>)
 8003e24:	4c0d      	ldr	r4, [pc, #52]	@ (8003e5c <__libc_init_array+0x3c>)
 8003e26:	1b64      	subs	r4, r4, r5
 8003e28:	10a4      	asrs	r4, r4, #2
 8003e2a:	2600      	movs	r6, #0
 8003e2c:	42a6      	cmp	r6, r4
 8003e2e:	d109      	bne.n	8003e44 <__libc_init_array+0x24>
 8003e30:	4d0b      	ldr	r5, [pc, #44]	@ (8003e60 <__libc_init_array+0x40>)
 8003e32:	4c0c      	ldr	r4, [pc, #48]	@ (8003e64 <__libc_init_array+0x44>)
 8003e34:	f000 fc66 	bl	8004704 <_init>
 8003e38:	1b64      	subs	r4, r4, r5
 8003e3a:	10a4      	asrs	r4, r4, #2
 8003e3c:	2600      	movs	r6, #0
 8003e3e:	42a6      	cmp	r6, r4
 8003e40:	d105      	bne.n	8003e4e <__libc_init_array+0x2e>
 8003e42:	bd70      	pop	{r4, r5, r6, pc}
 8003e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e48:	4798      	blx	r3
 8003e4a:	3601      	adds	r6, #1
 8003e4c:	e7ee      	b.n	8003e2c <__libc_init_array+0xc>
 8003e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e52:	4798      	blx	r3
 8003e54:	3601      	adds	r6, #1
 8003e56:	e7f2      	b.n	8003e3e <__libc_init_array+0x1e>
 8003e58:	080047dc 	.word	0x080047dc
 8003e5c:	080047dc 	.word	0x080047dc
 8003e60:	080047dc 	.word	0x080047dc
 8003e64:	080047e0 	.word	0x080047e0

08003e68 <__retarget_lock_acquire_recursive>:
 8003e68:	4770      	bx	lr

08003e6a <__retarget_lock_release_recursive>:
 8003e6a:	4770      	bx	lr

08003e6c <_free_r>:
 8003e6c:	b538      	push	{r3, r4, r5, lr}
 8003e6e:	4605      	mov	r5, r0
 8003e70:	2900      	cmp	r1, #0
 8003e72:	d041      	beq.n	8003ef8 <_free_r+0x8c>
 8003e74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e78:	1f0c      	subs	r4, r1, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	bfb8      	it	lt
 8003e7e:	18e4      	addlt	r4, r4, r3
 8003e80:	f000 f8e0 	bl	8004044 <__malloc_lock>
 8003e84:	4a1d      	ldr	r2, [pc, #116]	@ (8003efc <_free_r+0x90>)
 8003e86:	6813      	ldr	r3, [r2, #0]
 8003e88:	b933      	cbnz	r3, 8003e98 <_free_r+0x2c>
 8003e8a:	6063      	str	r3, [r4, #4]
 8003e8c:	6014      	str	r4, [r2, #0]
 8003e8e:	4628      	mov	r0, r5
 8003e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e94:	f000 b8dc 	b.w	8004050 <__malloc_unlock>
 8003e98:	42a3      	cmp	r3, r4
 8003e9a:	d908      	bls.n	8003eae <_free_r+0x42>
 8003e9c:	6820      	ldr	r0, [r4, #0]
 8003e9e:	1821      	adds	r1, r4, r0
 8003ea0:	428b      	cmp	r3, r1
 8003ea2:	bf01      	itttt	eq
 8003ea4:	6819      	ldreq	r1, [r3, #0]
 8003ea6:	685b      	ldreq	r3, [r3, #4]
 8003ea8:	1809      	addeq	r1, r1, r0
 8003eaa:	6021      	streq	r1, [r4, #0]
 8003eac:	e7ed      	b.n	8003e8a <_free_r+0x1e>
 8003eae:	461a      	mov	r2, r3
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	b10b      	cbz	r3, 8003eb8 <_free_r+0x4c>
 8003eb4:	42a3      	cmp	r3, r4
 8003eb6:	d9fa      	bls.n	8003eae <_free_r+0x42>
 8003eb8:	6811      	ldr	r1, [r2, #0]
 8003eba:	1850      	adds	r0, r2, r1
 8003ebc:	42a0      	cmp	r0, r4
 8003ebe:	d10b      	bne.n	8003ed8 <_free_r+0x6c>
 8003ec0:	6820      	ldr	r0, [r4, #0]
 8003ec2:	4401      	add	r1, r0
 8003ec4:	1850      	adds	r0, r2, r1
 8003ec6:	4283      	cmp	r3, r0
 8003ec8:	6011      	str	r1, [r2, #0]
 8003eca:	d1e0      	bne.n	8003e8e <_free_r+0x22>
 8003ecc:	6818      	ldr	r0, [r3, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	6053      	str	r3, [r2, #4]
 8003ed2:	4408      	add	r0, r1
 8003ed4:	6010      	str	r0, [r2, #0]
 8003ed6:	e7da      	b.n	8003e8e <_free_r+0x22>
 8003ed8:	d902      	bls.n	8003ee0 <_free_r+0x74>
 8003eda:	230c      	movs	r3, #12
 8003edc:	602b      	str	r3, [r5, #0]
 8003ede:	e7d6      	b.n	8003e8e <_free_r+0x22>
 8003ee0:	6820      	ldr	r0, [r4, #0]
 8003ee2:	1821      	adds	r1, r4, r0
 8003ee4:	428b      	cmp	r3, r1
 8003ee6:	bf04      	itt	eq
 8003ee8:	6819      	ldreq	r1, [r3, #0]
 8003eea:	685b      	ldreq	r3, [r3, #4]
 8003eec:	6063      	str	r3, [r4, #4]
 8003eee:	bf04      	itt	eq
 8003ef0:	1809      	addeq	r1, r1, r0
 8003ef2:	6021      	streq	r1, [r4, #0]
 8003ef4:	6054      	str	r4, [r2, #4]
 8003ef6:	e7ca      	b.n	8003e8e <_free_r+0x22>
 8003ef8:	bd38      	pop	{r3, r4, r5, pc}
 8003efa:	bf00      	nop
 8003efc:	20000830 	.word	0x20000830

08003f00 <sbrk_aligned>:
 8003f00:	b570      	push	{r4, r5, r6, lr}
 8003f02:	4e0f      	ldr	r6, [pc, #60]	@ (8003f40 <sbrk_aligned+0x40>)
 8003f04:	460c      	mov	r4, r1
 8003f06:	6831      	ldr	r1, [r6, #0]
 8003f08:	4605      	mov	r5, r0
 8003f0a:	b911      	cbnz	r1, 8003f12 <sbrk_aligned+0x12>
 8003f0c:	f000 fba6 	bl	800465c <_sbrk_r>
 8003f10:	6030      	str	r0, [r6, #0]
 8003f12:	4621      	mov	r1, r4
 8003f14:	4628      	mov	r0, r5
 8003f16:	f000 fba1 	bl	800465c <_sbrk_r>
 8003f1a:	1c43      	adds	r3, r0, #1
 8003f1c:	d103      	bne.n	8003f26 <sbrk_aligned+0x26>
 8003f1e:	f04f 34ff 	mov.w	r4, #4294967295
 8003f22:	4620      	mov	r0, r4
 8003f24:	bd70      	pop	{r4, r5, r6, pc}
 8003f26:	1cc4      	adds	r4, r0, #3
 8003f28:	f024 0403 	bic.w	r4, r4, #3
 8003f2c:	42a0      	cmp	r0, r4
 8003f2e:	d0f8      	beq.n	8003f22 <sbrk_aligned+0x22>
 8003f30:	1a21      	subs	r1, r4, r0
 8003f32:	4628      	mov	r0, r5
 8003f34:	f000 fb92 	bl	800465c <_sbrk_r>
 8003f38:	3001      	adds	r0, #1
 8003f3a:	d1f2      	bne.n	8003f22 <sbrk_aligned+0x22>
 8003f3c:	e7ef      	b.n	8003f1e <sbrk_aligned+0x1e>
 8003f3e:	bf00      	nop
 8003f40:	2000082c 	.word	0x2000082c

08003f44 <_malloc_r>:
 8003f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f48:	1ccd      	adds	r5, r1, #3
 8003f4a:	f025 0503 	bic.w	r5, r5, #3
 8003f4e:	3508      	adds	r5, #8
 8003f50:	2d0c      	cmp	r5, #12
 8003f52:	bf38      	it	cc
 8003f54:	250c      	movcc	r5, #12
 8003f56:	2d00      	cmp	r5, #0
 8003f58:	4606      	mov	r6, r0
 8003f5a:	db01      	blt.n	8003f60 <_malloc_r+0x1c>
 8003f5c:	42a9      	cmp	r1, r5
 8003f5e:	d904      	bls.n	8003f6a <_malloc_r+0x26>
 8003f60:	230c      	movs	r3, #12
 8003f62:	6033      	str	r3, [r6, #0]
 8003f64:	2000      	movs	r0, #0
 8003f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004040 <_malloc_r+0xfc>
 8003f6e:	f000 f869 	bl	8004044 <__malloc_lock>
 8003f72:	f8d8 3000 	ldr.w	r3, [r8]
 8003f76:	461c      	mov	r4, r3
 8003f78:	bb44      	cbnz	r4, 8003fcc <_malloc_r+0x88>
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	f7ff ffbf 	bl	8003f00 <sbrk_aligned>
 8003f82:	1c43      	adds	r3, r0, #1
 8003f84:	4604      	mov	r4, r0
 8003f86:	d158      	bne.n	800403a <_malloc_r+0xf6>
 8003f88:	f8d8 4000 	ldr.w	r4, [r8]
 8003f8c:	4627      	mov	r7, r4
 8003f8e:	2f00      	cmp	r7, #0
 8003f90:	d143      	bne.n	800401a <_malloc_r+0xd6>
 8003f92:	2c00      	cmp	r4, #0
 8003f94:	d04b      	beq.n	800402e <_malloc_r+0xea>
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	4639      	mov	r1, r7
 8003f9a:	4630      	mov	r0, r6
 8003f9c:	eb04 0903 	add.w	r9, r4, r3
 8003fa0:	f000 fb5c 	bl	800465c <_sbrk_r>
 8003fa4:	4581      	cmp	r9, r0
 8003fa6:	d142      	bne.n	800402e <_malloc_r+0xea>
 8003fa8:	6821      	ldr	r1, [r4, #0]
 8003faa:	1a6d      	subs	r5, r5, r1
 8003fac:	4629      	mov	r1, r5
 8003fae:	4630      	mov	r0, r6
 8003fb0:	f7ff ffa6 	bl	8003f00 <sbrk_aligned>
 8003fb4:	3001      	adds	r0, #1
 8003fb6:	d03a      	beq.n	800402e <_malloc_r+0xea>
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	442b      	add	r3, r5
 8003fbc:	6023      	str	r3, [r4, #0]
 8003fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	bb62      	cbnz	r2, 8004020 <_malloc_r+0xdc>
 8003fc6:	f8c8 7000 	str.w	r7, [r8]
 8003fca:	e00f      	b.n	8003fec <_malloc_r+0xa8>
 8003fcc:	6822      	ldr	r2, [r4, #0]
 8003fce:	1b52      	subs	r2, r2, r5
 8003fd0:	d420      	bmi.n	8004014 <_malloc_r+0xd0>
 8003fd2:	2a0b      	cmp	r2, #11
 8003fd4:	d917      	bls.n	8004006 <_malloc_r+0xc2>
 8003fd6:	1961      	adds	r1, r4, r5
 8003fd8:	42a3      	cmp	r3, r4
 8003fda:	6025      	str	r5, [r4, #0]
 8003fdc:	bf18      	it	ne
 8003fde:	6059      	strne	r1, [r3, #4]
 8003fe0:	6863      	ldr	r3, [r4, #4]
 8003fe2:	bf08      	it	eq
 8003fe4:	f8c8 1000 	streq.w	r1, [r8]
 8003fe8:	5162      	str	r2, [r4, r5]
 8003fea:	604b      	str	r3, [r1, #4]
 8003fec:	4630      	mov	r0, r6
 8003fee:	f000 f82f 	bl	8004050 <__malloc_unlock>
 8003ff2:	f104 000b 	add.w	r0, r4, #11
 8003ff6:	1d23      	adds	r3, r4, #4
 8003ff8:	f020 0007 	bic.w	r0, r0, #7
 8003ffc:	1ac2      	subs	r2, r0, r3
 8003ffe:	bf1c      	itt	ne
 8004000:	1a1b      	subne	r3, r3, r0
 8004002:	50a3      	strne	r3, [r4, r2]
 8004004:	e7af      	b.n	8003f66 <_malloc_r+0x22>
 8004006:	6862      	ldr	r2, [r4, #4]
 8004008:	42a3      	cmp	r3, r4
 800400a:	bf0c      	ite	eq
 800400c:	f8c8 2000 	streq.w	r2, [r8]
 8004010:	605a      	strne	r2, [r3, #4]
 8004012:	e7eb      	b.n	8003fec <_malloc_r+0xa8>
 8004014:	4623      	mov	r3, r4
 8004016:	6864      	ldr	r4, [r4, #4]
 8004018:	e7ae      	b.n	8003f78 <_malloc_r+0x34>
 800401a:	463c      	mov	r4, r7
 800401c:	687f      	ldr	r7, [r7, #4]
 800401e:	e7b6      	b.n	8003f8e <_malloc_r+0x4a>
 8004020:	461a      	mov	r2, r3
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	42a3      	cmp	r3, r4
 8004026:	d1fb      	bne.n	8004020 <_malloc_r+0xdc>
 8004028:	2300      	movs	r3, #0
 800402a:	6053      	str	r3, [r2, #4]
 800402c:	e7de      	b.n	8003fec <_malloc_r+0xa8>
 800402e:	230c      	movs	r3, #12
 8004030:	6033      	str	r3, [r6, #0]
 8004032:	4630      	mov	r0, r6
 8004034:	f000 f80c 	bl	8004050 <__malloc_unlock>
 8004038:	e794      	b.n	8003f64 <_malloc_r+0x20>
 800403a:	6005      	str	r5, [r0, #0]
 800403c:	e7d6      	b.n	8003fec <_malloc_r+0xa8>
 800403e:	bf00      	nop
 8004040:	20000830 	.word	0x20000830

08004044 <__malloc_lock>:
 8004044:	4801      	ldr	r0, [pc, #4]	@ (800404c <__malloc_lock+0x8>)
 8004046:	f7ff bf0f 	b.w	8003e68 <__retarget_lock_acquire_recursive>
 800404a:	bf00      	nop
 800404c:	20000828 	.word	0x20000828

08004050 <__malloc_unlock>:
 8004050:	4801      	ldr	r0, [pc, #4]	@ (8004058 <__malloc_unlock+0x8>)
 8004052:	f7ff bf0a 	b.w	8003e6a <__retarget_lock_release_recursive>
 8004056:	bf00      	nop
 8004058:	20000828 	.word	0x20000828

0800405c <__ssputs_r>:
 800405c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004060:	688e      	ldr	r6, [r1, #8]
 8004062:	461f      	mov	r7, r3
 8004064:	42be      	cmp	r6, r7
 8004066:	680b      	ldr	r3, [r1, #0]
 8004068:	4682      	mov	sl, r0
 800406a:	460c      	mov	r4, r1
 800406c:	4690      	mov	r8, r2
 800406e:	d82d      	bhi.n	80040cc <__ssputs_r+0x70>
 8004070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004074:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004078:	d026      	beq.n	80040c8 <__ssputs_r+0x6c>
 800407a:	6965      	ldr	r5, [r4, #20]
 800407c:	6909      	ldr	r1, [r1, #16]
 800407e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004082:	eba3 0901 	sub.w	r9, r3, r1
 8004086:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800408a:	1c7b      	adds	r3, r7, #1
 800408c:	444b      	add	r3, r9
 800408e:	106d      	asrs	r5, r5, #1
 8004090:	429d      	cmp	r5, r3
 8004092:	bf38      	it	cc
 8004094:	461d      	movcc	r5, r3
 8004096:	0553      	lsls	r3, r2, #21
 8004098:	d527      	bpl.n	80040ea <__ssputs_r+0x8e>
 800409a:	4629      	mov	r1, r5
 800409c:	f7ff ff52 	bl	8003f44 <_malloc_r>
 80040a0:	4606      	mov	r6, r0
 80040a2:	b360      	cbz	r0, 80040fe <__ssputs_r+0xa2>
 80040a4:	6921      	ldr	r1, [r4, #16]
 80040a6:	464a      	mov	r2, r9
 80040a8:	f000 fae8 	bl	800467c <memcpy>
 80040ac:	89a3      	ldrh	r3, [r4, #12]
 80040ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80040b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040b6:	81a3      	strh	r3, [r4, #12]
 80040b8:	6126      	str	r6, [r4, #16]
 80040ba:	6165      	str	r5, [r4, #20]
 80040bc:	444e      	add	r6, r9
 80040be:	eba5 0509 	sub.w	r5, r5, r9
 80040c2:	6026      	str	r6, [r4, #0]
 80040c4:	60a5      	str	r5, [r4, #8]
 80040c6:	463e      	mov	r6, r7
 80040c8:	42be      	cmp	r6, r7
 80040ca:	d900      	bls.n	80040ce <__ssputs_r+0x72>
 80040cc:	463e      	mov	r6, r7
 80040ce:	6820      	ldr	r0, [r4, #0]
 80040d0:	4632      	mov	r2, r6
 80040d2:	4641      	mov	r1, r8
 80040d4:	f000 faa8 	bl	8004628 <memmove>
 80040d8:	68a3      	ldr	r3, [r4, #8]
 80040da:	1b9b      	subs	r3, r3, r6
 80040dc:	60a3      	str	r3, [r4, #8]
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	4433      	add	r3, r6
 80040e2:	6023      	str	r3, [r4, #0]
 80040e4:	2000      	movs	r0, #0
 80040e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ea:	462a      	mov	r2, r5
 80040ec:	f000 fad4 	bl	8004698 <_realloc_r>
 80040f0:	4606      	mov	r6, r0
 80040f2:	2800      	cmp	r0, #0
 80040f4:	d1e0      	bne.n	80040b8 <__ssputs_r+0x5c>
 80040f6:	6921      	ldr	r1, [r4, #16]
 80040f8:	4650      	mov	r0, sl
 80040fa:	f7ff feb7 	bl	8003e6c <_free_r>
 80040fe:	230c      	movs	r3, #12
 8004100:	f8ca 3000 	str.w	r3, [sl]
 8004104:	89a3      	ldrh	r3, [r4, #12]
 8004106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800410a:	81a3      	strh	r3, [r4, #12]
 800410c:	f04f 30ff 	mov.w	r0, #4294967295
 8004110:	e7e9      	b.n	80040e6 <__ssputs_r+0x8a>
	...

08004114 <_svfiprintf_r>:
 8004114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004118:	4698      	mov	r8, r3
 800411a:	898b      	ldrh	r3, [r1, #12]
 800411c:	061b      	lsls	r3, r3, #24
 800411e:	b09d      	sub	sp, #116	@ 0x74
 8004120:	4607      	mov	r7, r0
 8004122:	460d      	mov	r5, r1
 8004124:	4614      	mov	r4, r2
 8004126:	d510      	bpl.n	800414a <_svfiprintf_r+0x36>
 8004128:	690b      	ldr	r3, [r1, #16]
 800412a:	b973      	cbnz	r3, 800414a <_svfiprintf_r+0x36>
 800412c:	2140      	movs	r1, #64	@ 0x40
 800412e:	f7ff ff09 	bl	8003f44 <_malloc_r>
 8004132:	6028      	str	r0, [r5, #0]
 8004134:	6128      	str	r0, [r5, #16]
 8004136:	b930      	cbnz	r0, 8004146 <_svfiprintf_r+0x32>
 8004138:	230c      	movs	r3, #12
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	f04f 30ff 	mov.w	r0, #4294967295
 8004140:	b01d      	add	sp, #116	@ 0x74
 8004142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004146:	2340      	movs	r3, #64	@ 0x40
 8004148:	616b      	str	r3, [r5, #20]
 800414a:	2300      	movs	r3, #0
 800414c:	9309      	str	r3, [sp, #36]	@ 0x24
 800414e:	2320      	movs	r3, #32
 8004150:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004154:	f8cd 800c 	str.w	r8, [sp, #12]
 8004158:	2330      	movs	r3, #48	@ 0x30
 800415a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80042f8 <_svfiprintf_r+0x1e4>
 800415e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004162:	f04f 0901 	mov.w	r9, #1
 8004166:	4623      	mov	r3, r4
 8004168:	469a      	mov	sl, r3
 800416a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800416e:	b10a      	cbz	r2, 8004174 <_svfiprintf_r+0x60>
 8004170:	2a25      	cmp	r2, #37	@ 0x25
 8004172:	d1f9      	bne.n	8004168 <_svfiprintf_r+0x54>
 8004174:	ebba 0b04 	subs.w	fp, sl, r4
 8004178:	d00b      	beq.n	8004192 <_svfiprintf_r+0x7e>
 800417a:	465b      	mov	r3, fp
 800417c:	4622      	mov	r2, r4
 800417e:	4629      	mov	r1, r5
 8004180:	4638      	mov	r0, r7
 8004182:	f7ff ff6b 	bl	800405c <__ssputs_r>
 8004186:	3001      	adds	r0, #1
 8004188:	f000 80a7 	beq.w	80042da <_svfiprintf_r+0x1c6>
 800418c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800418e:	445a      	add	r2, fp
 8004190:	9209      	str	r2, [sp, #36]	@ 0x24
 8004192:	f89a 3000 	ldrb.w	r3, [sl]
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 809f 	beq.w	80042da <_svfiprintf_r+0x1c6>
 800419c:	2300      	movs	r3, #0
 800419e:	f04f 32ff 	mov.w	r2, #4294967295
 80041a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041a6:	f10a 0a01 	add.w	sl, sl, #1
 80041aa:	9304      	str	r3, [sp, #16]
 80041ac:	9307      	str	r3, [sp, #28]
 80041ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80041b4:	4654      	mov	r4, sl
 80041b6:	2205      	movs	r2, #5
 80041b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041bc:	484e      	ldr	r0, [pc, #312]	@ (80042f8 <_svfiprintf_r+0x1e4>)
 80041be:	f7fc f82f 	bl	8000220 <memchr>
 80041c2:	9a04      	ldr	r2, [sp, #16]
 80041c4:	b9d8      	cbnz	r0, 80041fe <_svfiprintf_r+0xea>
 80041c6:	06d0      	lsls	r0, r2, #27
 80041c8:	bf44      	itt	mi
 80041ca:	2320      	movmi	r3, #32
 80041cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041d0:	0711      	lsls	r1, r2, #28
 80041d2:	bf44      	itt	mi
 80041d4:	232b      	movmi	r3, #43	@ 0x2b
 80041d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041da:	f89a 3000 	ldrb.w	r3, [sl]
 80041de:	2b2a      	cmp	r3, #42	@ 0x2a
 80041e0:	d015      	beq.n	800420e <_svfiprintf_r+0xfa>
 80041e2:	9a07      	ldr	r2, [sp, #28]
 80041e4:	4654      	mov	r4, sl
 80041e6:	2000      	movs	r0, #0
 80041e8:	f04f 0c0a 	mov.w	ip, #10
 80041ec:	4621      	mov	r1, r4
 80041ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041f2:	3b30      	subs	r3, #48	@ 0x30
 80041f4:	2b09      	cmp	r3, #9
 80041f6:	d94b      	bls.n	8004290 <_svfiprintf_r+0x17c>
 80041f8:	b1b0      	cbz	r0, 8004228 <_svfiprintf_r+0x114>
 80041fa:	9207      	str	r2, [sp, #28]
 80041fc:	e014      	b.n	8004228 <_svfiprintf_r+0x114>
 80041fe:	eba0 0308 	sub.w	r3, r0, r8
 8004202:	fa09 f303 	lsl.w	r3, r9, r3
 8004206:	4313      	orrs	r3, r2
 8004208:	9304      	str	r3, [sp, #16]
 800420a:	46a2      	mov	sl, r4
 800420c:	e7d2      	b.n	80041b4 <_svfiprintf_r+0xa0>
 800420e:	9b03      	ldr	r3, [sp, #12]
 8004210:	1d19      	adds	r1, r3, #4
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	9103      	str	r1, [sp, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	bfbb      	ittet	lt
 800421a:	425b      	neglt	r3, r3
 800421c:	f042 0202 	orrlt.w	r2, r2, #2
 8004220:	9307      	strge	r3, [sp, #28]
 8004222:	9307      	strlt	r3, [sp, #28]
 8004224:	bfb8      	it	lt
 8004226:	9204      	strlt	r2, [sp, #16]
 8004228:	7823      	ldrb	r3, [r4, #0]
 800422a:	2b2e      	cmp	r3, #46	@ 0x2e
 800422c:	d10a      	bne.n	8004244 <_svfiprintf_r+0x130>
 800422e:	7863      	ldrb	r3, [r4, #1]
 8004230:	2b2a      	cmp	r3, #42	@ 0x2a
 8004232:	d132      	bne.n	800429a <_svfiprintf_r+0x186>
 8004234:	9b03      	ldr	r3, [sp, #12]
 8004236:	1d1a      	adds	r2, r3, #4
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	9203      	str	r2, [sp, #12]
 800423c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004240:	3402      	adds	r4, #2
 8004242:	9305      	str	r3, [sp, #20]
 8004244:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004308 <_svfiprintf_r+0x1f4>
 8004248:	7821      	ldrb	r1, [r4, #0]
 800424a:	2203      	movs	r2, #3
 800424c:	4650      	mov	r0, sl
 800424e:	f7fb ffe7 	bl	8000220 <memchr>
 8004252:	b138      	cbz	r0, 8004264 <_svfiprintf_r+0x150>
 8004254:	9b04      	ldr	r3, [sp, #16]
 8004256:	eba0 000a 	sub.w	r0, r0, sl
 800425a:	2240      	movs	r2, #64	@ 0x40
 800425c:	4082      	lsls	r2, r0
 800425e:	4313      	orrs	r3, r2
 8004260:	3401      	adds	r4, #1
 8004262:	9304      	str	r3, [sp, #16]
 8004264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004268:	4824      	ldr	r0, [pc, #144]	@ (80042fc <_svfiprintf_r+0x1e8>)
 800426a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800426e:	2206      	movs	r2, #6
 8004270:	f7fb ffd6 	bl	8000220 <memchr>
 8004274:	2800      	cmp	r0, #0
 8004276:	d036      	beq.n	80042e6 <_svfiprintf_r+0x1d2>
 8004278:	4b21      	ldr	r3, [pc, #132]	@ (8004300 <_svfiprintf_r+0x1ec>)
 800427a:	bb1b      	cbnz	r3, 80042c4 <_svfiprintf_r+0x1b0>
 800427c:	9b03      	ldr	r3, [sp, #12]
 800427e:	3307      	adds	r3, #7
 8004280:	f023 0307 	bic.w	r3, r3, #7
 8004284:	3308      	adds	r3, #8
 8004286:	9303      	str	r3, [sp, #12]
 8004288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800428a:	4433      	add	r3, r6
 800428c:	9309      	str	r3, [sp, #36]	@ 0x24
 800428e:	e76a      	b.n	8004166 <_svfiprintf_r+0x52>
 8004290:	fb0c 3202 	mla	r2, ip, r2, r3
 8004294:	460c      	mov	r4, r1
 8004296:	2001      	movs	r0, #1
 8004298:	e7a8      	b.n	80041ec <_svfiprintf_r+0xd8>
 800429a:	2300      	movs	r3, #0
 800429c:	3401      	adds	r4, #1
 800429e:	9305      	str	r3, [sp, #20]
 80042a0:	4619      	mov	r1, r3
 80042a2:	f04f 0c0a 	mov.w	ip, #10
 80042a6:	4620      	mov	r0, r4
 80042a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042ac:	3a30      	subs	r2, #48	@ 0x30
 80042ae:	2a09      	cmp	r2, #9
 80042b0:	d903      	bls.n	80042ba <_svfiprintf_r+0x1a6>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0c6      	beq.n	8004244 <_svfiprintf_r+0x130>
 80042b6:	9105      	str	r1, [sp, #20]
 80042b8:	e7c4      	b.n	8004244 <_svfiprintf_r+0x130>
 80042ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80042be:	4604      	mov	r4, r0
 80042c0:	2301      	movs	r3, #1
 80042c2:	e7f0      	b.n	80042a6 <_svfiprintf_r+0x192>
 80042c4:	ab03      	add	r3, sp, #12
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	462a      	mov	r2, r5
 80042ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004304 <_svfiprintf_r+0x1f0>)
 80042cc:	a904      	add	r1, sp, #16
 80042ce:	4638      	mov	r0, r7
 80042d0:	f3af 8000 	nop.w
 80042d4:	1c42      	adds	r2, r0, #1
 80042d6:	4606      	mov	r6, r0
 80042d8:	d1d6      	bne.n	8004288 <_svfiprintf_r+0x174>
 80042da:	89ab      	ldrh	r3, [r5, #12]
 80042dc:	065b      	lsls	r3, r3, #25
 80042de:	f53f af2d 	bmi.w	800413c <_svfiprintf_r+0x28>
 80042e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80042e4:	e72c      	b.n	8004140 <_svfiprintf_r+0x2c>
 80042e6:	ab03      	add	r3, sp, #12
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	462a      	mov	r2, r5
 80042ec:	4b05      	ldr	r3, [pc, #20]	@ (8004304 <_svfiprintf_r+0x1f0>)
 80042ee:	a904      	add	r1, sp, #16
 80042f0:	4638      	mov	r0, r7
 80042f2:	f000 f879 	bl	80043e8 <_printf_i>
 80042f6:	e7ed      	b.n	80042d4 <_svfiprintf_r+0x1c0>
 80042f8:	080047a0 	.word	0x080047a0
 80042fc:	080047aa 	.word	0x080047aa
 8004300:	00000000 	.word	0x00000000
 8004304:	0800405d 	.word	0x0800405d
 8004308:	080047a6 	.word	0x080047a6

0800430c <_printf_common>:
 800430c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004310:	4616      	mov	r6, r2
 8004312:	4698      	mov	r8, r3
 8004314:	688a      	ldr	r2, [r1, #8]
 8004316:	690b      	ldr	r3, [r1, #16]
 8004318:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800431c:	4293      	cmp	r3, r2
 800431e:	bfb8      	it	lt
 8004320:	4613      	movlt	r3, r2
 8004322:	6033      	str	r3, [r6, #0]
 8004324:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004328:	4607      	mov	r7, r0
 800432a:	460c      	mov	r4, r1
 800432c:	b10a      	cbz	r2, 8004332 <_printf_common+0x26>
 800432e:	3301      	adds	r3, #1
 8004330:	6033      	str	r3, [r6, #0]
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	0699      	lsls	r1, r3, #26
 8004336:	bf42      	ittt	mi
 8004338:	6833      	ldrmi	r3, [r6, #0]
 800433a:	3302      	addmi	r3, #2
 800433c:	6033      	strmi	r3, [r6, #0]
 800433e:	6825      	ldr	r5, [r4, #0]
 8004340:	f015 0506 	ands.w	r5, r5, #6
 8004344:	d106      	bne.n	8004354 <_printf_common+0x48>
 8004346:	f104 0a19 	add.w	sl, r4, #25
 800434a:	68e3      	ldr	r3, [r4, #12]
 800434c:	6832      	ldr	r2, [r6, #0]
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	42ab      	cmp	r3, r5
 8004352:	dc26      	bgt.n	80043a2 <_printf_common+0x96>
 8004354:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004358:	6822      	ldr	r2, [r4, #0]
 800435a:	3b00      	subs	r3, #0
 800435c:	bf18      	it	ne
 800435e:	2301      	movne	r3, #1
 8004360:	0692      	lsls	r2, r2, #26
 8004362:	d42b      	bmi.n	80043bc <_printf_common+0xb0>
 8004364:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004368:	4641      	mov	r1, r8
 800436a:	4638      	mov	r0, r7
 800436c:	47c8      	blx	r9
 800436e:	3001      	adds	r0, #1
 8004370:	d01e      	beq.n	80043b0 <_printf_common+0xa4>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	6922      	ldr	r2, [r4, #16]
 8004376:	f003 0306 	and.w	r3, r3, #6
 800437a:	2b04      	cmp	r3, #4
 800437c:	bf02      	ittt	eq
 800437e:	68e5      	ldreq	r5, [r4, #12]
 8004380:	6833      	ldreq	r3, [r6, #0]
 8004382:	1aed      	subeq	r5, r5, r3
 8004384:	68a3      	ldr	r3, [r4, #8]
 8004386:	bf0c      	ite	eq
 8004388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800438c:	2500      	movne	r5, #0
 800438e:	4293      	cmp	r3, r2
 8004390:	bfc4      	itt	gt
 8004392:	1a9b      	subgt	r3, r3, r2
 8004394:	18ed      	addgt	r5, r5, r3
 8004396:	2600      	movs	r6, #0
 8004398:	341a      	adds	r4, #26
 800439a:	42b5      	cmp	r5, r6
 800439c:	d11a      	bne.n	80043d4 <_printf_common+0xc8>
 800439e:	2000      	movs	r0, #0
 80043a0:	e008      	b.n	80043b4 <_printf_common+0xa8>
 80043a2:	2301      	movs	r3, #1
 80043a4:	4652      	mov	r2, sl
 80043a6:	4641      	mov	r1, r8
 80043a8:	4638      	mov	r0, r7
 80043aa:	47c8      	blx	r9
 80043ac:	3001      	adds	r0, #1
 80043ae:	d103      	bne.n	80043b8 <_printf_common+0xac>
 80043b0:	f04f 30ff 	mov.w	r0, #4294967295
 80043b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b8:	3501      	adds	r5, #1
 80043ba:	e7c6      	b.n	800434a <_printf_common+0x3e>
 80043bc:	18e1      	adds	r1, r4, r3
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	2030      	movs	r0, #48	@ 0x30
 80043c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043c6:	4422      	add	r2, r4
 80043c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80043cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043d0:	3302      	adds	r3, #2
 80043d2:	e7c7      	b.n	8004364 <_printf_common+0x58>
 80043d4:	2301      	movs	r3, #1
 80043d6:	4622      	mov	r2, r4
 80043d8:	4641      	mov	r1, r8
 80043da:	4638      	mov	r0, r7
 80043dc:	47c8      	blx	r9
 80043de:	3001      	adds	r0, #1
 80043e0:	d0e6      	beq.n	80043b0 <_printf_common+0xa4>
 80043e2:	3601      	adds	r6, #1
 80043e4:	e7d9      	b.n	800439a <_printf_common+0x8e>
	...

080043e8 <_printf_i>:
 80043e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043ec:	7e0f      	ldrb	r7, [r1, #24]
 80043ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80043f0:	2f78      	cmp	r7, #120	@ 0x78
 80043f2:	4691      	mov	r9, r2
 80043f4:	4680      	mov	r8, r0
 80043f6:	460c      	mov	r4, r1
 80043f8:	469a      	mov	sl, r3
 80043fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80043fe:	d807      	bhi.n	8004410 <_printf_i+0x28>
 8004400:	2f62      	cmp	r7, #98	@ 0x62
 8004402:	d80a      	bhi.n	800441a <_printf_i+0x32>
 8004404:	2f00      	cmp	r7, #0
 8004406:	f000 80d2 	beq.w	80045ae <_printf_i+0x1c6>
 800440a:	2f58      	cmp	r7, #88	@ 0x58
 800440c:	f000 80b9 	beq.w	8004582 <_printf_i+0x19a>
 8004410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004414:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004418:	e03a      	b.n	8004490 <_printf_i+0xa8>
 800441a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800441e:	2b15      	cmp	r3, #21
 8004420:	d8f6      	bhi.n	8004410 <_printf_i+0x28>
 8004422:	a101      	add	r1, pc, #4	@ (adr r1, 8004428 <_printf_i+0x40>)
 8004424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004428:	08004481 	.word	0x08004481
 800442c:	08004495 	.word	0x08004495
 8004430:	08004411 	.word	0x08004411
 8004434:	08004411 	.word	0x08004411
 8004438:	08004411 	.word	0x08004411
 800443c:	08004411 	.word	0x08004411
 8004440:	08004495 	.word	0x08004495
 8004444:	08004411 	.word	0x08004411
 8004448:	08004411 	.word	0x08004411
 800444c:	08004411 	.word	0x08004411
 8004450:	08004411 	.word	0x08004411
 8004454:	08004595 	.word	0x08004595
 8004458:	080044bf 	.word	0x080044bf
 800445c:	0800454f 	.word	0x0800454f
 8004460:	08004411 	.word	0x08004411
 8004464:	08004411 	.word	0x08004411
 8004468:	080045b7 	.word	0x080045b7
 800446c:	08004411 	.word	0x08004411
 8004470:	080044bf 	.word	0x080044bf
 8004474:	08004411 	.word	0x08004411
 8004478:	08004411 	.word	0x08004411
 800447c:	08004557 	.word	0x08004557
 8004480:	6833      	ldr	r3, [r6, #0]
 8004482:	1d1a      	adds	r2, r3, #4
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6032      	str	r2, [r6, #0]
 8004488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800448c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004490:	2301      	movs	r3, #1
 8004492:	e09d      	b.n	80045d0 <_printf_i+0x1e8>
 8004494:	6833      	ldr	r3, [r6, #0]
 8004496:	6820      	ldr	r0, [r4, #0]
 8004498:	1d19      	adds	r1, r3, #4
 800449a:	6031      	str	r1, [r6, #0]
 800449c:	0606      	lsls	r6, r0, #24
 800449e:	d501      	bpl.n	80044a4 <_printf_i+0xbc>
 80044a0:	681d      	ldr	r5, [r3, #0]
 80044a2:	e003      	b.n	80044ac <_printf_i+0xc4>
 80044a4:	0645      	lsls	r5, r0, #25
 80044a6:	d5fb      	bpl.n	80044a0 <_printf_i+0xb8>
 80044a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044ac:	2d00      	cmp	r5, #0
 80044ae:	da03      	bge.n	80044b8 <_printf_i+0xd0>
 80044b0:	232d      	movs	r3, #45	@ 0x2d
 80044b2:	426d      	negs	r5, r5
 80044b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044b8:	4859      	ldr	r0, [pc, #356]	@ (8004620 <_printf_i+0x238>)
 80044ba:	230a      	movs	r3, #10
 80044bc:	e011      	b.n	80044e2 <_printf_i+0xfa>
 80044be:	6821      	ldr	r1, [r4, #0]
 80044c0:	6833      	ldr	r3, [r6, #0]
 80044c2:	0608      	lsls	r0, r1, #24
 80044c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80044c8:	d402      	bmi.n	80044d0 <_printf_i+0xe8>
 80044ca:	0649      	lsls	r1, r1, #25
 80044cc:	bf48      	it	mi
 80044ce:	b2ad      	uxthmi	r5, r5
 80044d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80044d2:	4853      	ldr	r0, [pc, #332]	@ (8004620 <_printf_i+0x238>)
 80044d4:	6033      	str	r3, [r6, #0]
 80044d6:	bf14      	ite	ne
 80044d8:	230a      	movne	r3, #10
 80044da:	2308      	moveq	r3, #8
 80044dc:	2100      	movs	r1, #0
 80044de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044e2:	6866      	ldr	r6, [r4, #4]
 80044e4:	60a6      	str	r6, [r4, #8]
 80044e6:	2e00      	cmp	r6, #0
 80044e8:	bfa2      	ittt	ge
 80044ea:	6821      	ldrge	r1, [r4, #0]
 80044ec:	f021 0104 	bicge.w	r1, r1, #4
 80044f0:	6021      	strge	r1, [r4, #0]
 80044f2:	b90d      	cbnz	r5, 80044f8 <_printf_i+0x110>
 80044f4:	2e00      	cmp	r6, #0
 80044f6:	d04b      	beq.n	8004590 <_printf_i+0x1a8>
 80044f8:	4616      	mov	r6, r2
 80044fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80044fe:	fb03 5711 	mls	r7, r3, r1, r5
 8004502:	5dc7      	ldrb	r7, [r0, r7]
 8004504:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004508:	462f      	mov	r7, r5
 800450a:	42bb      	cmp	r3, r7
 800450c:	460d      	mov	r5, r1
 800450e:	d9f4      	bls.n	80044fa <_printf_i+0x112>
 8004510:	2b08      	cmp	r3, #8
 8004512:	d10b      	bne.n	800452c <_printf_i+0x144>
 8004514:	6823      	ldr	r3, [r4, #0]
 8004516:	07df      	lsls	r7, r3, #31
 8004518:	d508      	bpl.n	800452c <_printf_i+0x144>
 800451a:	6923      	ldr	r3, [r4, #16]
 800451c:	6861      	ldr	r1, [r4, #4]
 800451e:	4299      	cmp	r1, r3
 8004520:	bfde      	ittt	le
 8004522:	2330      	movle	r3, #48	@ 0x30
 8004524:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004528:	f106 36ff 	addle.w	r6, r6, #4294967295
 800452c:	1b92      	subs	r2, r2, r6
 800452e:	6122      	str	r2, [r4, #16]
 8004530:	f8cd a000 	str.w	sl, [sp]
 8004534:	464b      	mov	r3, r9
 8004536:	aa03      	add	r2, sp, #12
 8004538:	4621      	mov	r1, r4
 800453a:	4640      	mov	r0, r8
 800453c:	f7ff fee6 	bl	800430c <_printf_common>
 8004540:	3001      	adds	r0, #1
 8004542:	d14a      	bne.n	80045da <_printf_i+0x1f2>
 8004544:	f04f 30ff 	mov.w	r0, #4294967295
 8004548:	b004      	add	sp, #16
 800454a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	f043 0320 	orr.w	r3, r3, #32
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	4833      	ldr	r0, [pc, #204]	@ (8004624 <_printf_i+0x23c>)
 8004558:	2778      	movs	r7, #120	@ 0x78
 800455a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	6831      	ldr	r1, [r6, #0]
 8004562:	061f      	lsls	r7, r3, #24
 8004564:	f851 5b04 	ldr.w	r5, [r1], #4
 8004568:	d402      	bmi.n	8004570 <_printf_i+0x188>
 800456a:	065f      	lsls	r7, r3, #25
 800456c:	bf48      	it	mi
 800456e:	b2ad      	uxthmi	r5, r5
 8004570:	6031      	str	r1, [r6, #0]
 8004572:	07d9      	lsls	r1, r3, #31
 8004574:	bf44      	itt	mi
 8004576:	f043 0320 	orrmi.w	r3, r3, #32
 800457a:	6023      	strmi	r3, [r4, #0]
 800457c:	b11d      	cbz	r5, 8004586 <_printf_i+0x19e>
 800457e:	2310      	movs	r3, #16
 8004580:	e7ac      	b.n	80044dc <_printf_i+0xf4>
 8004582:	4827      	ldr	r0, [pc, #156]	@ (8004620 <_printf_i+0x238>)
 8004584:	e7e9      	b.n	800455a <_printf_i+0x172>
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	f023 0320 	bic.w	r3, r3, #32
 800458c:	6023      	str	r3, [r4, #0]
 800458e:	e7f6      	b.n	800457e <_printf_i+0x196>
 8004590:	4616      	mov	r6, r2
 8004592:	e7bd      	b.n	8004510 <_printf_i+0x128>
 8004594:	6833      	ldr	r3, [r6, #0]
 8004596:	6825      	ldr	r5, [r4, #0]
 8004598:	6961      	ldr	r1, [r4, #20]
 800459a:	1d18      	adds	r0, r3, #4
 800459c:	6030      	str	r0, [r6, #0]
 800459e:	062e      	lsls	r6, r5, #24
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	d501      	bpl.n	80045a8 <_printf_i+0x1c0>
 80045a4:	6019      	str	r1, [r3, #0]
 80045a6:	e002      	b.n	80045ae <_printf_i+0x1c6>
 80045a8:	0668      	lsls	r0, r5, #25
 80045aa:	d5fb      	bpl.n	80045a4 <_printf_i+0x1bc>
 80045ac:	8019      	strh	r1, [r3, #0]
 80045ae:	2300      	movs	r3, #0
 80045b0:	6123      	str	r3, [r4, #16]
 80045b2:	4616      	mov	r6, r2
 80045b4:	e7bc      	b.n	8004530 <_printf_i+0x148>
 80045b6:	6833      	ldr	r3, [r6, #0]
 80045b8:	1d1a      	adds	r2, r3, #4
 80045ba:	6032      	str	r2, [r6, #0]
 80045bc:	681e      	ldr	r6, [r3, #0]
 80045be:	6862      	ldr	r2, [r4, #4]
 80045c0:	2100      	movs	r1, #0
 80045c2:	4630      	mov	r0, r6
 80045c4:	f7fb fe2c 	bl	8000220 <memchr>
 80045c8:	b108      	cbz	r0, 80045ce <_printf_i+0x1e6>
 80045ca:	1b80      	subs	r0, r0, r6
 80045cc:	6060      	str	r0, [r4, #4]
 80045ce:	6863      	ldr	r3, [r4, #4]
 80045d0:	6123      	str	r3, [r4, #16]
 80045d2:	2300      	movs	r3, #0
 80045d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045d8:	e7aa      	b.n	8004530 <_printf_i+0x148>
 80045da:	6923      	ldr	r3, [r4, #16]
 80045dc:	4632      	mov	r2, r6
 80045de:	4649      	mov	r1, r9
 80045e0:	4640      	mov	r0, r8
 80045e2:	47d0      	blx	sl
 80045e4:	3001      	adds	r0, #1
 80045e6:	d0ad      	beq.n	8004544 <_printf_i+0x15c>
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	079b      	lsls	r3, r3, #30
 80045ec:	d413      	bmi.n	8004616 <_printf_i+0x22e>
 80045ee:	68e0      	ldr	r0, [r4, #12]
 80045f0:	9b03      	ldr	r3, [sp, #12]
 80045f2:	4298      	cmp	r0, r3
 80045f4:	bfb8      	it	lt
 80045f6:	4618      	movlt	r0, r3
 80045f8:	e7a6      	b.n	8004548 <_printf_i+0x160>
 80045fa:	2301      	movs	r3, #1
 80045fc:	4632      	mov	r2, r6
 80045fe:	4649      	mov	r1, r9
 8004600:	4640      	mov	r0, r8
 8004602:	47d0      	blx	sl
 8004604:	3001      	adds	r0, #1
 8004606:	d09d      	beq.n	8004544 <_printf_i+0x15c>
 8004608:	3501      	adds	r5, #1
 800460a:	68e3      	ldr	r3, [r4, #12]
 800460c:	9903      	ldr	r1, [sp, #12]
 800460e:	1a5b      	subs	r3, r3, r1
 8004610:	42ab      	cmp	r3, r5
 8004612:	dcf2      	bgt.n	80045fa <_printf_i+0x212>
 8004614:	e7eb      	b.n	80045ee <_printf_i+0x206>
 8004616:	2500      	movs	r5, #0
 8004618:	f104 0619 	add.w	r6, r4, #25
 800461c:	e7f5      	b.n	800460a <_printf_i+0x222>
 800461e:	bf00      	nop
 8004620:	080047b1 	.word	0x080047b1
 8004624:	080047c2 	.word	0x080047c2

08004628 <memmove>:
 8004628:	4288      	cmp	r0, r1
 800462a:	b510      	push	{r4, lr}
 800462c:	eb01 0402 	add.w	r4, r1, r2
 8004630:	d902      	bls.n	8004638 <memmove+0x10>
 8004632:	4284      	cmp	r4, r0
 8004634:	4623      	mov	r3, r4
 8004636:	d807      	bhi.n	8004648 <memmove+0x20>
 8004638:	1e43      	subs	r3, r0, #1
 800463a:	42a1      	cmp	r1, r4
 800463c:	d008      	beq.n	8004650 <memmove+0x28>
 800463e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004642:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004646:	e7f8      	b.n	800463a <memmove+0x12>
 8004648:	4402      	add	r2, r0
 800464a:	4601      	mov	r1, r0
 800464c:	428a      	cmp	r2, r1
 800464e:	d100      	bne.n	8004652 <memmove+0x2a>
 8004650:	bd10      	pop	{r4, pc}
 8004652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004656:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800465a:	e7f7      	b.n	800464c <memmove+0x24>

0800465c <_sbrk_r>:
 800465c:	b538      	push	{r3, r4, r5, lr}
 800465e:	4d06      	ldr	r5, [pc, #24]	@ (8004678 <_sbrk_r+0x1c>)
 8004660:	2300      	movs	r3, #0
 8004662:	4604      	mov	r4, r0
 8004664:	4608      	mov	r0, r1
 8004666:	602b      	str	r3, [r5, #0]
 8004668:	f7fc fb9a 	bl	8000da0 <_sbrk>
 800466c:	1c43      	adds	r3, r0, #1
 800466e:	d102      	bne.n	8004676 <_sbrk_r+0x1a>
 8004670:	682b      	ldr	r3, [r5, #0]
 8004672:	b103      	cbz	r3, 8004676 <_sbrk_r+0x1a>
 8004674:	6023      	str	r3, [r4, #0]
 8004676:	bd38      	pop	{r3, r4, r5, pc}
 8004678:	20000824 	.word	0x20000824

0800467c <memcpy>:
 800467c:	440a      	add	r2, r1
 800467e:	4291      	cmp	r1, r2
 8004680:	f100 33ff 	add.w	r3, r0, #4294967295
 8004684:	d100      	bne.n	8004688 <memcpy+0xc>
 8004686:	4770      	bx	lr
 8004688:	b510      	push	{r4, lr}
 800468a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800468e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004692:	4291      	cmp	r1, r2
 8004694:	d1f9      	bne.n	800468a <memcpy+0xe>
 8004696:	bd10      	pop	{r4, pc}

08004698 <_realloc_r>:
 8004698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800469c:	4680      	mov	r8, r0
 800469e:	4615      	mov	r5, r2
 80046a0:	460c      	mov	r4, r1
 80046a2:	b921      	cbnz	r1, 80046ae <_realloc_r+0x16>
 80046a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046a8:	4611      	mov	r1, r2
 80046aa:	f7ff bc4b 	b.w	8003f44 <_malloc_r>
 80046ae:	b92a      	cbnz	r2, 80046bc <_realloc_r+0x24>
 80046b0:	f7ff fbdc 	bl	8003e6c <_free_r>
 80046b4:	2400      	movs	r4, #0
 80046b6:	4620      	mov	r0, r4
 80046b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046bc:	f000 f81a 	bl	80046f4 <_malloc_usable_size_r>
 80046c0:	4285      	cmp	r5, r0
 80046c2:	4606      	mov	r6, r0
 80046c4:	d802      	bhi.n	80046cc <_realloc_r+0x34>
 80046c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80046ca:	d8f4      	bhi.n	80046b6 <_realloc_r+0x1e>
 80046cc:	4629      	mov	r1, r5
 80046ce:	4640      	mov	r0, r8
 80046d0:	f7ff fc38 	bl	8003f44 <_malloc_r>
 80046d4:	4607      	mov	r7, r0
 80046d6:	2800      	cmp	r0, #0
 80046d8:	d0ec      	beq.n	80046b4 <_realloc_r+0x1c>
 80046da:	42b5      	cmp	r5, r6
 80046dc:	462a      	mov	r2, r5
 80046de:	4621      	mov	r1, r4
 80046e0:	bf28      	it	cs
 80046e2:	4632      	movcs	r2, r6
 80046e4:	f7ff ffca 	bl	800467c <memcpy>
 80046e8:	4621      	mov	r1, r4
 80046ea:	4640      	mov	r0, r8
 80046ec:	f7ff fbbe 	bl	8003e6c <_free_r>
 80046f0:	463c      	mov	r4, r7
 80046f2:	e7e0      	b.n	80046b6 <_realloc_r+0x1e>

080046f4 <_malloc_usable_size_r>:
 80046f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046f8:	1f18      	subs	r0, r3, #4
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	bfbc      	itt	lt
 80046fe:	580b      	ldrlt	r3, [r1, r0]
 8004700:	18c0      	addlt	r0, r0, r3
 8004702:	4770      	bx	lr

08004704 <_init>:
 8004704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004706:	bf00      	nop
 8004708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800470a:	bc08      	pop	{r3}
 800470c:	469e      	mov	lr, r3
 800470e:	4770      	bx	lr

08004710 <_fini>:
 8004710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004712:	bf00      	nop
 8004714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004716:	bc08      	pop	{r3}
 8004718:	469e      	mov	lr, r3
 800471a:	4770      	bx	lr
