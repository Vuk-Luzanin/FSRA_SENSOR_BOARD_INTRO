
proba_senzor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001838  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080018f8  080018f8  000028f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001938  08001938  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001938  08001938  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001938  08001938  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001938  08001938  00002938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800193c  0800193c  0000293c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001940  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000000c  0800194c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  0800194c  000031bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a30f  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ee  00000000  00000000  0000d343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000032d9  00000000  00000000  0000ec31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000630  00000000  00000000  00011f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000066d  00000000  00000000  0001253a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001776c  00000000  00000000  00012ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aee8  00000000  00000000  0002a313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000881b2  00000000  00000000  000351fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bd3ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001034  00000000  00000000  000bd3f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080018e0 	.word	0x080018e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080018e0 	.word	0x080018e0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <initPins>:
/* USER CODE BEGIN 0 */

// Sends data from printf to USART2


void initPins() {
 8000244:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000246:	2200      	movs	r2, #0
 8000248:	2110      	movs	r1, #16
 800024a:	4802      	ldr	r0, [pc, #8]	@ (8000254 <initPins+0x10>)
 800024c:	f000 fd88 	bl	8000d60 <HAL_GPIO_WritePin>
}
 8000250:	bd10      	pop	{r4, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	48000400 	.word	0x48000400

08000258 <thermistor>:
    // Combine results: ln(y) = n * ln(2) + ln(z)
    return n * LN2 + ln_z;
}


void thermistor() {
 8000258:	b570      	push	{r4, r5, r6, lr}
	HAL_ADC_Start(&hadc);
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800025a:	2501      	movs	r5, #1
	HAL_ADC_Start(&hadc);
 800025c:	4c0d      	ldr	r4, [pc, #52]	@ (8000294 <thermistor+0x3c>)
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800025e:	426d      	negs	r5, r5
	HAL_ADC_Start(&hadc);
 8000260:	0020      	movs	r0, r4
 8000262:	f000 fb51 	bl	8000908 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000266:	0029      	movs	r1, r5
 8000268:	0020      	movs	r0, r4
 800026a:	f000 fb97 	bl	800099c <HAL_ADC_PollForConversion>
	float raw = HAL_ADC_GetValue(&hadc);
 800026e:	0020      	movs	r0, r4
 8000270:	f000 fbf8 	bl	8000a64 <HAL_ADC_GetValue>

	// Convert to string and print
	//sprintf((char*)buffer,"%d C\n", t);
	char * a = "radi";
	//HAL_Delay(500);
	HAL_UART_Transmit(&huart2, a, strlen(buffer), HAL_MAX_DELAY);
 8000274:	4808      	ldr	r0, [pc, #32]	@ (8000298 <thermistor+0x40>)
 8000276:	f7ff ff47 	bl	8000108 <strlen>
 800027a:	002b      	movs	r3, r5
 800027c:	b282      	uxth	r2, r0
 800027e:	4907      	ldr	r1, [pc, #28]	@ (800029c <thermistor+0x44>)
 8000280:	4807      	ldr	r0, [pc, #28]	@ (80002a0 <thermistor+0x48>)
 8000282:	f001 fa09 	bl	8001698 <HAL_UART_Transmit>

	HAL_Delay(100);
 8000286:	2064      	movs	r0, #100	@ 0x64
 8000288:	f000 f9d0 	bl	800062c <HAL_Delay>
	HAL_ADC_Stop(&hadc);
 800028c:	0020      	movs	r0, r4
 800028e:	f000 fb67 	bl	8000960 <HAL_ADC_Stop>
}
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	20000178 	.word	0x20000178
 8000298:	20000028 	.word	0x20000028
 800029c:	080018f8 	.word	0x080018f8
 80002a0:	200000f0 	.word	0x200000f0

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a6:	2410      	movs	r4, #16
{
 80002a8:	b092      	sub	sp, #72	@ 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	2230      	movs	r2, #48	@ 0x30
 80002ac:	2100      	movs	r1, #0
 80002ae:	a806      	add	r0, sp, #24
 80002b0:	f001 faea 	bl	8001888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b4:	2100      	movs	r1, #0
 80002b6:	0022      	movs	r2, r4
 80002b8:	a801      	add	r0, sp, #4
 80002ba:	f001 fae5 	bl	8001888 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002be:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c0:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c2:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c4:	3b01      	subs	r3, #1
 80002c6:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c8:	9409      	str	r4, [sp, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	f000 fd4f 	bl	8000d6c <HAL_RCC_OscConfig>
 80002ce:	1e01      	subs	r1, r0, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002d2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002d4:	e7fe      	b.n	80002d4 <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d6:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002d8:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002dc:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002de:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e0:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e2:	f000 ffc9 	bl	8001278 <HAL_RCC_ClockConfig>
 80002e6:	2800      	cmp	r0, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x4a>
 80002ea:	b672      	cpsid	i
  while (1)
 80002ec:	e7fe      	b.n	80002ec <SystemClock_Config+0x48>
}
 80002ee:	b012      	add	sp, #72	@ 0x48
 80002f0:	bd10      	pop	{r4, pc}
	...

080002f4 <main>:
{
 80002f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002f6:	b089      	sub	sp, #36	@ 0x24
  HAL_Init();
 80002f8:	f000 f976 	bl	80005e8 <HAL_Init>
  SystemClock_Config();
 80002fc:	f7ff ffd2 	bl	80002a4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000300:	2214      	movs	r2, #20
 8000302:	2100      	movs	r1, #0
 8000304:	a803      	add	r0, sp, #12
 8000306:	f001 fabf 	bl	8001888 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800030a:	2180      	movs	r1, #128	@ 0x80
 800030c:	4b3d      	ldr	r3, [pc, #244]	@ (8000404 <main+0x110>)
 800030e:	03c9      	lsls	r1, r1, #15
 8000310:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000312:	483d      	ldr	r0, [pc, #244]	@ (8000408 <main+0x114>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000314:	430a      	orrs	r2, r1
 8000316:	615a      	str	r2, [r3, #20]
 8000318:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800031c:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031e:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000320:	9200      	str	r2, [sp, #0]
 8000322:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000324:	695a      	ldr	r2, [r3, #20]
 8000326:	0289      	lsls	r1, r1, #10
 8000328:	430a      	orrs	r2, r1
 800032a:	615a      	str	r2, [r3, #20]
 800032c:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800032e:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000330:	400a      	ands	r2, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000332:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000334:	9201      	str	r2, [sp, #4]
 8000336:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000338:	695a      	ldr	r2, [r3, #20]
 800033a:	02c9      	lsls	r1, r1, #11
 800033c:	430a      	orrs	r2, r1
 800033e:	615a      	str	r2, [r3, #20]
 8000340:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000342:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000344:	400b      	ands	r3, r1
 8000346:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000348:	2110      	movs	r1, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800034a:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800034c:	f000 fd08 	bl	8000d60 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000350:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000352:	482d      	ldr	r0, [pc, #180]	@ (8000408 <main+0x114>)
 8000354:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000356:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000358:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800035c:	f000 fc4e 	bl	8000bfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000360:	2310      	movs	r3, #16
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000362:	4829      	ldr	r0, [pc, #164]	@ (8000408 <main+0x114>)
 8000364:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000366:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000368:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800036e:	f000 fc45 	bl	8000bfc <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8000372:	4826      	ldr	r0, [pc, #152]	@ (800040c <main+0x118>)
 8000374:	4b26      	ldr	r3, [pc, #152]	@ (8000410 <main+0x11c>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000376:	260c      	movs	r6, #12
  huart2.Instance = USART2;
 8000378:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800037a:	23e1      	movs	r3, #225	@ 0xe1
 800037c:	025b      	lsls	r3, r3, #9
 800037e:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000380:	6084      	str	r4, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000382:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000384:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000386:	6146      	str	r6, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000388:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800038a:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800038c:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800038e:	6244      	str	r4, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000390:	f001 fa48 	bl	8001824 <HAL_UART_Init>
 8000394:	0007      	movs	r7, r0
 8000396:	42a0      	cmp	r0, r4
 8000398:	d001      	beq.n	800039e <main+0xaa>
 800039a:	b672      	cpsid	i
  while (1)
 800039c:	e7fe      	b.n	800039c <main+0xa8>
  ADC_ChannelConfTypeDef sConfig = {0};
 800039e:	0001      	movs	r1, r0
 80003a0:	0032      	movs	r2, r6
 80003a2:	a803      	add	r0, sp, #12
 80003a4:	f001 fa70 	bl	8001888 <memset>
  hadc.Instance = ADC1;
 80003a8:	4c1a      	ldr	r4, [pc, #104]	@ (8000414 <main+0x120>)
 80003aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000418 <main+0x124>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003ac:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 80003ae:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80003b0:	2380      	movs	r3, #128	@ 0x80
 80003b2:	05db      	lsls	r3, r3, #23
 80003b4:	6063      	str	r3, [r4, #4]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003b6:	2304      	movs	r3, #4
 80003b8:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ba:	23c2      	movs	r3, #194	@ 0xc2
 80003bc:	33ff      	adds	r3, #255	@ 0xff
 80003be:	61e3      	str	r3, [r4, #28]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003c0:	1d63      	adds	r3, r4, #5
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80003c2:	60a7      	str	r7, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003c4:	60e7      	str	r7, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80003c6:	6125      	str	r5, [r4, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003c8:	61a7      	str	r7, [r4, #24]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003ca:	6227      	str	r7, [r4, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003cc:	77df      	strb	r7, [r3, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003ce:	62a5      	str	r5, [r4, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003d0:	f000 f9f8 	bl	80007c4 <HAL_ADC_Init>
 80003d4:	2800      	cmp	r0, #0
 80003d6:	d001      	beq.n	80003dc <main+0xe8>
 80003d8:	b672      	cpsid	i
  while (1)
 80003da:	e7fe      	b.n	80003da <main+0xe6>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003dc:	2380      	movs	r3, #128	@ 0x80
 80003de:	015b      	lsls	r3, r3, #5
 80003e0:	9304      	str	r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003e2:	2380      	movs	r3, #128	@ 0x80
  sConfig.Channel = ADC_CHANNEL_0;
 80003e4:	9003      	str	r0, [sp, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003e6:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003e8:	0020      	movs	r0, r4
 80003ea:	a903      	add	r1, sp, #12
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003ec:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003ee:	f000 fb3d 	bl	8000a6c <HAL_ADC_ConfigChannel>
 80003f2:	2800      	cmp	r0, #0
 80003f4:	d001      	beq.n	80003fa <main+0x106>
 80003f6:	b672      	cpsid	i
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <main+0x104>
  initPins();
 80003fa:	f7ff ff23 	bl	8000244 <initPins>
	  thermistor();
 80003fe:	f7ff ff2b 	bl	8000258 <thermistor>
  while (1)
 8000402:	e7fc      	b.n	80003fe <main+0x10a>
 8000404:	40021000 	.word	0x40021000
 8000408:	48000400 	.word	0x48000400
 800040c:	200000f0 	.word	0x200000f0
 8000410:	40004400 	.word	0x40004400
 8000414:	20000178 	.word	0x20000178
 8000418:	40012400 	.word	0x40012400

0800041c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041c:	2101      	movs	r1, #1
 800041e:	4b0a      	ldr	r3, [pc, #40]	@ (8000448 <HAL_MspInit+0x2c>)
{
 8000420:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000422:	699a      	ldr	r2, [r3, #24]
 8000424:	430a      	orrs	r2, r1
 8000426:	619a      	str	r2, [r3, #24]
 8000428:	699a      	ldr	r2, [r3, #24]
 800042a:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 800042c:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042e:	9200      	str	r2, [sp, #0]
 8000430:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000432:	69da      	ldr	r2, [r3, #28]
 8000434:	0549      	lsls	r1, r1, #21
 8000436:	430a      	orrs	r2, r1
 8000438:	61da      	str	r2, [r3, #28]
 800043a:	69db      	ldr	r3, [r3, #28]
 800043c:	400b      	ands	r3, r1
 800043e:	9301      	str	r3, [sp, #4]
 8000440:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000442:	b002      	add	sp, #8
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			@ (mov r8, r8)
 8000448:	40021000 	.word	0x40021000

0800044c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800044c:	b510      	push	{r4, lr}
 800044e:	0004      	movs	r4, r0
 8000450:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000452:	2214      	movs	r2, #20
 8000454:	2100      	movs	r1, #0
 8000456:	a803      	add	r0, sp, #12
 8000458:	f001 fa16 	bl	8001888 <memset>
  if(hadc->Instance==ADC1)
 800045c:	4b10      	ldr	r3, [pc, #64]	@ (80004a0 <HAL_ADC_MspInit+0x54>)
 800045e:	6822      	ldr	r2, [r4, #0]
 8000460:	429a      	cmp	r2, r3
 8000462:	d11b      	bne.n	800049c <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000464:	2180      	movs	r1, #128	@ 0x80
 8000466:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <HAL_ADC_MspInit+0x58>)
 8000468:	0089      	lsls	r1, r1, #2
 800046a:	699a      	ldr	r2, [r3, #24]
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046c:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 800046e:	430a      	orrs	r2, r1
 8000470:	619a      	str	r2, [r3, #24]
 8000472:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000474:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000476:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000478:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 800047a:	9201      	str	r2, [sp, #4]
 800047c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800047e:	695a      	ldr	r2, [r3, #20]
 8000480:	0289      	lsls	r1, r1, #10
 8000482:	430a      	orrs	r2, r1
 8000484:	615a      	str	r2, [r3, #20]
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	400b      	ands	r3, r1
 800048a:	9302      	str	r3, [sp, #8]
 800048c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800048e:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000490:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000492:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000494:	3302      	adds	r3, #2
 8000496:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000498:	f000 fbb0 	bl	8000bfc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800049c:	b008      	add	sp, #32
 800049e:	bd10      	pop	{r4, pc}
 80004a0:	40012400 	.word	0x40012400
 80004a4:	40021000 	.word	0x40021000

080004a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004a8:	b510      	push	{r4, lr}
 80004aa:	0004      	movs	r4, r0
 80004ac:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	2214      	movs	r2, #20
 80004b0:	2100      	movs	r1, #0
 80004b2:	a803      	add	r0, sp, #12
 80004b4:	f001 f9e8 	bl	8001888 <memset>
  if(huart->Instance==USART2)
 80004b8:	4b11      	ldr	r3, [pc, #68]	@ (8000500 <HAL_UART_MspInit+0x58>)
 80004ba:	6822      	ldr	r2, [r4, #0]
 80004bc:	429a      	cmp	r2, r3
 80004be:	d11d      	bne.n	80004fc <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004c0:	2280      	movs	r2, #128	@ 0x80
 80004c2:	4b10      	ldr	r3, [pc, #64]	@ (8000504 <HAL_UART_MspInit+0x5c>)
 80004c4:	0292      	lsls	r2, r2, #10
 80004c6:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c8:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 80004ca:	4311      	orrs	r1, r2
 80004cc:	61d9      	str	r1, [r3, #28]
 80004ce:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 80004d2:	4011      	ands	r1, r2
 80004d4:	9101      	str	r1, [sp, #4]
 80004d6:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d8:	6959      	ldr	r1, [r3, #20]
 80004da:	4311      	orrs	r1, r2
 80004dc:	6159      	str	r1, [r3, #20]
 80004de:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e0:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e2:	4013      	ands	r3, r2
 80004e4:	9302      	str	r3, [sp, #8]
 80004e6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004e8:	230c      	movs	r3, #12
 80004ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ec:	3b0a      	subs	r3, #10
 80004ee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f0:	3301      	adds	r3, #1
 80004f2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80004f4:	3b02      	subs	r3, #2
 80004f6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f8:	f000 fb80 	bl	8000bfc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80004fc:	b008      	add	sp, #32
 80004fe:	bd10      	pop	{r4, pc}
 8000500:	40004400 	.word	0x40004400
 8000504:	40021000 	.word	0x40021000

08000508 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000508:	e7fe      	b.n	8000508 <NMI_Handler>

0800050a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800050a:	e7fe      	b.n	800050a <HardFault_Handler>

0800050c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800050c:	4770      	bx	lr

0800050e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800050e:	4770      	bx	lr

08000510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000510:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000512:	f000 f879 	bl	8000608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000516:	bd10      	pop	{r4, pc}

08000518 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000518:	4770      	bx	lr
	...

0800051c <Reset_Handler>:
 800051c:	4813      	ldr	r0, [pc, #76]	@ (800056c <LoopForever+0x2>)
 800051e:	4685      	mov	sp, r0
 8000520:	f7ff fffa 	bl	8000518 <SystemInit>
 8000524:	4812      	ldr	r0, [pc, #72]	@ (8000570 <LoopForever+0x6>)
 8000526:	6801      	ldr	r1, [r0, #0]
 8000528:	0e09      	lsrs	r1, r1, #24
 800052a:	4a12      	ldr	r2, [pc, #72]	@ (8000574 <LoopForever+0xa>)
 800052c:	4291      	cmp	r1, r2
 800052e:	d105      	bne.n	800053c <ApplicationStart>
 8000530:	4811      	ldr	r0, [pc, #68]	@ (8000578 <LoopForever+0xe>)
 8000532:	4912      	ldr	r1, [pc, #72]	@ (800057c <LoopForever+0x12>)
 8000534:	6001      	str	r1, [r0, #0]
 8000536:	4812      	ldr	r0, [pc, #72]	@ (8000580 <LoopForever+0x16>)
 8000538:	4912      	ldr	r1, [pc, #72]	@ (8000584 <LoopForever+0x1a>)
 800053a:	6001      	str	r1, [r0, #0]

0800053c <ApplicationStart>:
 800053c:	4812      	ldr	r0, [pc, #72]	@ (8000588 <LoopForever+0x1e>)
 800053e:	4913      	ldr	r1, [pc, #76]	@ (800058c <LoopForever+0x22>)
 8000540:	4a13      	ldr	r2, [pc, #76]	@ (8000590 <LoopForever+0x26>)
 8000542:	2300      	movs	r3, #0
 8000544:	e002      	b.n	800054c <LoopCopyDataInit>

08000546 <CopyDataInit>:
 8000546:	58d4      	ldr	r4, [r2, r3]
 8000548:	50c4      	str	r4, [r0, r3]
 800054a:	3304      	adds	r3, #4

0800054c <LoopCopyDataInit>:
 800054c:	18c4      	adds	r4, r0, r3
 800054e:	428c      	cmp	r4, r1
 8000550:	d3f9      	bcc.n	8000546 <CopyDataInit>
 8000552:	4a10      	ldr	r2, [pc, #64]	@ (8000594 <LoopForever+0x2a>)
 8000554:	4c10      	ldr	r4, [pc, #64]	@ (8000598 <LoopForever+0x2e>)
 8000556:	2300      	movs	r3, #0
 8000558:	e001      	b.n	800055e <LoopFillZerobss>

0800055a <FillZerobss>:
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	3204      	adds	r2, #4

0800055e <LoopFillZerobss>:
 800055e:	42a2      	cmp	r2, r4
 8000560:	d3fb      	bcc.n	800055a <FillZerobss>
 8000562:	f001 f999 	bl	8001898 <__libc_init_array>
 8000566:	f7ff fec5 	bl	80002f4 <main>

0800056a <LoopForever>:
 800056a:	e7fe      	b.n	800056a <LoopForever>
 800056c:	20001800 	.word	0x20001800
 8000570:	00000004 	.word	0x00000004
 8000574:	0000001f 	.word	0x0000001f
 8000578:	40021018 	.word	0x40021018
 800057c:	00000001 	.word	0x00000001
 8000580:	40010000 	.word	0x40010000
 8000584:	00000000 	.word	0x00000000
 8000588:	20000000 	.word	0x20000000
 800058c:	2000000c 	.word	0x2000000c
 8000590:	08001940 	.word	0x08001940
 8000594:	2000000c 	.word	0x2000000c
 8000598:	200001bc 	.word	0x200001bc

0800059c <ADC1_IRQHandler>:
 800059c:	e7fe      	b.n	800059c <ADC1_IRQHandler>
	...

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a4:	20fa      	movs	r0, #250	@ 0xfa
 80005a6:	4b0d      	ldr	r3, [pc, #52]	@ (80005dc <HAL_InitTick+0x3c>)
 80005a8:	0080      	lsls	r0, r0, #2
 80005aa:	7819      	ldrb	r1, [r3, #0]
 80005ac:	f7ff fdbe 	bl	800012c <__udivsi3>
 80005b0:	4c0b      	ldr	r4, [pc, #44]	@ (80005e0 <HAL_InitTick+0x40>)
 80005b2:	0001      	movs	r1, r0
 80005b4:	6820      	ldr	r0, [r4, #0]
 80005b6:	f7ff fdb9 	bl	800012c <__udivsi3>
 80005ba:	f000 fb05 	bl	8000bc8 <HAL_SYSTICK_Config>
 80005be:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80005c0:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c2:	2c00      	cmp	r4, #0
 80005c4:	d109      	bne.n	80005da <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c6:	2d03      	cmp	r5, #3
 80005c8:	d807      	bhi.n	80005da <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ca:	3802      	subs	r0, #2
 80005cc:	0022      	movs	r2, r4
 80005ce:	0029      	movs	r1, r5
 80005d0:	f000 fad0 	bl	8000b74 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d4:	0020      	movs	r0, r4
 80005d6:	4b03      	ldr	r3, [pc, #12]	@ (80005e4 <HAL_InitTick+0x44>)
 80005d8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	20000004 	.word	0x20000004
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000008 	.word	0x20000008

080005e8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e8:	2310      	movs	r3, #16
 80005ea:	4a06      	ldr	r2, [pc, #24]	@ (8000604 <HAL_Init+0x1c>)
{
 80005ec:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ee:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80005f0:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f2:	430b      	orrs	r3, r1
 80005f4:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80005f6:	f7ff ffd3 	bl	80005a0 <HAL_InitTick>
  HAL_MspInit();
 80005fa:	f7ff ff0f 	bl	800041c <HAL_MspInit>
}
 80005fe:	2000      	movs	r0, #0
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	40022000 	.word	0x40022000

08000608 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000608:	4a03      	ldr	r2, [pc, #12]	@ (8000618 <HAL_IncTick+0x10>)
 800060a:	4b04      	ldr	r3, [pc, #16]	@ (800061c <HAL_IncTick+0x14>)
 800060c:	6811      	ldr	r1, [r2, #0]
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	185b      	adds	r3, r3, r1
 8000612:	6013      	str	r3, [r2, #0]
}
 8000614:	4770      	bx	lr
 8000616:	46c0      	nop			@ (mov r8, r8)
 8000618:	200001b8 	.word	0x200001b8
 800061c:	20000004 	.word	0x20000004

08000620 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000620:	4b01      	ldr	r3, [pc, #4]	@ (8000628 <HAL_GetTick+0x8>)
 8000622:	6818      	ldr	r0, [r3, #0]
}
 8000624:	4770      	bx	lr
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	200001b8 	.word	0x200001b8

0800062c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000630:	f7ff fff6 	bl	8000620 <HAL_GetTick>
 8000634:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000636:	1c63      	adds	r3, r4, #1
 8000638:	d002      	beq.n	8000640 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800063a:	4b04      	ldr	r3, [pc, #16]	@ (800064c <HAL_Delay+0x20>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000640:	f7ff ffee 	bl	8000620 <HAL_GetTick>
 8000644:	1b40      	subs	r0, r0, r5
 8000646:	42a0      	cmp	r0, r4
 8000648:	d3fa      	bcc.n	8000640 <HAL_Delay+0x14>
  {
  }
}
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	20000004 	.word	0x20000004

08000650 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000650:	2204      	movs	r2, #4
 8000652:	6803      	ldr	r3, [r0, #0]
{
 8000654:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000656:	6899      	ldr	r1, [r3, #8]
{
 8000658:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800065a:	4211      	tst	r1, r2
 800065c:	d101      	bne.n	8000662 <ADC_ConversionStop+0x12>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800065e:	2000      	movs	r0, #0
}
 8000660:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000662:	6899      	ldr	r1, [r3, #8]
 8000664:	4211      	tst	r1, r2
 8000666:	d006      	beq.n	8000676 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8000668:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800066a:	0792      	lsls	r2, r2, #30
 800066c:	d403      	bmi.n	8000676 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800066e:	2210      	movs	r2, #16
 8000670:	6899      	ldr	r1, [r3, #8]
 8000672:	430a      	orrs	r2, r1
 8000674:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000676:	f7ff ffd3 	bl	8000620 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800067a:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 800067c:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800067e:	6823      	ldr	r3, [r4, #0]
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	4233      	tst	r3, r6
 8000684:	d0eb      	beq.n	800065e <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000686:	f7ff ffcb 	bl	8000620 <HAL_GetTick>
 800068a:	1b40      	subs	r0, r0, r5
 800068c:	2802      	cmp	r0, #2
 800068e:	d9f6      	bls.n	800067e <ADC_ConversionStop+0x2e>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000690:	6823      	ldr	r3, [r4, #0]
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	4233      	tst	r3, r6
 8000696:	d0f2      	beq.n	800067e <ADC_ConversionStop+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000698:	2310      	movs	r3, #16
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800069a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800069c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800069e:	4313      	orrs	r3, r2
 80006a0:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006a2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80006a4:	4303      	orrs	r3, r0
 80006a6:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80006a8:	e7da      	b.n	8000660 <ADC_ConversionStop+0x10>

080006aa <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 80006aa:	2103      	movs	r1, #3
 80006ac:	6803      	ldr	r3, [r0, #0]
{
 80006ae:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80006b0:	689a      	ldr	r2, [r3, #8]
{
 80006b2:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80006b4:	400a      	ands	r2, r1
 80006b6:	2a01      	cmp	r2, #1
 80006b8:	d001      	beq.n	80006be <ADC_Disable+0x14>
  return HAL_OK;
 80006ba:	2000      	movs	r0, #0
}
 80006bc:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80006be:	6819      	ldr	r1, [r3, #0]
 80006c0:	4211      	tst	r1, r2
 80006c2:	d102      	bne.n	80006ca <ADC_Disable+0x20>
 80006c4:	68da      	ldr	r2, [r3, #12]
 80006c6:	0412      	lsls	r2, r2, #16
 80006c8:	d5f7      	bpl.n	80006ba <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80006ca:	2205      	movs	r2, #5
 80006cc:	689d      	ldr	r5, [r3, #8]
 80006ce:	4015      	ands	r5, r2
 80006d0:	2d01      	cmp	r5, #1
 80006d2:	d11c      	bne.n	800070e <ADC_Disable+0x64>
      __HAL_ADC_DISABLE(hadc);
 80006d4:	6899      	ldr	r1, [r3, #8]
 80006d6:	3a03      	subs	r2, #3
 80006d8:	430a      	orrs	r2, r1
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	2203      	movs	r2, #3
 80006de:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80006e0:	f7ff ff9e 	bl	8000620 <HAL_GetTick>
 80006e4:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80006e6:	6823      	ldr	r3, [r4, #0]
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	422b      	tst	r3, r5
 80006ec:	d0e5      	beq.n	80006ba <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80006ee:	f7ff ff97 	bl	8000620 <HAL_GetTick>
 80006f2:	1b80      	subs	r0, r0, r6
 80006f4:	2802      	cmp	r0, #2
 80006f6:	d9f6      	bls.n	80006e6 <ADC_Disable+0x3c>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80006f8:	6823      	ldr	r3, [r4, #0]
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	422b      	tst	r3, r5
 80006fe:	d0f2      	beq.n	80006e6 <ADC_Disable+0x3c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000700:	2310      	movs	r3, #16
 8000702:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000704:	4313      	orrs	r3, r2
 8000706:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000708:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800070a:	432b      	orrs	r3, r5
 800070c:	e006      	b.n	800071c <ADC_Disable+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800070e:	2310      	movs	r3, #16
 8000710:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000712:	4313      	orrs	r3, r2
 8000714:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000716:	2301      	movs	r3, #1
 8000718:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800071a:	4313      	orrs	r3, r2
      return HAL_ERROR;
 800071c:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800071e:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8000720:	e7cc      	b.n	80006bc <ADC_Disable+0x12>
	...

08000724 <ADC_Enable.constprop.0>:
  __IO uint32_t wait_loop_index = 0U;
 8000724:	2300      	movs	r3, #0
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8000726:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000728:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 800072a:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800072c:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 800072e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000730:	689a      	ldr	r2, [r3, #8]
 8000732:	400a      	ands	r2, r1
 8000734:	2a01      	cmp	r2, #1
 8000736:	d107      	bne.n	8000748 <ADC_Enable.constprop.0+0x24>
 8000738:	6819      	ldr	r1, [r3, #0]
 800073a:	4211      	tst	r1, r2
 800073c:	d001      	beq.n	8000742 <ADC_Enable.constprop.0+0x1e>
  return HAL_OK;
 800073e:	2000      	movs	r0, #0
}
 8000740:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000742:	68da      	ldr	r2, [r3, #12]
 8000744:	0412      	lsls	r2, r2, #16
 8000746:	d4fa      	bmi.n	800073e <ADC_Enable.constprop.0+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000748:	6899      	ldr	r1, [r3, #8]
 800074a:	4a1b      	ldr	r2, [pc, #108]	@ (80007b8 <ADC_Enable.constprop.0+0x94>)
 800074c:	4211      	tst	r1, r2
 800074e:	d009      	beq.n	8000764 <ADC_Enable.constprop.0+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000750:	2310      	movs	r3, #16
 8000752:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000754:	4313      	orrs	r3, r2
 8000756:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000758:	2301      	movs	r3, #1
 800075a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800075c:	4313      	orrs	r3, r2
      return HAL_ERROR;
 800075e:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000760:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8000762:	e7ed      	b.n	8000740 <ADC_Enable.constprop.0+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8000764:	2201      	movs	r2, #1
 8000766:	6899      	ldr	r1, [r3, #8]
 8000768:	430a      	orrs	r2, r1
 800076a:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800076c:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <ADC_Enable.constprop.0+0x98>)
 800076e:	4914      	ldr	r1, [pc, #80]	@ (80007c0 <ADC_Enable.constprop.0+0x9c>)
 8000770:	6818      	ldr	r0, [r3, #0]
 8000772:	f7ff fcdb 	bl	800012c <__udivsi3>
 8000776:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8000778:	9b01      	ldr	r3, [sp, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d117      	bne.n	80007ae <ADC_Enable.constprop.0+0x8a>
    tickstart = HAL_GetTick();
 800077e:	f7ff ff4f 	bl	8000620 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000782:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8000784:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000786:	6823      	ldr	r3, [r4, #0]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	422b      	tst	r3, r5
 800078c:	d1d7      	bne.n	800073e <ADC_Enable.constprop.0+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800078e:	f7ff ff47 	bl	8000620 <HAL_GetTick>
 8000792:	1b80      	subs	r0, r0, r6
 8000794:	2802      	cmp	r0, #2
 8000796:	d9f6      	bls.n	8000786 <ADC_Enable.constprop.0+0x62>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000798:	6823      	ldr	r3, [r4, #0]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	422b      	tst	r3, r5
 800079e:	d1f2      	bne.n	8000786 <ADC_Enable.constprop.0+0x62>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007a0:	2310      	movs	r3, #16
 80007a2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80007a4:	4313      	orrs	r3, r2
 80007a6:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007a8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80007aa:	432b      	orrs	r3, r5
 80007ac:	e7d7      	b.n	800075e <ADC_Enable.constprop.0+0x3a>
      wait_loop_index--;
 80007ae:	9b01      	ldr	r3, [sp, #4]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	9301      	str	r3, [sp, #4]
 80007b4:	e7e0      	b.n	8000778 <ADC_Enable.constprop.0+0x54>
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	80000017 	.word	0x80000017
 80007bc:	20000000 	.word	0x20000000
 80007c0:	000f4240 	.word	0x000f4240

080007c4 <HAL_ADC_Init>:
{
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 80007c8:	d100      	bne.n	80007cc <HAL_ADC_Init+0x8>
 80007ca:	e090      	b.n	80008ee <HAL_ADC_Init+0x12a>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007cc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d105      	bne.n	80007de <HAL_ADC_Init+0x1a>
    hadc->Lock = HAL_UNLOCKED;
 80007d2:	0002      	movs	r2, r0
 80007d4:	3234      	adds	r2, #52	@ 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 80007d6:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hadc->Lock = HAL_UNLOCKED;
 80007d8:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80007da:	f7ff fe37 	bl	800044c <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007de:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80007e0:	06db      	lsls	r3, r3, #27
 80007e2:	d500      	bpl.n	80007e6 <HAL_ADC_Init+0x22>
 80007e4:	e085      	b.n	80008f2 <HAL_ADC_Init+0x12e>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80007e6:	6822      	ldr	r2, [r4, #0]
 80007e8:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80007ea:	075b      	lsls	r3, r3, #29
 80007ec:	d500      	bpl.n	80007f0 <HAL_ADC_Init+0x2c>
 80007ee:	e080      	b.n	80008f2 <HAL_ADC_Init+0x12e>
    ADC_STATE_CLR_SET(hadc->State,
 80007f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80007f2:	4b42      	ldr	r3, [pc, #264]	@ (80008fc <HAL_ADC_Init+0x138>)
 80007f4:	4019      	ands	r1, r3
 80007f6:	3306      	adds	r3, #6
 80007f8:	33ff      	adds	r3, #255	@ 0xff
 80007fa:	430b      	orrs	r3, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 80007fc:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 80007fe:	63a3      	str	r3, [r4, #56]	@ 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000800:	6893      	ldr	r3, [r2, #8]
 8000802:	400b      	ands	r3, r1
 8000804:	2b01      	cmp	r3, #1
 8000806:	d105      	bne.n	8000814 <HAL_ADC_Init+0x50>
 8000808:	6811      	ldr	r1, [r2, #0]
 800080a:	4219      	tst	r1, r3
 800080c:	d10e      	bne.n	800082c <HAL_ADC_Init+0x68>
 800080e:	68d3      	ldr	r3, [r2, #12]
 8000810:	041b      	lsls	r3, r3, #16
 8000812:	d40b      	bmi.n	800082c <HAL_ADC_Init+0x68>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000814:	2118      	movs	r1, #24
 8000816:	68d3      	ldr	r3, [r2, #12]
 8000818:	438b      	bics	r3, r1
 800081a:	68a1      	ldr	r1, [r4, #8]
 800081c:	430b      	orrs	r3, r1
 800081e:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000820:	6913      	ldr	r3, [r2, #16]
 8000822:	6861      	ldr	r1, [r4, #4]
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	089b      	lsrs	r3, r3, #2
 8000828:	430b      	orrs	r3, r1
 800082a:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800082c:	68d3      	ldr	r3, [r2, #12]
 800082e:	4934      	ldr	r1, [pc, #208]	@ (8000900 <HAL_ADC_Init+0x13c>)
 8000830:	400b      	ands	r3, r1
 8000832:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000834:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000836:	7e60      	ldrb	r0, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000838:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800083a:	03c0      	lsls	r0, r0, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800083c:	4303      	orrs	r3, r0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800083e:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000840:	68e0      	ldr	r0, [r4, #12]
 8000842:	4303      	orrs	r3, r0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000844:	0348      	lsls	r0, r1, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000846:	4303      	orrs	r3, r0
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000848:	1d60      	adds	r0, r4, #5
 800084a:	7fc0      	ldrb	r0, [r0, #31]
 800084c:	0040      	lsls	r0, r0, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800084e:	4303      	orrs	r3, r0
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000850:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8000852:	3801      	subs	r0, #1
 8000854:	1e45      	subs	r5, r0, #1
 8000856:	41a8      	sbcs	r0, r5
 8000858:	0300      	lsls	r0, r0, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800085a:	4303      	orrs	r3, r0
 800085c:	6920      	ldr	r0, [r4, #16]
 800085e:	3802      	subs	r0, #2
 8000860:	4245      	negs	r5, r0
 8000862:	4168      	adcs	r0, r5
 8000864:	0080      	lsls	r0, r0, #2
 8000866:	4303      	orrs	r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000868:	7ee0      	ldrb	r0, [r4, #27]
 800086a:	2801      	cmp	r0, #1
 800086c:	d104      	bne.n	8000878 <HAL_ADC_Init+0xb4>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800086e:	2900      	cmp	r1, #0
 8000870:	d12b      	bne.n	80008ca <HAL_ADC_Init+0x106>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000872:	2180      	movs	r1, #128	@ 0x80
 8000874:	0249      	lsls	r1, r1, #9
 8000876:	430b      	orrs	r3, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000878:	20c2      	movs	r0, #194	@ 0xc2
 800087a:	69e1      	ldr	r1, [r4, #28]
 800087c:	30ff      	adds	r0, #255	@ 0xff
 800087e:	4281      	cmp	r1, r0
 8000880:	d002      	beq.n	8000888 <HAL_ADC_Init+0xc4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000882:	6a20      	ldr	r0, [r4, #32]
 8000884:	4301      	orrs	r1, r0
 8000886:	430b      	orrs	r3, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000888:	2080      	movs	r0, #128	@ 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800088a:	68d1      	ldr	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800088c:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800088e:	4319      	orrs	r1, r3
 8000890:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000892:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8000894:	4281      	cmp	r1, r0
 8000896:	d002      	beq.n	800089e <HAL_ADC_Init+0xda>
 8000898:	1e48      	subs	r0, r1, #1
 800089a:	2806      	cmp	r0, #6
 800089c:	d807      	bhi.n	80008ae <HAL_ADC_Init+0xea>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800089e:	2507      	movs	r5, #7
 80008a0:	6950      	ldr	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80008a2:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80008a4:	43a8      	bics	r0, r5
 80008a6:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80008a8:	6950      	ldr	r0, [r2, #20]
 80008aa:	4301      	orrs	r1, r0
 80008ac:	6151      	str	r1, [r2, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80008ae:	68d2      	ldr	r2, [r2, #12]
 80008b0:	4914      	ldr	r1, [pc, #80]	@ (8000904 <HAL_ADC_Init+0x140>)
 80008b2:	400a      	ands	r2, r1
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d110      	bne.n	80008da <HAL_ADC_Init+0x116>
      ADC_CLEAR_ERRORCODE(hadc);
 80008b8:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80008ba:	2303      	movs	r3, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80008bc:	63e0      	str	r0, [r4, #60]	@ 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 80008be:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80008c0:	439a      	bics	r2, r3
 80008c2:	3b02      	subs	r3, #2
 80008c4:	4313      	orrs	r3, r2
 80008c6:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 80008c8:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008ca:	2120      	movs	r1, #32
 80008cc:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80008ce:	4329      	orrs	r1, r5
 80008d0:	63a1      	str	r1, [r4, #56]	@ 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008d2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80008d4:	4308      	orrs	r0, r1
 80008d6:	63e0      	str	r0, [r4, #60]	@ 0x3c
 80008d8:	e7ce      	b.n	8000878 <HAL_ADC_Init+0xb4>
      ADC_STATE_CLR_SET(hadc->State,
 80008da:	2312      	movs	r3, #18
 80008dc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80008de:	439a      	bics	r2, r3
 80008e0:	3b02      	subs	r3, #2
 80008e2:	4313      	orrs	r3, r2
 80008e4:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008e6:	2301      	movs	r3, #1
 80008e8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80008ea:	4313      	orrs	r3, r2
 80008ec:	63e3      	str	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 80008ee:	2001      	movs	r0, #1
 80008f0:	e7ea      	b.n	80008c8 <HAL_ADC_Init+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008f2:	2310      	movs	r3, #16
 80008f4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80008f6:	4313      	orrs	r3, r2
 80008f8:	63a3      	str	r3, [r4, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 80008fa:	e7f8      	b.n	80008ee <HAL_ADC_Init+0x12a>
 80008fc:	fffffefd 	.word	0xfffffefd
 8000900:	fffe0219 	.word	0xfffe0219
 8000904:	833fffe7 	.word	0x833fffe7

08000908 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000908:	6803      	ldr	r3, [r0, #0]
{
 800090a:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800090c:	689b      	ldr	r3, [r3, #8]
{
 800090e:	0004      	movs	r4, r0
    __HAL_LOCK(hadc);
 8000910:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000912:	075b      	lsls	r3, r3, #29
 8000914:	d41a      	bmi.n	800094c <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8000916:	0025      	movs	r5, r4
 8000918:	3534      	adds	r5, #52	@ 0x34
 800091a:	782b      	ldrb	r3, [r5, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d015      	beq.n	800094c <HAL_ADC_Start+0x44>
 8000920:	2301      	movs	r3, #1
 8000922:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000924:	7e63      	ldrb	r3, [r4, #25]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d111      	bne.n	800094e <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 800092a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800092c:	4b0b      	ldr	r3, [pc, #44]	@ (800095c <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 800092e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000930:	401a      	ands	r2, r3
 8000932:	2380      	movs	r3, #128	@ 0x80
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000938:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 800093a:	63a3      	str	r3, [r4, #56]	@ 0x38
      ADC_CLEAR_ERRORCODE(hadc);
 800093c:	63e0      	str	r0, [r4, #60]	@ 0x3c
      __HAL_UNLOCK(hadc);
 800093e:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000940:	6823      	ldr	r3, [r4, #0]
 8000942:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000944:	6899      	ldr	r1, [r3, #8]
 8000946:	3a18      	subs	r2, #24
 8000948:	430a      	orrs	r2, r1
 800094a:	609a      	str	r2, [r3, #8]
}
 800094c:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800094e:	0020      	movs	r0, r4
 8000950:	f7ff fee8 	bl	8000724 <ADC_Enable.constprop.0>
    if (tmp_hal_status == HAL_OK)
 8000954:	2800      	cmp	r0, #0
 8000956:	d0e8      	beq.n	800092a <HAL_ADC_Start+0x22>
 8000958:	e7f8      	b.n	800094c <HAL_ADC_Start+0x44>
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	fffff0fe 	.word	0xfffff0fe

08000960 <HAL_ADC_Stop>:
{ 
 8000960:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8000962:	0006      	movs	r6, r0
 8000964:	3634      	adds	r6, #52	@ 0x34
 8000966:	7833      	ldrb	r3, [r6, #0]
{ 
 8000968:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800096a:	2002      	movs	r0, #2
 800096c:	2b01      	cmp	r3, #1
 800096e:	d012      	beq.n	8000996 <HAL_ADC_Stop+0x36>
 8000970:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000972:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8000974:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000976:	f7ff fe6b 	bl	8000650 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800097a:	2800      	cmp	r0, #0
 800097c:	d109      	bne.n	8000992 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 800097e:	0020      	movs	r0, r4
 8000980:	f7ff fe93 	bl	80006aa <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8000984:	2800      	cmp	r0, #0
 8000986:	d104      	bne.n	8000992 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8000988:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800098a:	4a03      	ldr	r2, [pc, #12]	@ (8000998 <HAL_ADC_Stop+0x38>)
 800098c:	4013      	ands	r3, r2
 800098e:	431d      	orrs	r5, r3
 8000990:	63a5      	str	r5, [r4, #56]	@ 0x38
  __HAL_UNLOCK(hadc);
 8000992:	2300      	movs	r3, #0
 8000994:	7033      	strb	r3, [r6, #0]
}
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	fffffefe 	.word	0xfffffefe

0800099c <HAL_ADC_PollForConversion>:
{
 800099c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800099e:	6945      	ldr	r5, [r0, #20]
{
 80009a0:	0004      	movs	r4, r0
 80009a2:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80009a4:	2d08      	cmp	r5, #8
 80009a6:	d00d      	beq.n	80009c4 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80009a8:	6803      	ldr	r3, [r0, #0]
 80009aa:	2001      	movs	r0, #1
 80009ac:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80009ae:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80009b0:	4203      	tst	r3, r0
 80009b2:	d007      	beq.n	80009c4 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009b4:	2320      	movs	r3, #32
 80009b6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
      __HAL_UNLOCK(hadc);
 80009b8:	3434      	adds	r4, #52	@ 0x34
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009ba:	4313      	orrs	r3, r2
 80009bc:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 80009be:	2300      	movs	r3, #0
 80009c0:	7023      	strb	r3, [r4, #0]
}
 80009c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 80009c4:	f7ff fe2c 	bl	8000620 <HAL_GetTick>
 80009c8:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80009ca:	6823      	ldr	r3, [r4, #0]
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	4215      	tst	r5, r2
 80009d0:	d022      	beq.n	8000a18 <HAL_ADC_PollForConversion+0x7c>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80009d2:	2280      	movs	r2, #128	@ 0x80
 80009d4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80009d6:	0092      	lsls	r2, r2, #2
 80009d8:	430a      	orrs	r2, r1
 80009da:	63a2      	str	r2, [r4, #56]	@ 0x38
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80009dc:	22c0      	movs	r2, #192	@ 0xc0
 80009de:	68d9      	ldr	r1, [r3, #12]
 80009e0:	0112      	lsls	r2, r2, #4
 80009e2:	4211      	tst	r1, r2
 80009e4:	d113      	bne.n	8000a0e <HAL_ADC_PollForConversion+0x72>
 80009e6:	7ea2      	ldrb	r2, [r4, #26]
 80009e8:	2a00      	cmp	r2, #0
 80009ea:	d110      	bne.n	8000a0e <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	0712      	lsls	r2, r2, #28
 80009f0:	d50d      	bpl.n	8000a0e <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80009f2:	689a      	ldr	r2, [r3, #8]
 80009f4:	0752      	lsls	r2, r2, #29
 80009f6:	d427      	bmi.n	8000a48 <HAL_ADC_PollForConversion+0xac>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80009f8:	210c      	movs	r1, #12
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	438a      	bics	r2, r1
 80009fe:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8000a00:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8000a02:	4a17      	ldr	r2, [pc, #92]	@ (8000a60 <HAL_ADC_PollForConversion+0xc4>)
 8000a04:	4011      	ands	r1, r2
 8000a06:	3204      	adds	r2, #4
 8000a08:	32ff      	adds	r2, #255	@ 0xff
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	63a2      	str	r2, [r4, #56]	@ 0x38
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000a0e:	7e22      	ldrb	r2, [r4, #24]
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d022      	beq.n	8000a5a <HAL_ADC_PollForConversion+0xbe>
  return HAL_OK;
 8000a14:	2000      	movs	r0, #0
 8000a16:	e7d4      	b.n	80009c2 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8000a18:	1c72      	adds	r2, r6, #1
 8000a1a:	d0d7      	beq.n	80009cc <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000a1c:	2e00      	cmp	r6, #0
 8000a1e:	d10d      	bne.n	8000a3c <HAL_ADC_PollForConversion+0xa0>
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000a20:	002a      	movs	r2, r5
 8000a22:	6823      	ldr	r3, [r4, #0]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	401a      	ands	r2, r3
 8000a28:	421d      	tst	r5, r3
 8000a2a:	d1ce      	bne.n	80009ca <HAL_ADC_PollForConversion+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
          __HAL_UNLOCK(hadc);
 8000a30:	3434      	adds	r4, #52	@ 0x34
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000a32:	430b      	orrs	r3, r1
 8000a34:	6063      	str	r3, [r4, #4]
          return HAL_TIMEOUT;
 8000a36:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 8000a38:	7022      	strb	r2, [r4, #0]
          return HAL_TIMEOUT;
 8000a3a:	e7c2      	b.n	80009c2 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000a3c:	f7ff fdf0 	bl	8000620 <HAL_GetTick>
 8000a40:	1bc0      	subs	r0, r0, r7
 8000a42:	42b0      	cmp	r0, r6
 8000a44:	d8ec      	bhi.n	8000a20 <HAL_ADC_PollForConversion+0x84>
 8000a46:	e7c0      	b.n	80009ca <HAL_ADC_PollForConversion+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a48:	2220      	movs	r2, #32
 8000a4a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	63a2      	str	r2, [r4, #56]	@ 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a50:	2201      	movs	r2, #1
 8000a52:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8000a54:	430a      	orrs	r2, r1
 8000a56:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8000a58:	e7d9      	b.n	8000a0e <HAL_ADC_PollForConversion+0x72>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	e7d9      	b.n	8000a14 <HAL_ADC_PollForConversion+0x78>
 8000a60:	fffffefe 	.word	0xfffffefe

08000a64 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000a64:	6803      	ldr	r3, [r0, #0]
 8000a66:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8000a68:	4770      	bx	lr
	...

08000a6c <HAL_ADC_ConfigChannel>:
{
 8000a6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000a6e:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8000a70:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8000a72:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8000a74:	3434      	adds	r4, #52	@ 0x34
 8000a76:	7822      	ldrb	r2, [r4, #0]
{
 8000a78:	0003      	movs	r3, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000a7a:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
  __HAL_LOCK(hadc);
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	2a01      	cmp	r2, #1
 8000a80:	d02a      	beq.n	8000ad8 <HAL_ADC_ConfigChannel+0x6c>
 8000a82:	3801      	subs	r0, #1
 8000a84:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	6896      	ldr	r6, [r2, #8]
 8000a8a:	0776      	lsls	r6, r6, #29
 8000a8c:	d45e      	bmi.n	8000b4c <HAL_ADC_ConfigChannel+0xe0>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000a8e:	680b      	ldr	r3, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 8000a90:	684f      	ldr	r7, [r1, #4]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000a92:	001e      	movs	r6, r3
    if (sConfig->Rank != ADC_RANK_NONE)
 8000a94:	46bc      	mov	ip, r7
 8000a96:	4f30      	ldr	r7, [pc, #192]	@ (8000b58 <HAL_ADC_ConfigChannel+0xec>)
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000a98:	4098      	lsls	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000a9a:	3e10      	subs	r6, #16
    if (sConfig->Rank != ADC_RANK_NONE)
 8000a9c:	45bc      	cmp	ip, r7
 8000a9e:	d03f      	beq.n	8000b20 <HAL_ADC_ConfigChannel+0xb4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000aa0:	6a97      	ldr	r7, [r2, #40]	@ 0x28
 8000aa2:	4338      	orrs	r0, r7
 8000aa4:	6290      	str	r0, [r2, #40]	@ 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000aa6:	2080      	movs	r0, #128	@ 0x80
 8000aa8:	0540      	lsls	r0, r0, #21
 8000aaa:	4285      	cmp	r5, r0
 8000aac:	d00f      	beq.n	8000ace <HAL_ADC_ConfigChannel+0x62>
 8000aae:	3d01      	subs	r5, #1
 8000ab0:	2d06      	cmp	r5, #6
 8000ab2:	d90c      	bls.n	8000ace <HAL_ADC_ConfigChannel+0x62>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000ab4:	2007      	movs	r0, #7
 8000ab6:	6955      	ldr	r5, [r2, #20]
 8000ab8:	6889      	ldr	r1, [r1, #8]
 8000aba:	4005      	ands	r5, r0
 8000abc:	42a9      	cmp	r1, r5
 8000abe:	d006      	beq.n	8000ace <HAL_ADC_ConfigChannel+0x62>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000ac0:	6955      	ldr	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000ac2:	4001      	ands	r1, r0
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000ac4:	4385      	bics	r5, r0
 8000ac6:	6155      	str	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000ac8:	6955      	ldr	r5, [r2, #20]
 8000aca:	4329      	orrs	r1, r5
 8000acc:	6151      	str	r1, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000ace:	2e02      	cmp	r6, #2
 8000ad0:	d903      	bls.n	8000ada <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ad2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	7023      	strb	r3, [r4, #0]
}
 8000ad8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000ada:	4820      	ldr	r0, [pc, #128]	@ (8000b5c <HAL_ADC_ConfigChannel+0xf0>)
 8000adc:	6801      	ldr	r1, [r0, #0]
 8000ade:	2b10      	cmp	r3, #16
 8000ae0:	d01b      	beq.n	8000b1a <HAL_ADC_ConfigChannel+0xae>
 8000ae2:	001a      	movs	r2, r3
 8000ae4:	3a11      	subs	r2, #17
 8000ae6:	4255      	negs	r5, r2
 8000ae8:	416a      	adcs	r2, r5
 8000aea:	4d1d      	ldr	r5, [pc, #116]	@ (8000b60 <HAL_ADC_ConfigChannel+0xf4>)
 8000aec:	4252      	negs	r2, r2
 8000aee:	402a      	ands	r2, r5
 8000af0:	2580      	movs	r5, #128	@ 0x80
 8000af2:	046d      	lsls	r5, r5, #17
 8000af4:	1952      	adds	r2, r2, r5
 8000af6:	430a      	orrs	r2, r1
 8000af8:	6002      	str	r2, [r0, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000afa:	2b10      	cmp	r3, #16
 8000afc:	d1e9      	bne.n	8000ad2 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000afe:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <HAL_ADC_ConfigChannel+0xf8>)
 8000b00:	4919      	ldr	r1, [pc, #100]	@ (8000b68 <HAL_ADC_ConfigChannel+0xfc>)
 8000b02:	6818      	ldr	r0, [r3, #0]
 8000b04:	f7ff fb12 	bl	800012c <__udivsi3>
 8000b08:	230a      	movs	r3, #10
 8000b0a:	4343      	muls	r3, r0
            wait_loop_index--;
 8000b0c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000b0e:	9b01      	ldr	r3, [sp, #4]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d0de      	beq.n	8000ad2 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8000b14:	9b01      	ldr	r3, [sp, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	e7f8      	b.n	8000b0c <HAL_ADC_ConfigChannel+0xa0>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000b1a:	2280      	movs	r2, #128	@ 0x80
 8000b1c:	0412      	lsls	r2, r2, #16
 8000b1e:	e7ea      	b.n	8000af6 <HAL_ADC_ConfigChannel+0x8a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000b20:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8000b22:	4381      	bics	r1, r0
 8000b24:	6291      	str	r1, [r2, #40]	@ 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000b26:	2e02      	cmp	r6, #2
 8000b28:	d8d3      	bhi.n	8000ad2 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000b2a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b5c <HAL_ADC_ConfigChannel+0xf0>)
 8000b2c:	6811      	ldr	r1, [r2, #0]
 8000b2e:	2b10      	cmp	r3, #16
 8000b30:	d00a      	beq.n	8000b48 <HAL_ADC_ConfigChannel+0xdc>
 8000b32:	3b11      	subs	r3, #17
 8000b34:	1e58      	subs	r0, r3, #1
 8000b36:	4183      	sbcs	r3, r0
 8000b38:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <HAL_ADC_ConfigChannel+0xf4>)
 8000b3a:	425b      	negs	r3, r3
 8000b3c:	4003      	ands	r3, r0
 8000b3e:	480b      	ldr	r0, [pc, #44]	@ (8000b6c <HAL_ADC_ConfigChannel+0x100>)
 8000b40:	181b      	adds	r3, r3, r0
 8000b42:	400b      	ands	r3, r1
 8000b44:	6013      	str	r3, [r2, #0]
 8000b46:	e7c4      	b.n	8000ad2 <HAL_ADC_ConfigChannel+0x66>
 8000b48:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <HAL_ADC_ConfigChannel+0x104>)
 8000b4a:	e7fa      	b.n	8000b42 <HAL_ADC_ConfigChannel+0xd6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b4c:	2220      	movs	r2, #32
 8000b4e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000b50:	430a      	orrs	r2, r1
 8000b52:	639a      	str	r2, [r3, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 8000b54:	e7be      	b.n	8000ad4 <HAL_ADC_ConfigChannel+0x68>
 8000b56:	46c0      	nop			@ (mov r8, r8)
 8000b58:	00001001 	.word	0x00001001
 8000b5c:	40012708 	.word	0x40012708
 8000b60:	ff400000 	.word	0xff400000
 8000b64:	20000000 	.word	0x20000000
 8000b68:	000f4240 	.word	0x000f4240
 8000b6c:	ffbfffff 	.word	0xffbfffff
 8000b70:	ff7fffff 	.word	0xff7fffff

08000b74 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b74:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b76:	24ff      	movs	r4, #255	@ 0xff
 8000b78:	2203      	movs	r2, #3
 8000b7a:	000b      	movs	r3, r1
 8000b7c:	0021      	movs	r1, r4
 8000b7e:	4002      	ands	r2, r0
 8000b80:	00d2      	lsls	r2, r2, #3
 8000b82:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b84:	019b      	lsls	r3, r3, #6
 8000b86:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b88:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b8a:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	2800      	cmp	r0, #0
 8000b8e:	db0a      	blt.n	8000ba6 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b90:	24c0      	movs	r4, #192	@ 0xc0
 8000b92:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc0 <HAL_NVIC_SetPriority+0x4c>)
 8000b94:	0880      	lsrs	r0, r0, #2
 8000b96:	0080      	lsls	r0, r0, #2
 8000b98:	1880      	adds	r0, r0, r2
 8000b9a:	00a4      	lsls	r4, r4, #2
 8000b9c:	5902      	ldr	r2, [r0, r4]
 8000b9e:	400a      	ands	r2, r1
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	5103      	str	r3, [r0, r4]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000ba4:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba6:	220f      	movs	r2, #15
 8000ba8:	4010      	ands	r0, r2
 8000baa:	3808      	subs	r0, #8
 8000bac:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <HAL_NVIC_SetPriority+0x50>)
 8000bae:	0880      	lsrs	r0, r0, #2
 8000bb0:	0080      	lsls	r0, r0, #2
 8000bb2:	1880      	adds	r0, r0, r2
 8000bb4:	69c2      	ldr	r2, [r0, #28]
 8000bb6:	4011      	ands	r1, r2
 8000bb8:	4319      	orrs	r1, r3
 8000bba:	61c1      	str	r1, [r0, #28]
 8000bbc:	e7f2      	b.n	8000ba4 <HAL_NVIC_SetPriority+0x30>
 8000bbe:	46c0      	nop			@ (mov r8, r8)
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc8:	2280      	movs	r2, #128	@ 0x80
 8000bca:	1e43      	subs	r3, r0, #1
 8000bcc:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bce:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d20d      	bcs.n	8000bf0 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd4:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd6:	4a07      	ldr	r2, [pc, #28]	@ (8000bf4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd8:	4807      	ldr	r0, [pc, #28]	@ (8000bf8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bda:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bdc:	6a03      	ldr	r3, [r0, #32]
 8000bde:	0609      	lsls	r1, r1, #24
 8000be0:	021b      	lsls	r3, r3, #8
 8000be2:	0a1b      	lsrs	r3, r3, #8
 8000be4:	430b      	orrs	r3, r1
 8000be6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bea:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bec:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bee:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000bf0:	4770      	bx	lr
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	e000e010 	.word	0xe000e010
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8000bfc:	2300      	movs	r3, #0
{
 8000bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c00:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c02:	680a      	ldr	r2, [r1, #0]
 8000c04:	0014      	movs	r4, r2
 8000c06:	40dc      	lsrs	r4, r3
 8000c08:	d101      	bne.n	8000c0e <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8000c0a:	b007      	add	sp, #28
 8000c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c0e:	2501      	movs	r5, #1
 8000c10:	0014      	movs	r4, r2
 8000c12:	409d      	lsls	r5, r3
 8000c14:	402c      	ands	r4, r5
 8000c16:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8000c18:	422a      	tst	r2, r5
 8000c1a:	d100      	bne.n	8000c1e <HAL_GPIO_Init+0x22>
 8000c1c:	e094      	b.n	8000d48 <HAL_GPIO_Init+0x14c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c1e:	684a      	ldr	r2, [r1, #4]
 8000c20:	005f      	lsls	r7, r3, #1
 8000c22:	4694      	mov	ip, r2
 8000c24:	2203      	movs	r2, #3
 8000c26:	4664      	mov	r4, ip
 8000c28:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c2a:	2403      	movs	r4, #3
 8000c2c:	40bc      	lsls	r4, r7
 8000c2e:	43e4      	mvns	r4, r4
 8000c30:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c32:	1e54      	subs	r4, r2, #1
 8000c34:	2c01      	cmp	r4, #1
 8000c36:	d82e      	bhi.n	8000c96 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8000c38:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c3a:	9c01      	ldr	r4, [sp, #4]
 8000c3c:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c3e:	68cc      	ldr	r4, [r1, #12]
 8000c40:	40bc      	lsls	r4, r7
 8000c42:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8000c44:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c46:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c48:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c4a:	43ac      	bics	r4, r5
 8000c4c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c4e:	4664      	mov	r4, ip
 8000c50:	0924      	lsrs	r4, r4, #4
 8000c52:	4034      	ands	r4, r6
 8000c54:	409c      	lsls	r4, r3
 8000c56:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000c58:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8000c5a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c5c:	9c01      	ldr	r4, [sp, #4]
 8000c5e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c60:	688c      	ldr	r4, [r1, #8]
 8000c62:	40bc      	lsls	r4, r7
 8000c64:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8000c66:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c68:	2a02      	cmp	r2, #2
 8000c6a:	d116      	bne.n	8000c9a <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c6c:	2507      	movs	r5, #7
 8000c6e:	260f      	movs	r6, #15
 8000c70:	401d      	ands	r5, r3
 8000c72:	00ad      	lsls	r5, r5, #2
 8000c74:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8000c76:	08dc      	lsrs	r4, r3, #3
 8000c78:	00a4      	lsls	r4, r4, #2
 8000c7a:	1904      	adds	r4, r0, r4
 8000c7c:	9402      	str	r4, [sp, #8]
 8000c7e:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c80:	9603      	str	r6, [sp, #12]
 8000c82:	0026      	movs	r6, r4
 8000c84:	9c03      	ldr	r4, [sp, #12]
 8000c86:	43a6      	bics	r6, r4
 8000c88:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c8a:	690e      	ldr	r6, [r1, #16]
 8000c8c:	40ae      	lsls	r6, r5
 8000c8e:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8000c90:	9c02      	ldr	r4, [sp, #8]
 8000c92:	6226      	str	r6, [r4, #32]
 8000c94:	e001      	b.n	8000c9a <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c96:	2a03      	cmp	r2, #3
 8000c98:	d1df      	bne.n	8000c5a <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c9a:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000c9c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c9e:	9d01      	ldr	r5, [sp, #4]
 8000ca0:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ca2:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ca4:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8000ca6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ca8:	4662      	mov	r2, ip
 8000caa:	02a4      	lsls	r4, r4, #10
 8000cac:	4222      	tst	r2, r4
 8000cae:	d04b      	beq.n	8000d48 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb0:	2501      	movs	r5, #1
 8000cb2:	4a26      	ldr	r2, [pc, #152]	@ (8000d4c <HAL_GPIO_Init+0x150>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cb4:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cb8:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	432c      	orrs	r4, r5
 8000cbc:	6194      	str	r4, [r2, #24]
 8000cbe:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000cc0:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	402a      	ands	r2, r5
 8000cc4:	9205      	str	r2, [sp, #20]
 8000cc6:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000cc8:	4a21      	ldr	r2, [pc, #132]	@ (8000d50 <HAL_GPIO_Init+0x154>)
 8000cca:	00a4      	lsls	r4, r4, #2
 8000ccc:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cce:	220f      	movs	r2, #15
 8000cd0:	3502      	adds	r5, #2
 8000cd2:	401d      	ands	r5, r3
 8000cd4:	00ad      	lsls	r5, r5, #2
 8000cd6:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8000cd8:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cda:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cdc:	2200      	movs	r2, #0
 8000cde:	42b8      	cmp	r0, r7
 8000ce0:	d008      	beq.n	8000cf4 <HAL_GPIO_Init+0xf8>
 8000ce2:	4f1c      	ldr	r7, [pc, #112]	@ (8000d54 <HAL_GPIO_Init+0x158>)
 8000ce4:	3201      	adds	r2, #1
 8000ce6:	42b8      	cmp	r0, r7
 8000ce8:	d004      	beq.n	8000cf4 <HAL_GPIO_Init+0xf8>
 8000cea:	4f1b      	ldr	r7, [pc, #108]	@ (8000d58 <HAL_GPIO_Init+0x15c>)
 8000cec:	3204      	adds	r2, #4
 8000cee:	42b8      	cmp	r0, r7
 8000cf0:	d100      	bne.n	8000cf4 <HAL_GPIO_Init+0xf8>
 8000cf2:	3a03      	subs	r2, #3
 8000cf4:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cf6:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cf8:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cfa:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8000cfc:	4a17      	ldr	r2, [pc, #92]	@ (8000d5c <HAL_GPIO_Init+0x160>)
        temp &= ~(iocurrent);
 8000cfe:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8000d00:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000d02:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 8000d04:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000d06:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d08:	02ff      	lsls	r7, r7, #11
 8000d0a:	d401      	bmi.n	8000d10 <HAL_GPIO_Init+0x114>
        temp &= ~(iocurrent);
 8000d0c:	0035      	movs	r5, r6
 8000d0e:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d10:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000d12:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000d14:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 8000d16:	9d00      	ldr	r5, [sp, #0]
 8000d18:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d1a:	02bf      	lsls	r7, r7, #10
 8000d1c:	d401      	bmi.n	8000d22 <HAL_GPIO_Init+0x126>
        temp &= ~(iocurrent);
 8000d1e:	0035      	movs	r5, r6
 8000d20:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d22:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 8000d24:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 8000d26:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000d28:	9d00      	ldr	r5, [sp, #0]
 8000d2a:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d2c:	03bf      	lsls	r7, r7, #14
 8000d2e:	d401      	bmi.n	8000d34 <HAL_GPIO_Init+0x138>
        temp &= ~(iocurrent);
 8000d30:	0035      	movs	r5, r6
 8000d32:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d34:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000d36:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8000d38:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8000d3a:	9e00      	ldr	r6, [sp, #0]
 8000d3c:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d3e:	03ff      	lsls	r7, r7, #15
 8000d40:	d401      	bmi.n	8000d46 <HAL_GPIO_Init+0x14a>
        temp &= ~(iocurrent);
 8000d42:	4025      	ands	r5, r4
 8000d44:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 8000d46:	6016      	str	r6, [r2, #0]
    position++;
 8000d48:	3301      	adds	r3, #1
 8000d4a:	e75a      	b.n	8000c02 <HAL_GPIO_Init+0x6>
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40010000 	.word	0x40010000
 8000d54:	48000400 	.word	0x48000400
 8000d58:	48000800 	.word	0x48000800
 8000d5c:	40010400 	.word	0x40010400

08000d60 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d60:	2a00      	cmp	r2, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d64:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d66:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d68:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8000d6a:	e7fc      	b.n	8000d66 <HAL_GPIO_WritePin+0x6>

08000d6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6e:	0004      	movs	r4, r0
 8000d70:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d72:	2800      	cmp	r0, #0
 8000d74:	d102      	bne.n	8000d7c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000d76:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8000d78:	b005      	add	sp, #20
 8000d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d7c:	6803      	ldr	r3, [r0, #0]
 8000d7e:	07db      	lsls	r3, r3, #31
 8000d80:	d433      	bmi.n	8000dea <HAL_RCC_OscConfig+0x7e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	079b      	lsls	r3, r3, #30
 8000d86:	d500      	bpl.n	8000d8a <HAL_RCC_OscConfig+0x1e>
 8000d88:	e087      	b.n	8000e9a <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	071b      	lsls	r3, r3, #28
 8000d8e:	d500      	bpl.n	8000d92 <HAL_RCC_OscConfig+0x26>
 8000d90:	e0c8      	b.n	8000f24 <HAL_RCC_OscConfig+0x1b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	075b      	lsls	r3, r3, #29
 8000d96:	d500      	bpl.n	8000d9a <HAL_RCC_OscConfig+0x2e>
 8000d98:	e0eb      	b.n	8000f72 <HAL_RCC_OscConfig+0x206>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000d9a:	6823      	ldr	r3, [r4, #0]
 8000d9c:	06db      	lsls	r3, r3, #27
 8000d9e:	d51a      	bpl.n	8000dd6 <HAL_RCC_OscConfig+0x6a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000da0:	6962      	ldr	r2, [r4, #20]
 8000da2:	2304      	movs	r3, #4
 8000da4:	4db9      	ldr	r5, [pc, #740]	@ (800108c <HAL_RCC_OscConfig+0x320>)
 8000da6:	2a01      	cmp	r2, #1
 8000da8:	d000      	beq.n	8000dac <HAL_RCC_OscConfig+0x40>
 8000daa:	e154      	b.n	8001056 <HAL_RCC_OscConfig+0x2ea>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000dac:	6b69      	ldr	r1, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000dae:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000db0:	430b      	orrs	r3, r1
 8000db2:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000db4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8000db6:	431a      	orrs	r2, r3
 8000db8:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8000dba:	f7ff fc31 	bl	8000620 <HAL_GetTick>
 8000dbe:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000dc0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8000dc2:	423b      	tst	r3, r7
 8000dc4:	d100      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x5c>
 8000dc6:	e13f      	b.n	8001048 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000dc8:	21f8      	movs	r1, #248	@ 0xf8
 8000dca:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8000dcc:	69a3      	ldr	r3, [r4, #24]
 8000dce:	438a      	bics	r2, r1
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	636b      	str	r3, [r5, #52]	@ 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000dd6:	6823      	ldr	r3, [r4, #0]
 8000dd8:	069b      	lsls	r3, r3, #26
 8000dda:	d500      	bpl.n	8000dde <HAL_RCC_OscConfig+0x72>
 8000ddc:	e162      	b.n	80010a4 <HAL_RCC_OscConfig+0x338>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dde:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d000      	beq.n	8000de6 <HAL_RCC_OscConfig+0x7a>
 8000de4:	e1a1      	b.n	800112a <HAL_RCC_OscConfig+0x3be>
  return HAL_OK;
 8000de6:	2000      	movs	r0, #0
 8000de8:	e7c6      	b.n	8000d78 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dea:	220c      	movs	r2, #12
 8000dec:	4da7      	ldr	r5, [pc, #668]	@ (800108c <HAL_RCC_OscConfig+0x320>)
 8000dee:	686b      	ldr	r3, [r5, #4]
 8000df0:	4013      	ands	r3, r2
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d00b      	beq.n	8000e0e <HAL_RCC_OscConfig+0xa2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000df6:	686b      	ldr	r3, [r5, #4]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	2b08      	cmp	r3, #8
 8000dfc:	d10e      	bne.n	8000e1c <HAL_RCC_OscConfig+0xb0>
 8000dfe:	22c0      	movs	r2, #192	@ 0xc0
 8000e00:	686b      	ldr	r3, [r5, #4]
 8000e02:	0252      	lsls	r2, r2, #9
 8000e04:	4013      	ands	r3, r2
 8000e06:	2280      	movs	r2, #128	@ 0x80
 8000e08:	0252      	lsls	r2, r2, #9
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d106      	bne.n	8000e1c <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e0e:	682b      	ldr	r3, [r5, #0]
 8000e10:	039b      	lsls	r3, r3, #14
 8000e12:	d5b6      	bpl.n	8000d82 <HAL_RCC_OscConfig+0x16>
 8000e14:	6863      	ldr	r3, [r4, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1b3      	bne.n	8000d82 <HAL_RCC_OscConfig+0x16>
 8000e1a:	e7ac      	b.n	8000d76 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1c:	6863      	ldr	r3, [r4, #4]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d113      	bne.n	8000e4a <HAL_RCC_OscConfig+0xde>
 8000e22:	2380      	movs	r3, #128	@ 0x80
 8000e24:	682a      	ldr	r2, [r5, #0]
 8000e26:	025b      	lsls	r3, r3, #9
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e2c:	f7ff fbf8 	bl	8000620 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e30:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8000e32:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e34:	02bf      	lsls	r7, r7, #10
 8000e36:	682b      	ldr	r3, [r5, #0]
 8000e38:	423b      	tst	r3, r7
 8000e3a:	d1a2      	bne.n	8000d82 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e3c:	f7ff fbf0 	bl	8000620 <HAL_GetTick>
 8000e40:	1b80      	subs	r0, r0, r6
 8000e42:	2864      	cmp	r0, #100	@ 0x64
 8000e44:	d9f7      	bls.n	8000e36 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000e46:	2003      	movs	r0, #3
 8000e48:	e796      	b.n	8000d78 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d115      	bne.n	8000e7a <HAL_RCC_OscConfig+0x10e>
 8000e4e:	682b      	ldr	r3, [r5, #0]
 8000e50:	4a8f      	ldr	r2, [pc, #572]	@ (8001090 <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e52:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e54:	4013      	ands	r3, r2
 8000e56:	602b      	str	r3, [r5, #0]
 8000e58:	682b      	ldr	r3, [r5, #0]
 8000e5a:	4a8e      	ldr	r2, [pc, #568]	@ (8001094 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e5c:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e5e:	4013      	ands	r3, r2
 8000e60:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e62:	f7ff fbdd 	bl	8000620 <HAL_GetTick>
 8000e66:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e68:	682b      	ldr	r3, [r5, #0]
 8000e6a:	423b      	tst	r3, r7
 8000e6c:	d089      	beq.n	8000d82 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e6e:	f7ff fbd7 	bl	8000620 <HAL_GetTick>
 8000e72:	1b80      	subs	r0, r0, r6
 8000e74:	2864      	cmp	r0, #100	@ 0x64
 8000e76:	d9f7      	bls.n	8000e68 <HAL_RCC_OscConfig+0xfc>
 8000e78:	e7e5      	b.n	8000e46 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e7a:	2b05      	cmp	r3, #5
 8000e7c:	d105      	bne.n	8000e8a <HAL_RCC_OscConfig+0x11e>
 8000e7e:	2380      	movs	r3, #128	@ 0x80
 8000e80:	682a      	ldr	r2, [r5, #0]
 8000e82:	02db      	lsls	r3, r3, #11
 8000e84:	4313      	orrs	r3, r2
 8000e86:	602b      	str	r3, [r5, #0]
 8000e88:	e7cb      	b.n	8000e22 <HAL_RCC_OscConfig+0xb6>
 8000e8a:	682b      	ldr	r3, [r5, #0]
 8000e8c:	4a80      	ldr	r2, [pc, #512]	@ (8001090 <HAL_RCC_OscConfig+0x324>)
 8000e8e:	4013      	ands	r3, r2
 8000e90:	602b      	str	r3, [r5, #0]
 8000e92:	682b      	ldr	r3, [r5, #0]
 8000e94:	4a7f      	ldr	r2, [pc, #508]	@ (8001094 <HAL_RCC_OscConfig+0x328>)
 8000e96:	4013      	ands	r3, r2
 8000e98:	e7c7      	b.n	8000e2a <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	4d7b      	ldr	r5, [pc, #492]	@ (800108c <HAL_RCC_OscConfig+0x320>)
 8000e9e:	686b      	ldr	r3, [r5, #4]
 8000ea0:	4213      	tst	r3, r2
 8000ea2:	d00b      	beq.n	8000ebc <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ea4:	686b      	ldr	r3, [r5, #4]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	2b08      	cmp	r3, #8
 8000eaa:	d116      	bne.n	8000eda <HAL_RCC_OscConfig+0x16e>
 8000eac:	22c0      	movs	r2, #192	@ 0xc0
 8000eae:	686b      	ldr	r3, [r5, #4]
 8000eb0:	0252      	lsls	r2, r2, #9
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	2280      	movs	r2, #128	@ 0x80
 8000eb6:	0212      	lsls	r2, r2, #8
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d10e      	bne.n	8000eda <HAL_RCC_OscConfig+0x16e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ebc:	682b      	ldr	r3, [r5, #0]
 8000ebe:	079b      	lsls	r3, r3, #30
 8000ec0:	d503      	bpl.n	8000eca <HAL_RCC_OscConfig+0x15e>
 8000ec2:	68e3      	ldr	r3, [r4, #12]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d000      	beq.n	8000eca <HAL_RCC_OscConfig+0x15e>
 8000ec8:	e755      	b.n	8000d76 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eca:	21f8      	movs	r1, #248	@ 0xf8
 8000ecc:	682a      	ldr	r2, [r5, #0]
 8000ece:	6923      	ldr	r3, [r4, #16]
 8000ed0:	438a      	bics	r2, r1
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	602b      	str	r3, [r5, #0]
 8000ed8:	e757      	b.n	8000d8a <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eda:	68e2      	ldr	r2, [r4, #12]
 8000edc:	2301      	movs	r3, #1
 8000ede:	2a00      	cmp	r2, #0
 8000ee0:	d00f      	beq.n	8000f02 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_ENABLE();
 8000ee2:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee4:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000eea:	f7ff fb99 	bl	8000620 <HAL_GetTick>
 8000eee:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef0:	682b      	ldr	r3, [r5, #0]
 8000ef2:	423b      	tst	r3, r7
 8000ef4:	d1e9      	bne.n	8000eca <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ef6:	f7ff fb93 	bl	8000620 <HAL_GetTick>
 8000efa:	1b80      	subs	r0, r0, r6
 8000efc:	2802      	cmp	r0, #2
 8000efe:	d9f7      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x184>
 8000f00:	e7a1      	b.n	8000e46 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 8000f02:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f04:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8000f06:	439a      	bics	r2, r3
 8000f08:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000f0a:	f7ff fb89 	bl	8000620 <HAL_GetTick>
 8000f0e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f10:	682b      	ldr	r3, [r5, #0]
 8000f12:	423b      	tst	r3, r7
 8000f14:	d100      	bne.n	8000f18 <HAL_RCC_OscConfig+0x1ac>
 8000f16:	e738      	b.n	8000d8a <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f18:	f7ff fb82 	bl	8000620 <HAL_GetTick>
 8000f1c:	1b80      	subs	r0, r0, r6
 8000f1e:	2802      	cmp	r0, #2
 8000f20:	d9f6      	bls.n	8000f10 <HAL_RCC_OscConfig+0x1a4>
 8000f22:	e790      	b.n	8000e46 <HAL_RCC_OscConfig+0xda>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f24:	69e2      	ldr	r2, [r4, #28]
 8000f26:	2301      	movs	r3, #1
 8000f28:	4d58      	ldr	r5, [pc, #352]	@ (800108c <HAL_RCC_OscConfig+0x320>)
 8000f2a:	2a00      	cmp	r2, #0
 8000f2c:	d010      	beq.n	8000f50 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 8000f2e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f30:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8000f32:	4313      	orrs	r3, r2
 8000f34:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8000f36:	f7ff fb73 	bl	8000620 <HAL_GetTick>
 8000f3a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f3c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8000f3e:	423b      	tst	r3, r7
 8000f40:	d000      	beq.n	8000f44 <HAL_RCC_OscConfig+0x1d8>
 8000f42:	e726      	b.n	8000d92 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f44:	f7ff fb6c 	bl	8000620 <HAL_GetTick>
 8000f48:	1b80      	subs	r0, r0, r6
 8000f4a:	2802      	cmp	r0, #2
 8000f4c:	d9f6      	bls.n	8000f3c <HAL_RCC_OscConfig+0x1d0>
 8000f4e:	e77a      	b.n	8000e46 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSI_DISABLE();
 8000f50:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f52:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8000f54:	439a      	bics	r2, r3
 8000f56:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8000f58:	f7ff fb62 	bl	8000620 <HAL_GetTick>
 8000f5c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f5e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8000f60:	423b      	tst	r3, r7
 8000f62:	d100      	bne.n	8000f66 <HAL_RCC_OscConfig+0x1fa>
 8000f64:	e715      	b.n	8000d92 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f66:	f7ff fb5b 	bl	8000620 <HAL_GetTick>
 8000f6a:	1b80      	subs	r0, r0, r6
 8000f6c:	2802      	cmp	r0, #2
 8000f6e:	d9f6      	bls.n	8000f5e <HAL_RCC_OscConfig+0x1f2>
 8000f70:	e769      	b.n	8000e46 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f72:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000f74:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f76:	4d45      	ldr	r5, [pc, #276]	@ (800108c <HAL_RCC_OscConfig+0x320>)
 8000f78:	0552      	lsls	r2, r2, #21
 8000f7a:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000f7c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f7e:	4213      	tst	r3, r2
 8000f80:	d108      	bne.n	8000f94 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	69eb      	ldr	r3, [r5, #28]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61eb      	str	r3, [r5, #28]
 8000f88:	69eb      	ldr	r3, [r5, #28]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	9303      	str	r3, [sp, #12]
 8000f8e:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000f90:	2301      	movs	r3, #1
 8000f92:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f94:	2780      	movs	r7, #128	@ 0x80
 8000f96:	4e40      	ldr	r6, [pc, #256]	@ (8001098 <HAL_RCC_OscConfig+0x32c>)
 8000f98:	007f      	lsls	r7, r7, #1
 8000f9a:	6833      	ldr	r3, [r6, #0]
 8000f9c:	423b      	tst	r3, r7
 8000f9e:	d015      	beq.n	8000fcc <HAL_RCC_OscConfig+0x260>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa0:	68a3      	ldr	r3, [r4, #8]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d122      	bne.n	8000fec <HAL_RCC_OscConfig+0x280>
 8000fa6:	6a2a      	ldr	r2, [r5, #32]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000fac:	f7ff fb38 	bl	8000620 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb0:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000fb2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb4:	6a2b      	ldr	r3, [r5, #32]
 8000fb6:	423b      	tst	r3, r7
 8000fb8:	d03f      	beq.n	800103a <HAL_RCC_OscConfig+0x2ce>
    if(pwrclkchanged == SET)
 8000fba:	9b00      	ldr	r3, [sp, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d000      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x256>
 8000fc0:	e6eb      	b.n	8000d9a <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fc2:	69eb      	ldr	r3, [r5, #28]
 8000fc4:	4a35      	ldr	r2, [pc, #212]	@ (800109c <HAL_RCC_OscConfig+0x330>)
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61eb      	str	r3, [r5, #28]
 8000fca:	e6e6      	b.n	8000d9a <HAL_RCC_OscConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fcc:	6833      	ldr	r3, [r6, #0]
 8000fce:	433b      	orrs	r3, r7
 8000fd0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000fd2:	f7ff fb25 	bl	8000620 <HAL_GetTick>
 8000fd6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd8:	6833      	ldr	r3, [r6, #0]
 8000fda:	423b      	tst	r3, r7
 8000fdc:	d1e0      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fde:	f7ff fb1f 	bl	8000620 <HAL_GetTick>
 8000fe2:	9b01      	ldr	r3, [sp, #4]
 8000fe4:	1ac0      	subs	r0, r0, r3
 8000fe6:	2864      	cmp	r0, #100	@ 0x64
 8000fe8:	d9f6      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x26c>
 8000fea:	e72c      	b.n	8000e46 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d114      	bne.n	800101c <HAL_RCC_OscConfig+0x2b0>
 8000ff2:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff4:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff6:	4393      	bics	r3, r2
 8000ff8:	622b      	str	r3, [r5, #32]
 8000ffa:	6a2b      	ldr	r3, [r5, #32]
 8000ffc:	3203      	adds	r2, #3
 8000ffe:	4393      	bics	r3, r2
 8001000:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001002:	f7ff fb0d 	bl	8000620 <HAL_GetTick>
 8001006:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001008:	6a2b      	ldr	r3, [r5, #32]
 800100a:	423b      	tst	r3, r7
 800100c:	d0d5      	beq.n	8000fba <HAL_RCC_OscConfig+0x24e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800100e:	f7ff fb07 	bl	8000620 <HAL_GetTick>
 8001012:	4b23      	ldr	r3, [pc, #140]	@ (80010a0 <HAL_RCC_OscConfig+0x334>)
 8001014:	1b80      	subs	r0, r0, r6
 8001016:	4298      	cmp	r0, r3
 8001018:	d9f6      	bls.n	8001008 <HAL_RCC_OscConfig+0x29c>
 800101a:	e714      	b.n	8000e46 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800101c:	2b05      	cmp	r3, #5
 800101e:	d105      	bne.n	800102c <HAL_RCC_OscConfig+0x2c0>
 8001020:	6a29      	ldr	r1, [r5, #32]
 8001022:	3b01      	subs	r3, #1
 8001024:	430b      	orrs	r3, r1
 8001026:	622b      	str	r3, [r5, #32]
 8001028:	6a2b      	ldr	r3, [r5, #32]
 800102a:	e7bd      	b.n	8000fa8 <HAL_RCC_OscConfig+0x23c>
 800102c:	6a2b      	ldr	r3, [r5, #32]
 800102e:	4393      	bics	r3, r2
 8001030:	2204      	movs	r2, #4
 8001032:	622b      	str	r3, [r5, #32]
 8001034:	6a2b      	ldr	r3, [r5, #32]
 8001036:	4393      	bics	r3, r2
 8001038:	e7b7      	b.n	8000faa <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800103a:	f7ff faf1 	bl	8000620 <HAL_GetTick>
 800103e:	4b18      	ldr	r3, [pc, #96]	@ (80010a0 <HAL_RCC_OscConfig+0x334>)
 8001040:	1b80      	subs	r0, r0, r6
 8001042:	4298      	cmp	r0, r3
 8001044:	d9b6      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x248>
 8001046:	e6fe      	b.n	8000e46 <HAL_RCC_OscConfig+0xda>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001048:	f7ff faea 	bl	8000620 <HAL_GetTick>
 800104c:	1b80      	subs	r0, r0, r6
 800104e:	2802      	cmp	r0, #2
 8001050:	d800      	bhi.n	8001054 <HAL_RCC_OscConfig+0x2e8>
 8001052:	e6b5      	b.n	8000dc0 <HAL_RCC_OscConfig+0x54>
 8001054:	e6f7      	b.n	8000e46 <HAL_RCC_OscConfig+0xda>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001056:	3205      	adds	r2, #5
 8001058:	d103      	bne.n	8001062 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI14ADC_ENABLE();
 800105a:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 800105c:	439a      	bics	r2, r3
 800105e:	636a      	str	r2, [r5, #52]	@ 0x34
 8001060:	e6b2      	b.n	8000dc8 <HAL_RCC_OscConfig+0x5c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001062:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001064:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001066:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001068:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 800106a:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 800106c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800106e:	4393      	bics	r3, r2
 8001070:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8001072:	f7ff fad5 	bl	8000620 <HAL_GetTick>
 8001076:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001078:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800107a:	423b      	tst	r3, r7
 800107c:	d100      	bne.n	8001080 <HAL_RCC_OscConfig+0x314>
 800107e:	e6aa      	b.n	8000dd6 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001080:	f7ff face 	bl	8000620 <HAL_GetTick>
 8001084:	1b80      	subs	r0, r0, r6
 8001086:	2802      	cmp	r0, #2
 8001088:	d9f6      	bls.n	8001078 <HAL_RCC_OscConfig+0x30c>
 800108a:	e6dc      	b.n	8000e46 <HAL_RCC_OscConfig+0xda>
 800108c:	40021000 	.word	0x40021000
 8001090:	fffeffff 	.word	0xfffeffff
 8001094:	fffbffff 	.word	0xfffbffff
 8001098:	40007000 	.word	0x40007000
 800109c:	efffffff 	.word	0xefffffff
 80010a0:	00001388 	.word	0x00001388
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80010a4:	220c      	movs	r2, #12
 80010a6:	4d55      	ldr	r5, [pc, #340]	@ (80011fc <HAL_RCC_OscConfig+0x490>)
 80010a8:	686b      	ldr	r3, [r5, #4]
 80010aa:	4013      	ands	r3, r2
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d009      	beq.n	80010c4 <HAL_RCC_OscConfig+0x358>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80010b0:	686b      	ldr	r3, [r5, #4]
 80010b2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80010b4:	2b08      	cmp	r3, #8
 80010b6:	d10e      	bne.n	80010d6 <HAL_RCC_OscConfig+0x36a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80010b8:	22c0      	movs	r2, #192	@ 0xc0
 80010ba:	686b      	ldr	r3, [r5, #4]
 80010bc:	0252      	lsls	r2, r2, #9
 80010be:	4013      	ands	r3, r2
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d108      	bne.n	80010d6 <HAL_RCC_OscConfig+0x36a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80010c4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80010c6:	039b      	lsls	r3, r3, #14
 80010c8:	d400      	bmi.n	80010cc <HAL_RCC_OscConfig+0x360>
 80010ca:	e688      	b.n	8000dde <HAL_RCC_OscConfig+0x72>
 80010cc:	6a23      	ldr	r3, [r4, #32]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d000      	beq.n	80010d4 <HAL_RCC_OscConfig+0x368>
 80010d2:	e650      	b.n	8000d76 <HAL_RCC_OscConfig+0xa>
 80010d4:	e683      	b.n	8000dde <HAL_RCC_OscConfig+0x72>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80010d6:	6a23      	ldr	r3, [r4, #32]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d013      	beq.n	8001104 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI48_ENABLE();
 80010dc:	2380      	movs	r3, #128	@ 0x80
 80010de:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80010e0:	025b      	lsls	r3, r3, #9
 80010e2:	4313      	orrs	r3, r2
 80010e4:	636b      	str	r3, [r5, #52]	@ 0x34
        tickstart = HAL_GetTick();
 80010e6:	f7ff fa9b 	bl	8000620 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80010ea:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 80010ec:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80010ee:	02bf      	lsls	r7, r7, #10
 80010f0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80010f2:	423b      	tst	r3, r7
 80010f4:	d000      	beq.n	80010f8 <HAL_RCC_OscConfig+0x38c>
 80010f6:	e672      	b.n	8000dde <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010f8:	f7ff fa92 	bl	8000620 <HAL_GetTick>
 80010fc:	1b80      	subs	r0, r0, r6
 80010fe:	2802      	cmp	r0, #2
 8001100:	d9f6      	bls.n	80010f0 <HAL_RCC_OscConfig+0x384>
 8001102:	e6a0      	b.n	8000e46 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI48_DISABLE();
 8001104:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001106:	4a3e      	ldr	r2, [pc, #248]	@ (8001200 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001108:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI48_DISABLE();
 800110a:	4013      	ands	r3, r2
 800110c:	636b      	str	r3, [r5, #52]	@ 0x34
        tickstart = HAL_GetTick();
 800110e:	f7ff fa87 	bl	8000620 <HAL_GetTick>
 8001112:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001114:	02bf      	lsls	r7, r7, #10
 8001116:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001118:	423b      	tst	r3, r7
 800111a:	d100      	bne.n	800111e <HAL_RCC_OscConfig+0x3b2>
 800111c:	e65f      	b.n	8000dde <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800111e:	f7ff fa7f 	bl	8000620 <HAL_GetTick>
 8001122:	1b80      	subs	r0, r0, r6
 8001124:	2802      	cmp	r0, #2
 8001126:	d9f6      	bls.n	8001116 <HAL_RCC_OscConfig+0x3aa>
 8001128:	e68d      	b.n	8000e46 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800112a:	210c      	movs	r1, #12
 800112c:	4d33      	ldr	r5, [pc, #204]	@ (80011fc <HAL_RCC_OscConfig+0x490>)
 800112e:	686a      	ldr	r2, [r5, #4]
 8001130:	400a      	ands	r2, r1
 8001132:	2a08      	cmp	r2, #8
 8001134:	d047      	beq.n	80011c6 <HAL_RCC_OscConfig+0x45a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001136:	4a33      	ldr	r2, [pc, #204]	@ (8001204 <HAL_RCC_OscConfig+0x498>)
 8001138:	2b02      	cmp	r3, #2
 800113a:	d132      	bne.n	80011a2 <HAL_RCC_OscConfig+0x436>
        __HAL_RCC_PLL_DISABLE();
 800113c:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800113e:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001140:	4013      	ands	r3, r2
 8001142:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001144:	f7ff fa6c 	bl	8000620 <HAL_GetTick>
 8001148:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114a:	04bf      	lsls	r7, r7, #18
 800114c:	682b      	ldr	r3, [r5, #0]
 800114e:	423b      	tst	r3, r7
 8001150:	d121      	bne.n	8001196 <HAL_RCC_OscConfig+0x42a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001152:	220f      	movs	r2, #15
 8001154:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001156:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001158:	4393      	bics	r3, r2
 800115a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800115c:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800115e:	4313      	orrs	r3, r2
 8001160:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8001162:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001164:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001166:	686a      	ldr	r2, [r5, #4]
 8001168:	430b      	orrs	r3, r1
 800116a:	4927      	ldr	r1, [pc, #156]	@ (8001208 <HAL_RCC_OscConfig+0x49c>)
 800116c:	400a      	ands	r2, r1
 800116e:	4313      	orrs	r3, r2
 8001170:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001172:	2380      	movs	r3, #128	@ 0x80
 8001174:	682a      	ldr	r2, [r5, #0]
 8001176:	045b      	lsls	r3, r3, #17
 8001178:	4313      	orrs	r3, r2
 800117a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800117c:	f7ff fa50 	bl	8000620 <HAL_GetTick>
 8001180:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001182:	682b      	ldr	r3, [r5, #0]
 8001184:	4233      	tst	r3, r6
 8001186:	d000      	beq.n	800118a <HAL_RCC_OscConfig+0x41e>
 8001188:	e62d      	b.n	8000de6 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800118a:	f7ff fa49 	bl	8000620 <HAL_GetTick>
 800118e:	1b00      	subs	r0, r0, r4
 8001190:	2802      	cmp	r0, #2
 8001192:	d9f6      	bls.n	8001182 <HAL_RCC_OscConfig+0x416>
 8001194:	e657      	b.n	8000e46 <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001196:	f7ff fa43 	bl	8000620 <HAL_GetTick>
 800119a:	1b80      	subs	r0, r0, r6
 800119c:	2802      	cmp	r0, #2
 800119e:	d9d5      	bls.n	800114c <HAL_RCC_OscConfig+0x3e0>
 80011a0:	e651      	b.n	8000e46 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PLL_DISABLE();
 80011a2:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a4:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80011a6:	4013      	ands	r3, r2
 80011a8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011aa:	f7ff fa39 	bl	8000620 <HAL_GetTick>
 80011ae:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b0:	04b6      	lsls	r6, r6, #18
 80011b2:	682b      	ldr	r3, [r5, #0]
 80011b4:	4233      	tst	r3, r6
 80011b6:	d100      	bne.n	80011ba <HAL_RCC_OscConfig+0x44e>
 80011b8:	e615      	b.n	8000de6 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ba:	f7ff fa31 	bl	8000620 <HAL_GetTick>
 80011be:	1b00      	subs	r0, r0, r4
 80011c0:	2802      	cmp	r0, #2
 80011c2:	d9f6      	bls.n	80011b2 <HAL_RCC_OscConfig+0x446>
 80011c4:	e63f      	b.n	8000e46 <HAL_RCC_OscConfig+0xda>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d100      	bne.n	80011cc <HAL_RCC_OscConfig+0x460>
 80011ca:	e5d4      	b.n	8000d76 <HAL_RCC_OscConfig+0xa>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011cc:	22c0      	movs	r2, #192	@ 0xc0
        pll_config  = RCC->CFGR;
 80011ce:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80011d2:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 80011d4:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d6:	4002      	ands	r2, r0
 80011d8:	428a      	cmp	r2, r1
 80011da:	d000      	beq.n	80011de <HAL_RCC_OscConfig+0x472>
 80011dc:	e5cb      	b.n	8000d76 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011de:	220f      	movs	r2, #15
 80011e0:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d000      	beq.n	80011ea <HAL_RCC_OscConfig+0x47e>
 80011e8:	e5c5      	b.n	8000d76 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80011ea:	23f0      	movs	r3, #240	@ 0xf0
 80011ec:	039b      	lsls	r3, r3, #14
 80011ee:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011f0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80011f2:	1ac0      	subs	r0, r0, r3
 80011f4:	1e43      	subs	r3, r0, #1
 80011f6:	4198      	sbcs	r0, r3
 80011f8:	b2c0      	uxtb	r0, r0
 80011fa:	e5bd      	b.n	8000d78 <HAL_RCC_OscConfig+0xc>
 80011fc:	40021000 	.word	0x40021000
 8001200:	fffeffff 	.word	0xfffeffff
 8001204:	feffffff 	.word	0xfeffffff
 8001208:	ffc27fff 	.word	0xffc27fff

0800120c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800120c:	200c      	movs	r0, #12
{
 800120e:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8001210:	4d13      	ldr	r5, [pc, #76]	@ (8001260 <HAL_RCC_GetSysClockFreq+0x54>)
 8001212:	686b      	ldr	r3, [r5, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001214:	4018      	ands	r0, r3
 8001216:	2808      	cmp	r0, #8
 8001218:	d008      	beq.n	800122c <HAL_RCC_GetSysClockFreq+0x20>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800121a:	380c      	subs	r0, #12
 800121c:	4243      	negs	r3, r0
 800121e:	4158      	adcs	r0, r3
 8001220:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <HAL_RCC_GetSysClockFreq+0x58>)
 8001222:	4240      	negs	r0, r0
 8001224:	4018      	ands	r0, r3
 8001226:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001228:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800122a:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800122c:	200f      	movs	r0, #15
 800122e:	490f      	ldr	r1, [pc, #60]	@ (800126c <HAL_RCC_GetSysClockFreq+0x60>)
 8001230:	0c9a      	lsrs	r2, r3, #18
 8001232:	4002      	ands	r2, r0
 8001234:	5c8c      	ldrb	r4, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001236:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8001238:	490d      	ldr	r1, [pc, #52]	@ (8001270 <HAL_RCC_GetSysClockFreq+0x64>)
 800123a:	4002      	ands	r2, r0
 800123c:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800123e:	22c0      	movs	r2, #192	@ 0xc0
 8001240:	2080      	movs	r0, #128	@ 0x80
 8001242:	0252      	lsls	r2, r2, #9
 8001244:	4013      	ands	r3, r2
 8001246:	0240      	lsls	r0, r0, #9
 8001248:	4283      	cmp	r3, r0
 800124a:	d101      	bne.n	8001250 <HAL_RCC_GetSysClockFreq+0x44>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800124c:	4806      	ldr	r0, [pc, #24]	@ (8001268 <HAL_RCC_GetSysClockFreq+0x5c>)
 800124e:	e002      	b.n	8001256 <HAL_RCC_GetSysClockFreq+0x4a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001250:	4293      	cmp	r3, r2
 8001252:	d1fb      	bne.n	800124c <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001254:	4807      	ldr	r0, [pc, #28]	@ (8001274 <HAL_RCC_GetSysClockFreq+0x68>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001256:	f7fe ff69 	bl	800012c <__udivsi3>
 800125a:	4360      	muls	r0, r4
 800125c:	e7e5      	b.n	800122a <HAL_RCC_GetSysClockFreq+0x1e>
 800125e:	46c0      	nop			@ (mov r8, r8)
 8001260:	40021000 	.word	0x40021000
 8001264:	02625a00 	.word	0x02625a00
 8001268:	007a1200 	.word	0x007a1200
 800126c:	08001925 	.word	0x08001925
 8001270:	08001915 	.word	0x08001915
 8001274:	02dc6c00 	.word	0x02dc6c00

08001278 <HAL_RCC_ClockConfig>:
{
 8001278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800127a:	0004      	movs	r4, r0
 800127c:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 800127e:	2800      	cmp	r0, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8001282:	2001      	movs	r0, #1
}
 8001284:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001286:	2201      	movs	r2, #1
 8001288:	4d3a      	ldr	r5, [pc, #232]	@ (8001374 <HAL_RCC_ClockConfig+0xfc>)
 800128a:	682b      	ldr	r3, [r5, #0]
 800128c:	4013      	ands	r3, r2
 800128e:	428b      	cmp	r3, r1
 8001290:	d31c      	bcc.n	80012cc <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001292:	6822      	ldr	r2, [r4, #0]
 8001294:	0793      	lsls	r3, r2, #30
 8001296:	d422      	bmi.n	80012de <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001298:	07d2      	lsls	r2, r2, #31
 800129a:	d42f      	bmi.n	80012fc <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800129c:	2301      	movs	r3, #1
 800129e:	682a      	ldr	r2, [r5, #0]
 80012a0:	401a      	ands	r2, r3
 80012a2:	42ba      	cmp	r2, r7
 80012a4:	d857      	bhi.n	8001356 <HAL_RCC_ClockConfig+0xde>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a6:	6823      	ldr	r3, [r4, #0]
 80012a8:	4d33      	ldr	r5, [pc, #204]	@ (8001378 <HAL_RCC_ClockConfig+0x100>)
 80012aa:	075b      	lsls	r3, r3, #29
 80012ac:	d45a      	bmi.n	8001364 <HAL_RCC_ClockConfig+0xec>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80012ae:	f7ff ffad 	bl	800120c <HAL_RCC_GetSysClockFreq>
 80012b2:	686b      	ldr	r3, [r5, #4]
 80012b4:	4a31      	ldr	r2, [pc, #196]	@ (800137c <HAL_RCC_ClockConfig+0x104>)
 80012b6:	061b      	lsls	r3, r3, #24
 80012b8:	0f1b      	lsrs	r3, r3, #28
 80012ba:	5cd3      	ldrb	r3, [r2, r3]
 80012bc:	4930      	ldr	r1, [pc, #192]	@ (8001380 <HAL_RCC_ClockConfig+0x108>)
 80012be:	40d8      	lsrs	r0, r3
 80012c0:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff f96c 	bl	80005a0 <HAL_InitTick>
  return HAL_OK;
 80012c8:	2000      	movs	r0, #0
 80012ca:	e7db      	b.n	8001284 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012cc:	682b      	ldr	r3, [r5, #0]
 80012ce:	4393      	bics	r3, r2
 80012d0:	430b      	orrs	r3, r1
 80012d2:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012d4:	682b      	ldr	r3, [r5, #0]
 80012d6:	4013      	ands	r3, r2
 80012d8:	428b      	cmp	r3, r1
 80012da:	d1d2      	bne.n	8001282 <HAL_RCC_ClockConfig+0xa>
 80012dc:	e7d9      	b.n	8001292 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012de:	4926      	ldr	r1, [pc, #152]	@ (8001378 <HAL_RCC_ClockConfig+0x100>)
 80012e0:	0753      	lsls	r3, r2, #29
 80012e2:	d504      	bpl.n	80012ee <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012e4:	23e0      	movs	r3, #224	@ 0xe0
 80012e6:	6848      	ldr	r0, [r1, #4]
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	4303      	orrs	r3, r0
 80012ec:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012ee:	20f0      	movs	r0, #240	@ 0xf0
 80012f0:	684b      	ldr	r3, [r1, #4]
 80012f2:	4383      	bics	r3, r0
 80012f4:	68a0      	ldr	r0, [r4, #8]
 80012f6:	4303      	orrs	r3, r0
 80012f8:	604b      	str	r3, [r1, #4]
 80012fa:	e7cd      	b.n	8001298 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012fc:	6862      	ldr	r2, [r4, #4]
 80012fe:	4e1e      	ldr	r6, [pc, #120]	@ (8001378 <HAL_RCC_ClockConfig+0x100>)
 8001300:	2a01      	cmp	r2, #1
 8001302:	d103      	bne.n	800130c <HAL_RCC_ClockConfig+0x94>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001304:	6833      	ldr	r3, [r6, #0]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001306:	039b      	lsls	r3, r3, #14
 8001308:	d405      	bmi.n	8001316 <HAL_RCC_ClockConfig+0x9e>
 800130a:	e7ba      	b.n	8001282 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800130c:	2a02      	cmp	r2, #2
 800130e:	d11a      	bne.n	8001346 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001310:	6833      	ldr	r3, [r6, #0]
 8001312:	019b      	lsls	r3, r3, #6
 8001314:	d5b5      	bpl.n	8001282 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001316:	2103      	movs	r1, #3
 8001318:	6873      	ldr	r3, [r6, #4]
 800131a:	438b      	bics	r3, r1
 800131c:	4313      	orrs	r3, r2
 800131e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001320:	f7ff f97e 	bl	8000620 <HAL_GetTick>
 8001324:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001326:	230c      	movs	r3, #12
 8001328:	6872      	ldr	r2, [r6, #4]
 800132a:	401a      	ands	r2, r3
 800132c:	6863      	ldr	r3, [r4, #4]
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	429a      	cmp	r2, r3
 8001332:	d0b3      	beq.n	800129c <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001334:	f7ff f974 	bl	8000620 <HAL_GetTick>
 8001338:	9b01      	ldr	r3, [sp, #4]
 800133a:	1ac0      	subs	r0, r0, r3
 800133c:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <HAL_RCC_ClockConfig+0x10c>)
 800133e:	4298      	cmp	r0, r3
 8001340:	d9f1      	bls.n	8001326 <HAL_RCC_ClockConfig+0xae>
        return HAL_TIMEOUT;
 8001342:	2003      	movs	r0, #3
 8001344:	e79e      	b.n	8001284 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001346:	2a03      	cmp	r2, #3
 8001348:	d101      	bne.n	800134e <HAL_RCC_ClockConfig+0xd6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800134a:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 800134c:	e7db      	b.n	8001306 <HAL_RCC_ClockConfig+0x8e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134e:	6833      	ldr	r3, [r6, #0]
 8001350:	079b      	lsls	r3, r3, #30
 8001352:	d4e0      	bmi.n	8001316 <HAL_RCC_ClockConfig+0x9e>
 8001354:	e795      	b.n	8001282 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001356:	682a      	ldr	r2, [r5, #0]
 8001358:	439a      	bics	r2, r3
 800135a:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800135c:	682a      	ldr	r2, [r5, #0]
 800135e:	421a      	tst	r2, r3
 8001360:	d0a1      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x2e>
 8001362:	e78e      	b.n	8001282 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001364:	686b      	ldr	r3, [r5, #4]
 8001366:	4a08      	ldr	r2, [pc, #32]	@ (8001388 <HAL_RCC_ClockConfig+0x110>)
 8001368:	4013      	ands	r3, r2
 800136a:	68e2      	ldr	r2, [r4, #12]
 800136c:	4313      	orrs	r3, r2
 800136e:	606b      	str	r3, [r5, #4]
 8001370:	e79d      	b.n	80012ae <HAL_RCC_ClockConfig+0x36>
 8001372:	46c0      	nop			@ (mov r8, r8)
 8001374:	40022000 	.word	0x40022000
 8001378:	40021000 	.word	0x40021000
 800137c:	08001905 	.word	0x08001905
 8001380:	20000000 	.word	0x20000000
 8001384:	00001388 	.word	0x00001388
 8001388:	fffff8ff 	.word	0xfffff8ff

0800138c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800138c:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800138e:	4a05      	ldr	r2, [pc, #20]	@ (80013a4 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	4905      	ldr	r1, [pc, #20]	@ (80013a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001394:	055b      	lsls	r3, r3, #21
 8001396:	0f5b      	lsrs	r3, r3, #29
 8001398:	5ccb      	ldrb	r3, [r1, r3]
 800139a:	6810      	ldr	r0, [r2, #0]
 800139c:	40d8      	lsrs	r0, r3
}    
 800139e:	4770      	bx	lr
 80013a0:	40021000 	.word	0x40021000
 80013a4:	20000000 	.word	0x20000000
 80013a8:	080018fd 	.word	0x080018fd

080013ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80013ac:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013ae:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013b2:	2201      	movs	r2, #1
 80013b4:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80013b8:	6801      	ldr	r1, [r0, #0]
 80013ba:	4d12      	ldr	r5, [pc, #72]	@ (8001404 <UART_EndRxTransfer+0x58>)
 80013bc:	680b      	ldr	r3, [r1, #0]
 80013be:	402b      	ands	r3, r5
 80013c0:	600b      	str	r3, [r1, #0]
 80013c2:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013c6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013ca:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013ce:	6801      	ldr	r1, [r0, #0]
 80013d0:	688b      	ldr	r3, [r1, #8]
 80013d2:	4393      	bics	r3, r2
 80013d4:	608b      	str	r3, [r1, #8]
 80013d6:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80013da:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80013dc:	4293      	cmp	r3, r2
 80013de:	d10a      	bne.n	80013f6 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013e0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013e4:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80013e8:	2410      	movs	r4, #16
 80013ea:	6802      	ldr	r2, [r0, #0]
 80013ec:	6813      	ldr	r3, [r2, #0]
 80013ee:	43a3      	bics	r3, r4
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80013f6:	2220      	movs	r2, #32
 80013f8:	1d03      	adds	r3, r0, #4
 80013fa:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80013fc:	2300      	movs	r3, #0
 80013fe:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001400:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8001402:	bd30      	pop	{r4, r5, pc}
 8001404:	fffffedf 	.word	0xfffffedf

08001408 <UART_SetConfig>:
{
 8001408:	b570      	push	{r4, r5, r6, lr}
 800140a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800140c:	6925      	ldr	r5, [r4, #16]
 800140e:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001410:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001412:	4329      	orrs	r1, r5
 8001414:	6965      	ldr	r5, [r4, #20]
 8001416:	69c2      	ldr	r2, [r0, #28]
 8001418:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800141a:	6818      	ldr	r0, [r3, #0]
 800141c:	4d3d      	ldr	r5, [pc, #244]	@ (8001514 <UART_SetConfig+0x10c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800141e:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001420:	4028      	ands	r0, r5
 8001422:	4301      	orrs	r1, r0
 8001424:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001426:	6859      	ldr	r1, [r3, #4]
 8001428:	483b      	ldr	r0, [pc, #236]	@ (8001518 <UART_SetConfig+0x110>)
  tmpreg |= huart->Init.OneBitSampling;
 800142a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800142c:	4001      	ands	r1, r0
 800142e:	68e0      	ldr	r0, [r4, #12]
 8001430:	4301      	orrs	r1, r0
 8001432:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001434:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001436:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001438:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800143a:	4d38      	ldr	r5, [pc, #224]	@ (800151c <UART_SetConfig+0x114>)
 800143c:	4028      	ands	r0, r5
 800143e:	4301      	orrs	r1, r0
 8001440:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001442:	4937      	ldr	r1, [pc, #220]	@ (8001520 <UART_SetConfig+0x118>)
 8001444:	428b      	cmp	r3, r1
 8001446:	d115      	bne.n	8001474 <UART_SetConfig+0x6c>
 8001448:	2103      	movs	r1, #3
 800144a:	4b36      	ldr	r3, [pc, #216]	@ (8001524 <UART_SetConfig+0x11c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	400b      	ands	r3, r1
 8001450:	3b01      	subs	r3, #1
 8001452:	2b02      	cmp	r3, #2
 8001454:	d851      	bhi.n	80014fa <UART_SetConfig+0xf2>
 8001456:	4934      	ldr	r1, [pc, #208]	@ (8001528 <UART_SetConfig+0x120>)
 8001458:	5cc8      	ldrb	r0, [r1, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800145a:	2380      	movs	r3, #128	@ 0x80
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	429a      	cmp	r2, r3
 8001460:	d127      	bne.n	80014b2 <UART_SetConfig+0xaa>
    switch (clocksource)
 8001462:	2808      	cmp	r0, #8
 8001464:	d847      	bhi.n	80014f6 <UART_SetConfig+0xee>
 8001466:	f7fe fe57 	bl	8000118 <__gnu_thumb1_case_uqi>
 800146a:	464c      	.short	0x464c
 800146c:	460b460e 	.word	0x460b460e
 8001470:	4646      	.short	0x4646
 8001472:	0f          	.byte	0x0f
 8001473:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001474:	492d      	ldr	r1, [pc, #180]	@ (800152c <UART_SetConfig+0x124>)
 8001476:	185b      	adds	r3, r3, r1
 8001478:	1e59      	subs	r1, r3, #1
 800147a:	418b      	sbcs	r3, r1
 800147c:	0118      	lsls	r0, r3, #4
 800147e:	e7ec      	b.n	800145a <UART_SetConfig+0x52>
        pclk = HAL_RCC_GetSysClockFreq();
 8001480:	f7ff fec4 	bl	800120c <HAL_RCC_GetSysClockFreq>
 8001484:	e03f      	b.n	8001506 <UART_SetConfig+0xfe>
    switch (clocksource)
 8001486:	4a2a      	ldr	r2, [pc, #168]	@ (8001530 <UART_SetConfig+0x128>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001488:	6861      	ldr	r1, [r4, #4]
 800148a:	0052      	lsls	r2, r2, #1
 800148c:	0848      	lsrs	r0, r1, #1
 800148e:	1810      	adds	r0, r2, r0
 8001490:	f7fe fe4c 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001494:	0002      	movs	r2, r0
 8001496:	4b27      	ldr	r3, [pc, #156]	@ (8001534 <UART_SetConfig+0x12c>)
 8001498:	3a10      	subs	r2, #16
 800149a:	429a      	cmp	r2, r3
 800149c:	d82b      	bhi.n	80014f6 <UART_SetConfig+0xee>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800149e:	230f      	movs	r3, #15
 80014a0:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80014a2:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80014a4:	439a      	bics	r2, r3
 80014a6:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80014a8:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80014aa:	6822      	ldr	r2, [r4, #0]
 80014ac:	4303      	orrs	r3, r0
 80014ae:	60d3      	str	r3, [r2, #12]
 80014b0:	e02b      	b.n	800150a <UART_SetConfig+0x102>
    switch (clocksource)
 80014b2:	2808      	cmp	r0, #8
 80014b4:	d81f      	bhi.n	80014f6 <UART_SetConfig+0xee>
 80014b6:	f7fe fe2f 	bl	8000118 <__gnu_thumb1_case_uqi>
 80014ba:	1e13      	.short	0x1e13
 80014bc:	1e181e05 	.word	0x1e181e05
 80014c0:	1e1e      	.short	0x1e1e
 80014c2:	1b          	.byte	0x1b
 80014c3:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 80014c4:	481a      	ldr	r0, [pc, #104]	@ (8001530 <UART_SetConfig+0x128>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80014c6:	6861      	ldr	r1, [r4, #4]
 80014c8:	084b      	lsrs	r3, r1, #1
 80014ca:	1818      	adds	r0, r3, r0
 80014cc:	f7fe fe2e 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80014d0:	0002      	movs	r2, r0
 80014d2:	4b18      	ldr	r3, [pc, #96]	@ (8001534 <UART_SetConfig+0x12c>)
 80014d4:	3a10      	subs	r2, #16
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d80d      	bhi.n	80014f6 <UART_SetConfig+0xee>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80014da:	6823      	ldr	r3, [r4, #0]
 80014dc:	60d8      	str	r0, [r3, #12]
 80014de:	e014      	b.n	800150a <UART_SetConfig+0x102>
        pclk = HAL_RCC_GetPCLK1Freq();
 80014e0:	f7ff ff54 	bl	800138c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d010      	beq.n	800150a <UART_SetConfig+0x102>
 80014e8:	e7ed      	b.n	80014c6 <UART_SetConfig+0xbe>
        pclk = HAL_RCC_GetSysClockFreq();
 80014ea:	f7ff fe8f 	bl	800120c <HAL_RCC_GetSysClockFreq>
        break;
 80014ee:	e7f9      	b.n	80014e4 <UART_SetConfig+0xdc>
    switch (clocksource)
 80014f0:	2080      	movs	r0, #128	@ 0x80
 80014f2:	0200      	lsls	r0, r0, #8
 80014f4:	e7e7      	b.n	80014c6 <UART_SetConfig+0xbe>
        ret = HAL_ERROR;
 80014f6:	2001      	movs	r0, #1
 80014f8:	e008      	b.n	800150c <UART_SetConfig+0x104>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80014fa:	2380      	movs	r3, #128	@ 0x80
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	429a      	cmp	r2, r3
 8001500:	d1ee      	bne.n	80014e0 <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001502:	f7ff ff43 	bl	800138c <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8001506:	1e02      	subs	r2, r0, #0
    if (pclk != 0U)
 8001508:	d1be      	bne.n	8001488 <UART_SetConfig+0x80>
        pclk = (uint32_t) HSI_VALUE;
 800150a:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800150c:	2300      	movs	r3, #0
 800150e:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8001510:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8001512:	bd70      	pop	{r4, r5, r6, pc}
 8001514:	efff69f3 	.word	0xefff69f3
 8001518:	ffffcfff 	.word	0xffffcfff
 800151c:	fffff4ff 	.word	0xfffff4ff
 8001520:	40013800 	.word	0x40013800
 8001524:	40021000 	.word	0x40021000
 8001528:	08001935 	.word	0x08001935
 800152c:	bfffbc00 	.word	0xbfffbc00
 8001530:	007a1200 	.word	0x007a1200
 8001534:	0000ffef 	.word	0x0000ffef

08001538 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001538:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 800153a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800153c:	071a      	lsls	r2, r3, #28
 800153e:	d506      	bpl.n	800154e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001540:	6801      	ldr	r1, [r0, #0]
 8001542:	4c28      	ldr	r4, [pc, #160]	@ (80015e4 <UART_AdvFeatureConfig+0xac>)
 8001544:	684a      	ldr	r2, [r1, #4]
 8001546:	4022      	ands	r2, r4
 8001548:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800154a:	4322      	orrs	r2, r4
 800154c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800154e:	07da      	lsls	r2, r3, #31
 8001550:	d506      	bpl.n	8001560 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001552:	6801      	ldr	r1, [r0, #0]
 8001554:	4c24      	ldr	r4, [pc, #144]	@ (80015e8 <UART_AdvFeatureConfig+0xb0>)
 8001556:	684a      	ldr	r2, [r1, #4]
 8001558:	4022      	ands	r2, r4
 800155a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800155c:	4322      	orrs	r2, r4
 800155e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001560:	079a      	lsls	r2, r3, #30
 8001562:	d506      	bpl.n	8001572 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001564:	6801      	ldr	r1, [r0, #0]
 8001566:	4c21      	ldr	r4, [pc, #132]	@ (80015ec <UART_AdvFeatureConfig+0xb4>)
 8001568:	684a      	ldr	r2, [r1, #4]
 800156a:	4022      	ands	r2, r4
 800156c:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800156e:	4322      	orrs	r2, r4
 8001570:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001572:	075a      	lsls	r2, r3, #29
 8001574:	d506      	bpl.n	8001584 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001576:	6801      	ldr	r1, [r0, #0]
 8001578:	4c1d      	ldr	r4, [pc, #116]	@ (80015f0 <UART_AdvFeatureConfig+0xb8>)
 800157a:	684a      	ldr	r2, [r1, #4]
 800157c:	4022      	ands	r2, r4
 800157e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8001580:	4322      	orrs	r2, r4
 8001582:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001584:	06da      	lsls	r2, r3, #27
 8001586:	d506      	bpl.n	8001596 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001588:	6801      	ldr	r1, [r0, #0]
 800158a:	4c1a      	ldr	r4, [pc, #104]	@ (80015f4 <UART_AdvFeatureConfig+0xbc>)
 800158c:	688a      	ldr	r2, [r1, #8]
 800158e:	4022      	ands	r2, r4
 8001590:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8001592:	4322      	orrs	r2, r4
 8001594:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001596:	069a      	lsls	r2, r3, #26
 8001598:	d506      	bpl.n	80015a8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800159a:	6801      	ldr	r1, [r0, #0]
 800159c:	4c16      	ldr	r4, [pc, #88]	@ (80015f8 <UART_AdvFeatureConfig+0xc0>)
 800159e:	688a      	ldr	r2, [r1, #8]
 80015a0:	4022      	ands	r2, r4
 80015a2:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80015a4:	4322      	orrs	r2, r4
 80015a6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80015a8:	065a      	lsls	r2, r3, #25
 80015aa:	d510      	bpl.n	80015ce <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80015ac:	6801      	ldr	r1, [r0, #0]
 80015ae:	4d13      	ldr	r5, [pc, #76]	@ (80015fc <UART_AdvFeatureConfig+0xc4>)
 80015b0:	684a      	ldr	r2, [r1, #4]
 80015b2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80015b4:	402a      	ands	r2, r5
 80015b6:	4322      	orrs	r2, r4
 80015b8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80015ba:	2280      	movs	r2, #128	@ 0x80
 80015bc:	0352      	lsls	r2, r2, #13
 80015be:	4294      	cmp	r4, r2
 80015c0:	d105      	bne.n	80015ce <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80015c2:	684a      	ldr	r2, [r1, #4]
 80015c4:	4c0e      	ldr	r4, [pc, #56]	@ (8001600 <UART_AdvFeatureConfig+0xc8>)
 80015c6:	4022      	ands	r2, r4
 80015c8:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80015ca:	4322      	orrs	r2, r4
 80015cc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80015ce:	061b      	lsls	r3, r3, #24
 80015d0:	d506      	bpl.n	80015e0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80015d2:	6802      	ldr	r2, [r0, #0]
 80015d4:	490b      	ldr	r1, [pc, #44]	@ (8001604 <UART_AdvFeatureConfig+0xcc>)
 80015d6:	6853      	ldr	r3, [r2, #4]
 80015d8:	400b      	ands	r3, r1
 80015da:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80015dc:	430b      	orrs	r3, r1
 80015de:	6053      	str	r3, [r2, #4]
}
 80015e0:	bd30      	pop	{r4, r5, pc}
 80015e2:	46c0      	nop			@ (mov r8, r8)
 80015e4:	ffff7fff 	.word	0xffff7fff
 80015e8:	fffdffff 	.word	0xfffdffff
 80015ec:	fffeffff 	.word	0xfffeffff
 80015f0:	fffbffff 	.word	0xfffbffff
 80015f4:	ffffefff 	.word	0xffffefff
 80015f8:	ffffdfff 	.word	0xffffdfff
 80015fc:	ffefffff 	.word	0xffefffff
 8001600:	ff9fffff 	.word	0xff9fffff
 8001604:	fff7ffff 	.word	0xfff7ffff

08001608 <UART_WaitOnFlagUntilTimeout>:
{
 8001608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800160a:	0004      	movs	r4, r0
 800160c:	000d      	movs	r5, r1
 800160e:	0017      	movs	r7, r2
 8001610:	9300      	str	r3, [sp, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001612:	6822      	ldr	r2, [r4, #0]
 8001614:	69d3      	ldr	r3, [r2, #28]
 8001616:	402b      	ands	r3, r5
 8001618:	1b5b      	subs	r3, r3, r5
 800161a:	4259      	negs	r1, r3
 800161c:	414b      	adcs	r3, r1
 800161e:	42bb      	cmp	r3, r7
 8001620:	d001      	beq.n	8001626 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8001622:	2000      	movs	r0, #0
 8001624:	e025      	b.n	8001672 <UART_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8001626:	9b08      	ldr	r3, [sp, #32]
 8001628:	3301      	adds	r3, #1
 800162a:	d0f3      	beq.n	8001614 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800162c:	f7fe fff8 	bl	8000620 <HAL_GetTick>
 8001630:	9b00      	ldr	r3, [sp, #0]
 8001632:	1ac0      	subs	r0, r0, r3
 8001634:	9b08      	ldr	r3, [sp, #32]
 8001636:	4298      	cmp	r0, r3
 8001638:	d82c      	bhi.n	8001694 <UART_WaitOnFlagUntilTimeout+0x8c>
 800163a:	2b00      	cmp	r3, #0
 800163c:	d02a      	beq.n	8001694 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800163e:	6823      	ldr	r3, [r4, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	0752      	lsls	r2, r2, #29
 8001644:	d5e5      	bpl.n	8001612 <UART_WaitOnFlagUntilTimeout+0xa>
 8001646:	002a      	movs	r2, r5
 8001648:	2140      	movs	r1, #64	@ 0x40
 800164a:	3a40      	subs	r2, #64	@ 0x40
 800164c:	438a      	bics	r2, r1
 800164e:	d0e0      	beq.n	8001612 <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001650:	69da      	ldr	r2, [r3, #28]
 8001652:	2608      	movs	r6, #8
 8001654:	0011      	movs	r1, r2
 8001656:	4031      	ands	r1, r6
 8001658:	9101      	str	r1, [sp, #4]
 800165a:	4232      	tst	r2, r6
 800165c:	d00a      	beq.n	8001674 <UART_WaitOnFlagUntilTimeout+0x6c>
          UART_EndRxTransfer(huart);
 800165e:	0020      	movs	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001660:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 8001662:	f7ff fea3 	bl	80013ac <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001666:	19a3      	adds	r3, r4, r6
 8001668:	67de      	str	r6, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 800166a:	2300      	movs	r3, #0
          return HAL_ERROR;
 800166c:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 800166e:	3478      	adds	r4, #120	@ 0x78
 8001670:	7023      	strb	r3, [r4, #0]
}
 8001672:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001674:	2280      	movs	r2, #128	@ 0x80
 8001676:	69d9      	ldr	r1, [r3, #28]
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	4211      	tst	r1, r2
 800167c:	d0c9      	beq.n	8001612 <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800167e:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8001680:	0020      	movs	r0, r4
 8001682:	f7ff fe93 	bl	80013ac <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001686:	0023      	movs	r3, r4
 8001688:	2220      	movs	r2, #32
 800168a:	3308      	adds	r3, #8
 800168c:	67da      	str	r2, [r3, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 800168e:	9b01      	ldr	r3, [sp, #4]
 8001690:	3478      	adds	r4, #120	@ 0x78
 8001692:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8001694:	2003      	movs	r0, #3
 8001696:	e7ec      	b.n	8001672 <UART_WaitOnFlagUntilTimeout+0x6a>

08001698 <HAL_UART_Transmit>:
{
 8001698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800169a:	b087      	sub	sp, #28
 800169c:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 800169e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 80016a0:	0004      	movs	r4, r0
 80016a2:	000d      	movs	r5, r1
 80016a4:	0017      	movs	r7, r2
    return HAL_BUSY;
 80016a6:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80016a8:	2b20      	cmp	r3, #32
 80016aa:	d138      	bne.n	800171e <HAL_UART_Transmit+0x86>
      return  HAL_ERROR;
 80016ac:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80016ae:	2900      	cmp	r1, #0
 80016b0:	d035      	beq.n	800171e <HAL_UART_Transmit+0x86>
 80016b2:	2a00      	cmp	r2, #0
 80016b4:	d033      	beq.n	800171e <HAL_UART_Transmit+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016b6:	2380      	movs	r3, #128	@ 0x80
 80016b8:	68a2      	ldr	r2, [r4, #8]
 80016ba:	015b      	lsls	r3, r3, #5
 80016bc:	429a      	cmp	r2, r3
 80016be:	d104      	bne.n	80016ca <HAL_UART_Transmit+0x32>
 80016c0:	6923      	ldr	r3, [r4, #16]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 80016c6:	4201      	tst	r1, r0
 80016c8:	d129      	bne.n	800171e <HAL_UART_Transmit+0x86>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016ca:	0023      	movs	r3, r4
 80016cc:	2600      	movs	r6, #0
 80016ce:	3308      	adds	r3, #8
 80016d0:	67de      	str	r6, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016d2:	2321      	movs	r3, #33	@ 0x21
 80016d4:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 80016d6:	f7fe ffa3 	bl	8000620 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80016da:	0023      	movs	r3, r4
 80016dc:	3350      	adds	r3, #80	@ 0x50
 80016de:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 80016e0:	3302      	adds	r3, #2
 80016e2:	9303      	str	r3, [sp, #12]
 80016e4:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016e6:	2380      	movs	r3, #128	@ 0x80
 80016e8:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80016ea:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016ec:	015b      	lsls	r3, r3, #5
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d104      	bne.n	80016fc <HAL_UART_Transmit+0x64>
 80016f2:	6923      	ldr	r3, [r4, #16]
 80016f4:	42b3      	cmp	r3, r6
 80016f6:	d101      	bne.n	80016fc <HAL_UART_Transmit+0x64>
 80016f8:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80016fa:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80016fc:	0023      	movs	r3, r4
 80016fe:	3352      	adds	r3, #82	@ 0x52
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	b29a      	uxth	r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d10c      	bne.n	8001722 <HAL_UART_Transmit+0x8a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001708:	9b05      	ldr	r3, [sp, #20]
 800170a:	2140      	movs	r1, #64	@ 0x40
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	0020      	movs	r0, r4
 8001710:	9b04      	ldr	r3, [sp, #16]
 8001712:	f7ff ff79 	bl	8001608 <UART_WaitOnFlagUntilTimeout>
 8001716:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 8001718:	67e3      	str	r3, [r4, #124]	@ 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800171a:	2800      	cmp	r0, #0
 800171c:	d10d      	bne.n	800173a <HAL_UART_Transmit+0xa2>
}
 800171e:	b007      	add	sp, #28
 8001720:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001722:	9b05      	ldr	r3, [sp, #20]
 8001724:	2200      	movs	r2, #0
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	2180      	movs	r1, #128	@ 0x80
 800172a:	0020      	movs	r0, r4
 800172c:	9b04      	ldr	r3, [sp, #16]
 800172e:	f7ff ff6b 	bl	8001608 <UART_WaitOnFlagUntilTimeout>
 8001732:	2800      	cmp	r0, #0
 8001734:	d003      	beq.n	800173e <HAL_UART_Transmit+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8001736:	2320      	movs	r3, #32
 8001738:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 800173a:	2003      	movs	r0, #3
 800173c:	e7ef      	b.n	800171e <HAL_UART_Transmit+0x86>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800173e:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8001740:	2d00      	cmp	r5, #0
 8001742:	d10b      	bne.n	800175c <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001744:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8001746:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001748:	05db      	lsls	r3, r3, #23
 800174a:	0ddb      	lsrs	r3, r3, #23
 800174c:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800174e:	9b03      	ldr	r3, [sp, #12]
 8001750:	9a03      	ldr	r2, [sp, #12]
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	3b01      	subs	r3, #1
 8001756:	b29b      	uxth	r3, r3
 8001758:	8013      	strh	r3, [r2, #0]
 800175a:	e7cf      	b.n	80016fc <HAL_UART_Transmit+0x64>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800175c:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 800175e:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001760:	8513      	strh	r3, [r2, #40]	@ 0x28
        pdata8bits++;
 8001762:	e7f4      	b.n	800174e <HAL_UART_Transmit+0xb6>

08001764 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001764:	0003      	movs	r3, r0
{
 8001766:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001768:	2500      	movs	r5, #0
{
 800176a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800176c:	3308      	adds	r3, #8
 800176e:	67dd      	str	r5, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 8001770:	f7fe ff56 	bl	8000620 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001774:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001776:	0006      	movs	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	071b      	lsls	r3, r3, #28
 800177c:	d51d      	bpl.n	80017ba <UART_CheckIdleState+0x56>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800177e:	2180      	movs	r1, #128	@ 0x80
 8001780:	4b26      	ldr	r3, [pc, #152]	@ (800181c <UART_CheckIdleState+0xb8>)
 8001782:	002a      	movs	r2, r5
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	0389      	lsls	r1, r1, #14
 8001788:	0003      	movs	r3, r0
 800178a:	0020      	movs	r0, r4
 800178c:	f7ff ff3c 	bl	8001608 <UART_WaitOnFlagUntilTimeout>
 8001790:	42a8      	cmp	r0, r5
 8001792:	d012      	beq.n	80017ba <UART_CheckIdleState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001794:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001798:	2301      	movs	r3, #1
 800179a:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800179e:	2080      	movs	r0, #128	@ 0x80
 80017a0:	6822      	ldr	r2, [r4, #0]
 80017a2:	6813      	ldr	r3, [r2, #0]
 80017a4:	4383      	bics	r3, r0
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 80017ac:	2320      	movs	r3, #32
 80017ae:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80017b0:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80017b2:	2300      	movs	r3, #0
 80017b4:	3478      	adds	r4, #120	@ 0x78
 80017b6:	7023      	strb	r3, [r4, #0]
}
 80017b8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80017ba:	0025      	movs	r5, r4
 80017bc:	cd08      	ldmia	r5!, {r3}
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	075b      	lsls	r3, r3, #29
 80017c2:	d523      	bpl.n	800180c <UART_CheckIdleState+0xa8>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80017c4:	2180      	movs	r1, #128	@ 0x80
 80017c6:	4b15      	ldr	r3, [pc, #84]	@ (800181c <UART_CheckIdleState+0xb8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	0020      	movs	r0, r4
 80017ce:	0033      	movs	r3, r6
 80017d0:	03c9      	lsls	r1, r1, #15
 80017d2:	f7ff ff19 	bl	8001608 <UART_WaitOnFlagUntilTimeout>
 80017d6:	2800      	cmp	r0, #0
 80017d8:	d018      	beq.n	800180c <UART_CheckIdleState+0xa8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017da:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017de:	2201      	movs	r2, #1
 80017e0:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80017e4:	6821      	ldr	r1, [r4, #0]
 80017e6:	4e0e      	ldr	r6, [pc, #56]	@ (8001820 <UART_CheckIdleState+0xbc>)
 80017e8:	680b      	ldr	r3, [r1, #0]
 80017ea:	4033      	ands	r3, r6
 80017ec:	600b      	str	r3, [r1, #0]
 80017ee:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017f2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017f6:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017fa:	6821      	ldr	r1, [r4, #0]
 80017fc:	688b      	ldr	r3, [r1, #8]
 80017fe:	4393      	bics	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
 8001802:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8001806:	2320      	movs	r3, #32
 8001808:	67eb      	str	r3, [r5, #124]	@ 0x7c
      return HAL_TIMEOUT;
 800180a:	e7d1      	b.n	80017b0 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 800180c:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800180e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001810:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001812:	67eb      	str	r3, [r5, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001814:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001816:	6660      	str	r0, [r4, #100]	@ 0x64
  return HAL_OK;
 8001818:	e7cb      	b.n	80017b2 <UART_CheckIdleState+0x4e>
 800181a:	46c0      	nop			@ (mov r8, r8)
 800181c:	01ffffff 	.word	0x01ffffff
 8001820:	fffffedf 	.word	0xfffffedf

08001824 <HAL_UART_Init>:
{
 8001824:	b510      	push	{r4, lr}
 8001826:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001828:	d101      	bne.n	800182e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800182a:	2001      	movs	r0, #1
}
 800182c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800182e:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8001830:	2b00      	cmp	r3, #0
 8001832:	d104      	bne.n	800183e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8001834:	0002      	movs	r2, r0
 8001836:	3278      	adds	r2, #120	@ 0x78
 8001838:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800183a:	f7fe fe35 	bl	80004a8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800183e:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8001840:	2101      	movs	r1, #1
 8001842:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001844:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8001846:	6813      	ldr	r3, [r2, #0]
 8001848:	438b      	bics	r3, r1
 800184a:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800184c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8001852:	0020      	movs	r0, r4
 8001854:	f7ff fe70 	bl	8001538 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001858:	0020      	movs	r0, r4
 800185a:	f7ff fdd5 	bl	8001408 <UART_SetConfig>
 800185e:	2801      	cmp	r0, #1
 8001860:	d0e3      	beq.n	800182a <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	4907      	ldr	r1, [pc, #28]	@ (8001884 <HAL_UART_Init+0x60>)
 8001866:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001868:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800186a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800186c:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800186e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	438a      	bics	r2, r1
 8001874:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001876:	2201      	movs	r2, #1
 8001878:	6819      	ldr	r1, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800187e:	f7ff ff71 	bl	8001764 <UART_CheckIdleState>
 8001882:	e7d3      	b.n	800182c <HAL_UART_Init+0x8>
 8001884:	ffffb7ff 	.word	0xffffb7ff

08001888 <memset>:
 8001888:	0003      	movs	r3, r0
 800188a:	1882      	adds	r2, r0, r2
 800188c:	4293      	cmp	r3, r2
 800188e:	d100      	bne.n	8001892 <memset+0xa>
 8001890:	4770      	bx	lr
 8001892:	7019      	strb	r1, [r3, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	e7f9      	b.n	800188c <memset+0x4>

08001898 <__libc_init_array>:
 8001898:	b570      	push	{r4, r5, r6, lr}
 800189a:	2600      	movs	r6, #0
 800189c:	4c0c      	ldr	r4, [pc, #48]	@ (80018d0 <__libc_init_array+0x38>)
 800189e:	4d0d      	ldr	r5, [pc, #52]	@ (80018d4 <__libc_init_array+0x3c>)
 80018a0:	1b64      	subs	r4, r4, r5
 80018a2:	10a4      	asrs	r4, r4, #2
 80018a4:	42a6      	cmp	r6, r4
 80018a6:	d109      	bne.n	80018bc <__libc_init_array+0x24>
 80018a8:	2600      	movs	r6, #0
 80018aa:	f000 f819 	bl	80018e0 <_init>
 80018ae:	4c0a      	ldr	r4, [pc, #40]	@ (80018d8 <__libc_init_array+0x40>)
 80018b0:	4d0a      	ldr	r5, [pc, #40]	@ (80018dc <__libc_init_array+0x44>)
 80018b2:	1b64      	subs	r4, r4, r5
 80018b4:	10a4      	asrs	r4, r4, #2
 80018b6:	42a6      	cmp	r6, r4
 80018b8:	d105      	bne.n	80018c6 <__libc_init_array+0x2e>
 80018ba:	bd70      	pop	{r4, r5, r6, pc}
 80018bc:	00b3      	lsls	r3, r6, #2
 80018be:	58eb      	ldr	r3, [r5, r3]
 80018c0:	4798      	blx	r3
 80018c2:	3601      	adds	r6, #1
 80018c4:	e7ee      	b.n	80018a4 <__libc_init_array+0xc>
 80018c6:	00b3      	lsls	r3, r6, #2
 80018c8:	58eb      	ldr	r3, [r5, r3]
 80018ca:	4798      	blx	r3
 80018cc:	3601      	adds	r6, #1
 80018ce:	e7f2      	b.n	80018b6 <__libc_init_array+0x1e>
 80018d0:	08001938 	.word	0x08001938
 80018d4:	08001938 	.word	0x08001938
 80018d8:	0800193c 	.word	0x0800193c
 80018dc:	08001938 	.word	0x08001938

080018e0 <_init>:
 80018e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018e2:	46c0      	nop			@ (mov r8, r8)
 80018e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018e6:	bc08      	pop	{r3}
 80018e8:	469e      	mov	lr, r3
 80018ea:	4770      	bx	lr

080018ec <_fini>:
 80018ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ee:	46c0      	nop			@ (mov r8, r8)
 80018f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018f2:	bc08      	pop	{r3}
 80018f4:	469e      	mov	lr, r3
 80018f6:	4770      	bx	lr
